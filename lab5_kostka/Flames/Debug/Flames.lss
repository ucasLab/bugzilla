
Flames.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003854  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000548  20000000  00083854  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          00000300  20000548  00083d9c  00020548  2**2
                  ALLOC
  3 .stack        00004000  20080000  20080000  00030000  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00020548  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020571  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000aa45  00000000  00000000  000205ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001804  00000000  00000000  0002b00f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00005551  00000000  00000000  0002c813  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000690  00000000  00000000  00031d64  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000630  00000000  00000000  000323f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00013fc5  00000000  00000000  00032a24  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00009798  00000000  00000000  000469e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00058533  00000000  00000000  00050181  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001270  00000000  00000000  000a86b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20084000 	.word	0x20084000
   80004:	00080dd1 	.word	0x00080dd1
   80008:	00080dcd 	.word	0x00080dcd
   8000c:	00080dcd 	.word	0x00080dcd
   80010:	00080dcd 	.word	0x00080dcd
   80014:	00080dcd 	.word	0x00080dcd
   80018:	00080dcd 	.word	0x00080dcd
	...
   8002c:	00080dcd 	.word	0x00080dcd
   80030:	00080dcd 	.word	0x00080dcd
   80034:	00000000 	.word	0x00000000
   80038:	00080dcd 	.word	0x00080dcd
   8003c:	00080f99 	.word	0x00080f99
   80040:	00080dcd 	.word	0x00080dcd
   80044:	00080dcd 	.word	0x00080dcd
   80048:	00080dcd 	.word	0x00080dcd
   8004c:	00080dcd 	.word	0x00080dcd
   80050:	00080dcd 	.word	0x00080dcd
   80054:	00080dcd 	.word	0x00080dcd
   80058:	00080dcd 	.word	0x00080dcd
   8005c:	00080dcd 	.word	0x00080dcd
   80060:	00080dcd 	.word	0x00080dcd
   80064:	00080dcd 	.word	0x00080dcd
   80068:	00080c6d 	.word	0x00080c6d
   8006c:	00080c81 	.word	0x00080c81
   80070:	00080c95 	.word	0x00080c95
   80074:	00080dcd 	.word	0x00080dcd
   80078:	00080dcd 	.word	0x00080dcd
   8007c:	00080dcd 	.word	0x00080dcd
   80080:	00080dcd 	.word	0x00080dcd
   80084:	00080dcd 	.word	0x00080dcd
   80088:	00080dcd 	.word	0x00080dcd
   8008c:	00080dcd 	.word	0x00080dcd
   80090:	00080dcd 	.word	0x00080dcd
   80094:	00080dcd 	.word	0x00080dcd
   80098:	00080dcd 	.word	0x00080dcd
   8009c:	00080dcd 	.word	0x00080dcd
   800a0:	00080dcd 	.word	0x00080dcd
   800a4:	00080dcd 	.word	0x00080dcd
   800a8:	00080dcd 	.word	0x00080dcd
   800ac:	00080dcd 	.word	0x00080dcd
   800b0:	00080dcd 	.word	0x00080dcd
   800b4:	00080dcd 	.word	0x00080dcd
   800b8:	00080dcd 	.word	0x00080dcd

000800bc <__do_global_dtors_aux>:
   800bc:	b510      	push	{r4, lr}
   800be:	4c05      	ldr	r4, [pc, #20]	; (800d4 <__do_global_dtors_aux+0x18>)
   800c0:	7823      	ldrb	r3, [r4, #0]
   800c2:	b933      	cbnz	r3, 800d2 <__do_global_dtors_aux+0x16>
   800c4:	4b04      	ldr	r3, [pc, #16]	; (800d8 <__do_global_dtors_aux+0x1c>)
   800c6:	b113      	cbz	r3, 800ce <__do_global_dtors_aux+0x12>
   800c8:	4804      	ldr	r0, [pc, #16]	; (800dc <__do_global_dtors_aux+0x20>)
   800ca:	f3af 8000 	nop.w
   800ce:	2301      	movs	r3, #1
   800d0:	7023      	strb	r3, [r4, #0]
   800d2:	bd10      	pop	{r4, pc}
   800d4:	20000548 	.word	0x20000548
   800d8:	00000000 	.word	0x00000000
   800dc:	00083854 	.word	0x00083854

000800e0 <frame_dummy>:
   800e0:	4b08      	ldr	r3, [pc, #32]	; (80104 <frame_dummy+0x24>)
   800e2:	b510      	push	{r4, lr}
   800e4:	b11b      	cbz	r3, 800ee <frame_dummy+0xe>
   800e6:	4908      	ldr	r1, [pc, #32]	; (80108 <frame_dummy+0x28>)
   800e8:	4808      	ldr	r0, [pc, #32]	; (8010c <frame_dummy+0x2c>)
   800ea:	f3af 8000 	nop.w
   800ee:	4808      	ldr	r0, [pc, #32]	; (80110 <frame_dummy+0x30>)
   800f0:	6803      	ldr	r3, [r0, #0]
   800f2:	b903      	cbnz	r3, 800f6 <frame_dummy+0x16>
   800f4:	bd10      	pop	{r4, pc}
   800f6:	4b07      	ldr	r3, [pc, #28]	; (80114 <frame_dummy+0x34>)
   800f8:	2b00      	cmp	r3, #0
   800fa:	d0fb      	beq.n	800f4 <frame_dummy+0x14>
   800fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80100:	4718      	bx	r3
   80102:	bf00      	nop
   80104:	00000000 	.word	0x00000000
   80108:	2000054c 	.word	0x2000054c
   8010c:	00083854 	.word	0x00083854
   80110:	00083854 	.word	0x00083854
   80114:	00000000 	.word	0x00000000

00080118 <aat31xx_set_backlight>:
 * \param ul_level backlight level.
 *
 * \note pin BOARD_AAT31XX_SET_GPIO must be configured before calling aat31xx_set_backlight.
 */
void aat31xx_set_backlight(uint32_t ul_level)
{
   80118:	b470      	push	{r4, r5, r6}
   8011a:	b083      	sub	sp, #12
#ifdef CONF_BOARD_AAT3193
	ul_level = AAT31XX_MAX_BACKLIGHT_LEVEL - ul_level + 1;
#endif

	/* Ensure valid level */
	ul_level = (ul_level > AAT31XX_MAX_BACKLIGHT_LEVEL) ? AAT31XX_MAX_BACKLIGHT_LEVEL : ul_level;
   8011c:	2820      	cmp	r0, #32
   8011e:	bf28      	it	cs
   80120:	2020      	movcs	r0, #32
	ul_level = (ul_level < AAT31XX_MIN_BACKLIGHT_LEVEL) ? AAT31XX_MIN_BACKLIGHT_LEVEL : ul_level;
   80122:	2800      	cmp	r0, #0
   80124:	bf08      	it	eq
   80126:	2001      	moveq	r0, #1
 * \param ul_level backlight level.
 *
 * \note pin BOARD_AAT31XX_SET_GPIO must be configured before calling aat31xx_set_backlight.
 */
void aat31xx_set_backlight(uint32_t ul_level)
{
   80128:	2100      	movs	r1, #0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   8012a:	4e10      	ldr	r6, [pc, #64]	; (8016c <aat31xx_set_backlight+0x54>)
   8012c:	f44f 2500 	mov.w	r5, #524288	; 0x80000
	ul_level = (ul_level < AAT31XX_MIN_BACKLIGHT_LEVEL) ? AAT31XX_MIN_BACKLIGHT_LEVEL : ul_level;

	/* Set new backlight level */
	for (i = 0; i < ul_level; i++) {
		ioport_set_pin_level(BOARD_AAT31XX_SET_GPIO, IOPORT_PIN_LEVEL_LOW);
		ul_delay = DELAY_PULSE;
   80130:	2418      	movs	r4, #24
   80132:	6375      	str	r5, [r6, #52]	; 0x34
   80134:	9401      	str	r4, [sp, #4]
		while (ul_delay--) {
   80136:	9b01      	ldr	r3, [sp, #4]
   80138:	1e5a      	subs	r2, r3, #1
   8013a:	9201      	str	r2, [sp, #4]
   8013c:	2b00      	cmp	r3, #0
   8013e:	d1fa      	bne.n	80136 <aat31xx_set_backlight+0x1e>
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80140:	6335      	str	r5, [r6, #48]	; 0x30
		}

		ioport_set_pin_level(BOARD_AAT31XX_SET_GPIO, IOPORT_PIN_LEVEL_HIGH);

		ul_delay = DELAY_PULSE;
   80142:	9401      	str	r4, [sp, #4]
		while (ul_delay--) {
   80144:	9b01      	ldr	r3, [sp, #4]
   80146:	1e5a      	subs	r2, r3, #1
   80148:	9201      	str	r2, [sp, #4]
   8014a:	2b00      	cmp	r3, #0
   8014c:	d1fa      	bne.n	80144 <aat31xx_set_backlight+0x2c>
	/* Ensure valid level */
	ul_level = (ul_level > AAT31XX_MAX_BACKLIGHT_LEVEL) ? AAT31XX_MAX_BACKLIGHT_LEVEL : ul_level;
	ul_level = (ul_level < AAT31XX_MIN_BACKLIGHT_LEVEL) ? AAT31XX_MIN_BACKLIGHT_LEVEL : ul_level;

	/* Set new backlight level */
	for (i = 0; i < ul_level; i++) {
   8014e:	3101      	adds	r1, #1
   80150:	4281      	cmp	r1, r0
   80152:	d3ee      	bcc.n	80132 <aat31xx_set_backlight+0x1a>
		ul_delay = DELAY_PULSE;
		while (ul_delay--) {
		}
	}

	ul_delay = DELAY_ENABLE;
   80154:	f44f 3300 	mov.w	r3, #131072	; 0x20000
   80158:	9301      	str	r3, [sp, #4]
	while (ul_delay--) {
   8015a:	9b01      	ldr	r3, [sp, #4]
   8015c:	1e5a      	subs	r2, r3, #1
   8015e:	9201      	str	r2, [sp, #4]
   80160:	2b00      	cmp	r3, #0
   80162:	d1fa      	bne.n	8015a <aat31xx_set_backlight+0x42>
	}
}
   80164:	b003      	add	sp, #12
   80166:	bc70      	pop	{r4, r5, r6}
   80168:	4770      	bx	lr
   8016a:	bf00      	nop
   8016c:	400e1000 	.word	0x400e1000

00080170 <aat31xx_disable_backlight>:

/**
 * \brief Switch off backlight.
 */
void aat31xx_disable_backlight(void)
{
   80170:	b082      	sub	sp, #8
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80172:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   80176:	4b06      	ldr	r3, [pc, #24]	; (80190 <aat31xx_disable_backlight+0x20>)
   80178:	635a      	str	r2, [r3, #52]	; 0x34
	volatile uint32_t ul_delay;

	ioport_set_pin_level(BOARD_AAT31XX_SET_GPIO, IOPORT_PIN_LEVEL_LOW);

	ul_delay = DELAY_DISABLE;
   8017a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
   8017e:	9301      	str	r3, [sp, #4]
	while (ul_delay--) {
   80180:	9b01      	ldr	r3, [sp, #4]
   80182:	1e5a      	subs	r2, r3, #1
   80184:	9201      	str	r2, [sp, #4]
   80186:	2b00      	cmp	r3, #0
   80188:	d1fa      	bne.n	80180 <aat31xx_disable_backlight+0x10>
	}
}
   8018a:	b002      	add	sp, #8
   8018c:	4770      	bx	lr
   8018e:	bf00      	nop
   80190:	400e1000 	.word	0x400e1000

00080194 <hx8347a_delay>:

/**
 * \brief Delay function.
 */
static void hx8347a_delay(uint32_t ul_ms)
{
   80194:	b082      	sub	sp, #8
	volatile uint32_t i;

	for(i = 0; i < ul_ms; i++) {
   80196:	2300      	movs	r3, #0
   80198:	9301      	str	r3, [sp, #4]
   8019a:	9b01      	ldr	r3, [sp, #4]
   8019c:	4298      	cmp	r0, r3
   8019e:	d911      	bls.n	801c4 <hx8347a_delay+0x30>
		for(i = 0; i < 100000; i++) {
   801a0:	2100      	movs	r1, #0
   801a2:	4a09      	ldr	r2, [pc, #36]	; (801c8 <hx8347a_delay+0x34>)
   801a4:	9101      	str	r1, [sp, #4]
   801a6:	9b01      	ldr	r3, [sp, #4]
   801a8:	4293      	cmp	r3, r2
   801aa:	d805      	bhi.n	801b8 <hx8347a_delay+0x24>
   801ac:	9b01      	ldr	r3, [sp, #4]
   801ae:	3301      	adds	r3, #1
   801b0:	9301      	str	r3, [sp, #4]
   801b2:	9b01      	ldr	r3, [sp, #4]
   801b4:	4293      	cmp	r3, r2
   801b6:	d9f9      	bls.n	801ac <hx8347a_delay+0x18>
 */
static void hx8347a_delay(uint32_t ul_ms)
{
	volatile uint32_t i;

	for(i = 0; i < ul_ms; i++) {
   801b8:	9b01      	ldr	r3, [sp, #4]
   801ba:	3301      	adds	r3, #1
   801bc:	9301      	str	r3, [sp, #4]
   801be:	9b01      	ldr	r3, [sp, #4]
   801c0:	4283      	cmp	r3, r0
   801c2:	d3ef      	bcc.n	801a4 <hx8347a_delay+0x10>
		for(i = 0; i < 100000; i++) {
		}
	}
}
   801c4:	b002      	add	sp, #8
   801c6:	4770      	bx	lr
   801c8:	0001869f 	.word	0x0001869f

000801cc <hx8347a_check_box_coordinates>:
 * \param p_ul_x2 X coordinate of lower-right corner on LCD.
 * \param p_ul_y2 Y coordinate of lower-right corner on LCD.
 */
static void hx8347a_check_box_coordinates(uint32_t *p_ul_x1, uint32_t *p_ul_y1,
		uint32_t *p_ul_x2, uint32_t *p_ul_y2)
{
   801cc:	b430      	push	{r4, r5}
	uint32_t ul;

	if (*p_ul_x1 >= HX8347A_LCD_WIDTH) {
   801ce:	6804      	ldr	r4, [r0, #0]
   801d0:	2cef      	cmp	r4, #239	; 0xef
		*p_ul_x1 = HX8347A_LCD_WIDTH - 1;
   801d2:	bf84      	itt	hi
   801d4:	24ef      	movhi	r4, #239	; 0xef
   801d6:	6004      	strhi	r4, [r0, #0]
	}

	if (*p_ul_x2 >= HX8347A_LCD_WIDTH) {
   801d8:	6814      	ldr	r4, [r2, #0]
   801da:	2cef      	cmp	r4, #239	; 0xef
		*p_ul_x2 = HX8347A_LCD_WIDTH - 1;
   801dc:	bf84      	itt	hi
   801de:	24ef      	movhi	r4, #239	; 0xef
   801e0:	6014      	strhi	r4, [r2, #0]
	}

	if (*p_ul_y1 >= HX8347A_LCD_HEIGHT) {
   801e2:	680c      	ldr	r4, [r1, #0]
   801e4:	f5b4 7fa0 	cmp.w	r4, #320	; 0x140
		*p_ul_y1 = HX8347A_LCD_HEIGHT - 1;
   801e8:	bf24      	itt	cs
   801ea:	f240 143f 	movwcs	r4, #319	; 0x13f
   801ee:	600c      	strcs	r4, [r1, #0]
	}

	if (*p_ul_y2 >= HX8347A_LCD_HEIGHT) {
   801f0:	681c      	ldr	r4, [r3, #0]
   801f2:	f5b4 7fa0 	cmp.w	r4, #320	; 0x140
		*p_ul_y2 = HX8347A_LCD_HEIGHT - 1;
   801f6:	bf24      	itt	cs
   801f8:	f240 143f 	movwcs	r4, #319	; 0x13f
   801fc:	601c      	strcs	r4, [r3, #0]
	}

	if (*p_ul_x1 > *p_ul_x2) {
   801fe:	6804      	ldr	r4, [r0, #0]
   80200:	6815      	ldr	r5, [r2, #0]
   80202:	42ac      	cmp	r4, r5
		ul = *p_ul_x1;
		*p_ul_x1 = *p_ul_x2;
   80204:	bf84      	itt	hi
   80206:	6005      	strhi	r5, [r0, #0]
		*p_ul_x2 = ul;
   80208:	6014      	strhi	r4, [r2, #0]
	}

	if (*p_ul_y1 > *p_ul_y2) {
   8020a:	680a      	ldr	r2, [r1, #0]
   8020c:	6818      	ldr	r0, [r3, #0]
   8020e:	4282      	cmp	r2, r0
		ul = *p_ul_y1;
		*p_ul_y1 = *p_ul_y2;
   80210:	bf84      	itt	hi
   80212:	6008      	strhi	r0, [r1, #0]
		*p_ul_y2 = ul;
   80214:	601a      	strhi	r2, [r3, #0]
	}
}
   80216:	bc30      	pop	{r4, r5}
   80218:	4770      	bx	lr
   8021a:	bf00      	nop

0008021c <hx8347a_write_ram_buffer>:
 *
 * \param p_ul_buf data buffer.
 * \param ul_size size in pixels.
 */
static void hx8347a_write_ram_buffer(const hx8347a_color_t *p_ul_buf, uint32_t ul_size)
{
   8021c:	b470      	push	{r4, r5, r6}
	uint32_t addr;

	for (addr = 0; addr < (ul_size - ul_size % 8); addr += 8) {
   8021e:	f031 0607 	bics.w	r6, r1, #7
   80222:	d018      	beq.n	80256 <hx8347a_write_ram_buffer+0x3a>
   80224:	4603      	mov	r3, r0
   80226:	2400      	movs	r4, #0
	{
		*((volatile uint16_t *)(BOARD_HX8347A_ADDR)) = lcd_index; /* HX8347A index register address */
	}
	static inline void LCD_WD(uint16_t lcd_data)
	{
		*((volatile uint16_t *)((BOARD_HX8347A_ADDR) | (BOARD_HX8347A_RS))) = lcd_data;
   80228:	4a12      	ldr	r2, [pc, #72]	; (80274 <hx8347a_write_ram_buffer+0x58>)
		hx8347a_write_ram(p_ul_buf[addr]);
   8022a:	f830 5014 	ldrh.w	r5, [r0, r4, lsl #1]
   8022e:	8015      	strh	r5, [r2, #0]
		hx8347a_write_ram(p_ul_buf[addr + 1]);
   80230:	885d      	ldrh	r5, [r3, #2]
   80232:	8015      	strh	r5, [r2, #0]
		hx8347a_write_ram(p_ul_buf[addr + 2]);
   80234:	889d      	ldrh	r5, [r3, #4]
   80236:	8015      	strh	r5, [r2, #0]
		hx8347a_write_ram(p_ul_buf[addr + 3]);
   80238:	88dd      	ldrh	r5, [r3, #6]
   8023a:	8015      	strh	r5, [r2, #0]
		hx8347a_write_ram(p_ul_buf[addr + 4]);
   8023c:	891d      	ldrh	r5, [r3, #8]
   8023e:	8015      	strh	r5, [r2, #0]
		hx8347a_write_ram(p_ul_buf[addr + 5]);
   80240:	895d      	ldrh	r5, [r3, #10]
   80242:	8015      	strh	r5, [r2, #0]
		hx8347a_write_ram(p_ul_buf[addr + 6]);
   80244:	899d      	ldrh	r5, [r3, #12]
   80246:	8015      	strh	r5, [r2, #0]
		hx8347a_write_ram(p_ul_buf[addr + 7]);
   80248:	89dd      	ldrh	r5, [r3, #14]
   8024a:	8015      	strh	r5, [r2, #0]
 */
static void hx8347a_write_ram_buffer(const hx8347a_color_t *p_ul_buf, uint32_t ul_size)
{
	uint32_t addr;

	for (addr = 0; addr < (ul_size - ul_size % 8); addr += 8) {
   8024c:	3408      	adds	r4, #8
   8024e:	3310      	adds	r3, #16
   80250:	42b4      	cmp	r4, r6
   80252:	d3ea      	bcc.n	8022a <hx8347a_write_ram_buffer+0xe>
   80254:	e000      	b.n	80258 <hx8347a_write_ram_buffer+0x3c>
   80256:	2400      	movs	r4, #0
		hx8347a_write_ram(p_ul_buf[addr + 4]);
		hx8347a_write_ram(p_ul_buf[addr + 5]);
		hx8347a_write_ram(p_ul_buf[addr + 6]);
		hx8347a_write_ram(p_ul_buf[addr + 7]);
	}
	for (; addr < ul_size; addr++) {
   80258:	42a1      	cmp	r1, r4
   8025a:	d909      	bls.n	80270 <hx8347a_write_ram_buffer+0x54>
   8025c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   80260:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   80264:	4a03      	ldr	r2, [pc, #12]	; (80274 <hx8347a_write_ram_buffer+0x58>)
		hx8347a_write_ram(p_ul_buf[addr]);
   80266:	f834 3b02 	ldrh.w	r3, [r4], #2
   8026a:	8013      	strh	r3, [r2, #0]
		hx8347a_write_ram(p_ul_buf[addr + 4]);
		hx8347a_write_ram(p_ul_buf[addr + 5]);
		hx8347a_write_ram(p_ul_buf[addr + 6]);
		hx8347a_write_ram(p_ul_buf[addr + 7]);
	}
	for (; addr < ul_size; addr++) {
   8026c:	4284      	cmp	r4, r0
   8026e:	d1fa      	bne.n	80266 <hx8347a_write_ram_buffer+0x4a>
		hx8347a_write_ram(p_ul_buf[addr]);
	}
}
   80270:	bc70      	pop	{r4, r5, r6}
   80272:	4770      	bx	lr
   80274:	62000002 	.word	0x62000002

00080278 <hx8347a_display_on>:

/**
 * \brief Turn on the LCD.
 */
void hx8347a_display_on(void)
{
   80278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

/* Define EBI access for HX8347A 16-bit System Interface.*/
#if defined(BOARD_HX8347A_ADDR) && defined (BOARD_HX8347A_RS)
	static inline void LCD_IR(uint16_t lcd_index)
	{
		*((volatile uint16_t *)(BOARD_HX8347A_ADDR)) = lcd_index; /* HX8347A index register address */
   8027a:	f04f 45c4 	mov.w	r5, #1644167168	; 0x62000000
   8027e:	2390      	movs	r3, #144	; 0x90
   80280:	802b      	strh	r3, [r5, #0]
	}
	static inline void LCD_WD(uint16_t lcd_data)
	{
		*((volatile uint16_t *)((BOARD_HX8347A_ADDR) | (BOARD_HX8347A_RS))) = lcd_data;
   80282:	4c0b      	ldr	r4, [pc, #44]	; (802b0 <hx8347a_display_on+0x38>)
   80284:	237f      	movs	r3, #127	; 0x7f
   80286:	8023      	strh	r3, [r4, #0]

/* Define EBI access for HX8347A 16-bit System Interface.*/
#if defined(BOARD_HX8347A_ADDR) && defined (BOARD_HX8347A_RS)
	static inline void LCD_IR(uint16_t lcd_index)
	{
		*((volatile uint16_t *)(BOARD_HX8347A_ADDR)) = lcd_index; /* HX8347A index register address */
   80288:	2626      	movs	r6, #38	; 0x26
   8028a:	802e      	strh	r6, [r5, #0]
	}
	static inline void LCD_WD(uint16_t lcd_data)
	{
		*((volatile uint16_t *)((BOARD_HX8347A_ADDR) | (BOARD_HX8347A_RS))) = lcd_data;
   8028c:	2304      	movs	r3, #4
   8028e:	8023      	strh	r3, [r4, #0]
	/* SAP=0111 1111 */
	hx8347a_write_register(HX8347A_DISP_CTRL8, HX8347A_DISP_CTRL8_SAP(0x7F));
	/* GON=0, DTE=0, D=01 */
	hx8347a_write_register(HX8347A_DISP_CTRL1, HX8347A_DISP_CTRL1_D(0x01));
	hx8347a_delay(100);
   80290:	2064      	movs	r0, #100	; 0x64
   80292:	4f08      	ldr	r7, [pc, #32]	; (802b4 <hx8347a_display_on+0x3c>)
   80294:	47b8      	blx	r7

/* Define EBI access for HX8347A 16-bit System Interface.*/
#if defined(BOARD_HX8347A_ADDR) && defined (BOARD_HX8347A_RS)
	static inline void LCD_IR(uint16_t lcd_index)
	{
		*((volatile uint16_t *)(BOARD_HX8347A_ADDR)) = lcd_index; /* HX8347A index register address */
   80296:	802e      	strh	r6, [r5, #0]
	}
	static inline void LCD_WD(uint16_t lcd_data)
	{
		*((volatile uint16_t *)((BOARD_HX8347A_ADDR) | (BOARD_HX8347A_RS))) = lcd_data;
   80298:	2324      	movs	r3, #36	; 0x24
   8029a:	8023      	strh	r3, [r4, #0]

/* Define EBI access for HX8347A 16-bit System Interface.*/
#if defined(BOARD_HX8347A_ADDR) && defined (BOARD_HX8347A_RS)
	static inline void LCD_IR(uint16_t lcd_index)
	{
		*((volatile uint16_t *)(BOARD_HX8347A_ADDR)) = lcd_index; /* HX8347A index register address */
   8029c:	802e      	strh	r6, [r5, #0]
	}
	static inline void LCD_WD(uint16_t lcd_data)
	{
		*((volatile uint16_t *)((BOARD_HX8347A_ADDR) | (BOARD_HX8347A_RS))) = lcd_data;
   8029e:	232c      	movs	r3, #44	; 0x2c
   802a0:	8023      	strh	r3, [r4, #0]
			HX8347A_DISP_CTRL1_GON | HX8347A_DISP_CTRL1_D(0x01)); 
		
	/* GON=1, DTE=0, D=11 */
	hx8347a_write_register(HX8347A_DISP_CTRL1, 
			HX8347A_DISP_CTRL1_GON | HX8347A_DISP_CTRL1_D(0x03));
	hx8347a_delay(100);
   802a2:	2064      	movs	r0, #100	; 0x64
   802a4:	47b8      	blx	r7

/* Define EBI access for HX8347A 16-bit System Interface.*/
#if defined(BOARD_HX8347A_ADDR) && defined (BOARD_HX8347A_RS)
	static inline void LCD_IR(uint16_t lcd_index)
	{
		*((volatile uint16_t *)(BOARD_HX8347A_ADDR)) = lcd_index; /* HX8347A index register address */
   802a6:	802e      	strh	r6, [r5, #0]
	}
	static inline void LCD_WD(uint16_t lcd_data)
	{
		*((volatile uint16_t *)((BOARD_HX8347A_ADDR) | (BOARD_HX8347A_RS))) = lcd_data;
   802a8:	233c      	movs	r3, #60	; 0x3c
   802aa:	8023      	strh	r3, [r4, #0]
   802ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   802ae:	bf00      	nop
   802b0:	62000002 	.word	0x62000002
   802b4:	00080195 	.word	0x00080195

000802b8 <hx8347a_set_foreground_color>:
 * \brief Set foreground color.
 *
 * \param us_color foreground color.
 */
void hx8347a_set_foreground_color(hx8347a_color_t us_color)
{
   802b8:	4a04      	ldr	r2, [pc, #16]	; (802cc <hx8347a_set_foreground_color+0x14>)
   802ba:	1e93      	subs	r3, r2, #2
   802bc:	f502 72ef 	add.w	r2, r2, #478	; 0x1de
	uint32_t i;

	/* Fill the cache with selected color */
	for (i = 0; i < LCD_DATA_CACHE_SIZE; ++i) {
		g_ul_pixel_cache[i] = us_color;
   802c0:	f823 0f02 	strh.w	r0, [r3, #2]!
void hx8347a_set_foreground_color(hx8347a_color_t us_color)
{
	uint32_t i;

	/* Fill the cache with selected color */
	for (i = 0; i < LCD_DATA_CACHE_SIZE; ++i) {
   802c4:	4293      	cmp	r3, r2
   802c6:	d1fb      	bne.n	802c0 <hx8347a_set_foreground_color+0x8>
		g_ul_pixel_cache[i] = us_color;
	}
}
   802c8:	4770      	bx	lr
   802ca:	bf00      	nop
   802cc:	20000564 	.word	0x20000564

000802d0 <hx8347a_set_window>:
 * \param ul_width The width of the window.
 * \param ul_height The height of the window.
 */
void hx8347a_set_window(uint32_t ul_x, uint32_t ul_y, uint32_t ul_width,
		uint32_t ul_height)
{
   802d0:	b5f0      	push	{r4, r5, r6, r7, lr}
	Assert(ul_width <= (0xF0 - ul_x));
	Assert(ul_height <= (0x140 - ul_y));

	uint8_t x1, x2, y1, y2;

	x1 = ul_x & 0xff;
   802d2:	b2c7      	uxtb	r7, r0
	x2 = (ul_x & 0xff00) >> 8;
	y1 = ul_y & 0xff;
   802d4:	b2ce      	uxtb	r6, r1
	y2 = (ul_y & 0xff00) >> 8;
	hx8347a_write_register(HX8347A_COL_ADDR_START2, x2); /* column high */
   802d6:	f3c0 2e07 	ubfx	lr, r0, #8, #8

/* Define EBI access for HX8347A 16-bit System Interface.*/
#if defined(BOARD_HX8347A_ADDR) && defined (BOARD_HX8347A_RS)
	static inline void LCD_IR(uint16_t lcd_index)
	{
		*((volatile uint16_t *)(BOARD_HX8347A_ADDR)) = lcd_index; /* HX8347A index register address */
   802da:	f04f 45c4 	mov.w	r5, #1644167168	; 0x62000000
   802de:	2402      	movs	r4, #2
   802e0:	802c      	strh	r4, [r5, #0]
	}
	static inline void LCD_WD(uint16_t lcd_data)
	{
		*((volatile uint16_t *)((BOARD_HX8347A_ADDR) | (BOARD_HX8347A_RS))) = lcd_data;
   802e2:	f104 44c4 	add.w	r4, r4, #1644167168	; 0x62000000
   802e6:	f8a4 e000 	strh.w	lr, [r4]
	hx8347a_write_register(HX8347A_COL_ADDR_START1, x1); /* column low */
   802ea:	fa1f fe87 	uxth.w	lr, r7

/* Define EBI access for HX8347A 16-bit System Interface.*/
#if defined(BOARD_HX8347A_ADDR) && defined (BOARD_HX8347A_RS)
	static inline void LCD_IR(uint16_t lcd_index)
	{
		*((volatile uint16_t *)(BOARD_HX8347A_ADDR)) = lcd_index; /* HX8347A index register address */
   802ee:	f04f 0c03 	mov.w	ip, #3
   802f2:	f8a5 c000 	strh.w	ip, [r5]
	}
	static inline void LCD_WD(uint16_t lcd_data)
	{
		*((volatile uint16_t *)((BOARD_HX8347A_ADDR) | (BOARD_HX8347A_RS))) = lcd_data;
   802f6:	f8a4 e000 	strh.w	lr, [r4]
	hx8347a_write_register(HX8347A_ROW_ADDR_START2, y2); /* row high */
   802fa:	f3c1 2e07 	ubfx	lr, r1, #8, #8

/* Define EBI access for HX8347A 16-bit System Interface.*/
#if defined(BOARD_HX8347A_ADDR) && defined (BOARD_HX8347A_RS)
	static inline void LCD_IR(uint16_t lcd_index)
	{
		*((volatile uint16_t *)(BOARD_HX8347A_ADDR)) = lcd_index; /* HX8347A index register address */
   802fe:	f04f 0c06 	mov.w	ip, #6
   80302:	f8a5 c000 	strh.w	ip, [r5]
	}
	static inline void LCD_WD(uint16_t lcd_data)
	{
		*((volatile uint16_t *)((BOARD_HX8347A_ADDR) | (BOARD_HX8347A_RS))) = lcd_data;
   80306:	f8a4 e000 	strh.w	lr, [r4]
	hx8347a_write_register(HX8347A_ROW_ADDR_START1, y1); /* row low */
   8030a:	fa1f fe86 	uxth.w	lr, r6

/* Define EBI access for HX8347A 16-bit System Interface.*/
#if defined(BOARD_HX8347A_ADDR) && defined (BOARD_HX8347A_RS)
	static inline void LCD_IR(uint16_t lcd_index)
	{
		*((volatile uint16_t *)(BOARD_HX8347A_ADDR)) = lcd_index; /* HX8347A index register address */
   8030e:	f04f 0c07 	mov.w	ip, #7
   80312:	f8a5 c000 	strh.w	ip, [r5]
	}
	static inline void LCD_WD(uint16_t lcd_data)
	{
		*((volatile uint16_t *)((BOARD_HX8347A_ADDR) | (BOARD_HX8347A_RS))) = lcd_data;
   80316:	f8a4 e000 	strh.w	lr, [r4]

	x1 = (ul_x + ul_width - 1) & 0xff;
	x2 = ((ul_x + ul_width - 1) & 0xff00) >> 8;
	y1 = (ul_y + ul_height - 1) & 0xff;
	y2 = ((ul_y + ul_height - 1) & 0xff00) >> 8;
	hx8347a_write_register(HX8347A_COL_ADDR_END2, x2); /* column high */
   8031a:	f102 3eff 	add.w	lr, r2, #4294967295
   8031e:	4470      	add	r0, lr
   80320:	f3c0 2007 	ubfx	r0, r0, #8, #8

/* Define EBI access for HX8347A 16-bit System Interface.*/
#if defined(BOARD_HX8347A_ADDR) && defined (BOARD_HX8347A_RS)
	static inline void LCD_IR(uint16_t lcd_index)
	{
		*((volatile uint16_t *)(BOARD_HX8347A_ADDR)) = lcd_index; /* HX8347A index register address */
   80324:	f04f 0e04 	mov.w	lr, #4
   80328:	f8a5 e000 	strh.w	lr, [r5]
	}
	static inline void LCD_WD(uint16_t lcd_data)
	{
		*((volatile uint16_t *)((BOARD_HX8347A_ADDR) | (BOARD_HX8347A_RS))) = lcd_data;
   8032c:	8020      	strh	r0, [r4, #0]
	hx8347a_write_register(HX8347A_COL_ADDR_END1, x1); /* column low */
   8032e:	3a01      	subs	r2, #1
   80330:	443a      	add	r2, r7
   80332:	b2d2      	uxtb	r2, r2

/* Define EBI access for HX8347A 16-bit System Interface.*/
#if defined(BOARD_HX8347A_ADDR) && defined (BOARD_HX8347A_RS)
	static inline void LCD_IR(uint16_t lcd_index)
	{
		*((volatile uint16_t *)(BOARD_HX8347A_ADDR)) = lcd_index; /* HX8347A index register address */
   80334:	2005      	movs	r0, #5
   80336:	8028      	strh	r0, [r5, #0]
	}
	static inline void LCD_WD(uint16_t lcd_data)
	{
		*((volatile uint16_t *)((BOARD_HX8347A_ADDR) | (BOARD_HX8347A_RS))) = lcd_data;
   80338:	8022      	strh	r2, [r4, #0]
	hx8347a_write_register(HX8347A_ROW_ADDR_END2, y2); /* row high */
   8033a:	1e5a      	subs	r2, r3, #1
   8033c:	4411      	add	r1, r2
   8033e:	f3c1 2107 	ubfx	r1, r1, #8, #8

/* Define EBI access for HX8347A 16-bit System Interface.*/
#if defined(BOARD_HX8347A_ADDR) && defined (BOARD_HX8347A_RS)
	static inline void LCD_IR(uint16_t lcd_index)
	{
		*((volatile uint16_t *)(BOARD_HX8347A_ADDR)) = lcd_index; /* HX8347A index register address */
   80342:	2208      	movs	r2, #8
   80344:	802a      	strh	r2, [r5, #0]
	}
	static inline void LCD_WD(uint16_t lcd_data)
	{
		*((volatile uint16_t *)((BOARD_HX8347A_ADDR) | (BOARD_HX8347A_RS))) = lcd_data;
   80346:	8021      	strh	r1, [r4, #0]
	hx8347a_write_register(HX8347A_ROW_ADDR_END1, y1); /* row low */
   80348:	3b01      	subs	r3, #1
   8034a:	4433      	add	r3, r6
   8034c:	b2db      	uxtb	r3, r3

/* Define EBI access for HX8347A 16-bit System Interface.*/
#if defined(BOARD_HX8347A_ADDR) && defined (BOARD_HX8347A_RS)
	static inline void LCD_IR(uint16_t lcd_index)
	{
		*((volatile uint16_t *)(BOARD_HX8347A_ADDR)) = lcd_index; /* HX8347A index register address */
   8034e:	2209      	movs	r2, #9
   80350:	802a      	strh	r2, [r5, #0]
	}
	static inline void LCD_WD(uint16_t lcd_data)
	{
		*((volatile uint16_t *)((BOARD_HX8347A_ADDR) | (BOARD_HX8347A_RS))) = lcd_data;
   80352:	8023      	strh	r3, [r4, #0]
   80354:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80356:	bf00      	nop

00080358 <hx8347a_set_cursor_position>:
 *
 * \param us_x X coordinate of upper-left corner on LCD.
 * \param us_y Y coordinate of upper-left corner on LCD.
 */
void hx8347a_set_cursor_position(uint16_t us_x, uint16_t us_y)
{
   80358:	b430      	push	{r4, r5}
	uint8_t x1, x2, y1, y2;

	x1 = us_x & 0xff;
	x2 = (us_x & 0xff00) >> 8;
   8035a:	0a05      	lsrs	r5, r0, #8
	y1 = us_y & 0xff;
	y2 = (us_y & 0xff00) >> 8;
   8035c:	0a0c      	lsrs	r4, r1, #8

/* Define EBI access for HX8347A 16-bit System Interface.*/
#if defined(BOARD_HX8347A_ADDR) && defined (BOARD_HX8347A_RS)
	static inline void LCD_IR(uint16_t lcd_index)
	{
		*((volatile uint16_t *)(BOARD_HX8347A_ADDR)) = lcd_index; /* HX8347A index register address */
   8035e:	f04f 42c4 	mov.w	r2, #1644167168	; 0x62000000
   80362:	2302      	movs	r3, #2
   80364:	8013      	strh	r3, [r2, #0]
	}
	static inline void LCD_WD(uint16_t lcd_data)
	{
		*((volatile uint16_t *)((BOARD_HX8347A_ADDR) | (BOARD_HX8347A_RS))) = lcd_data;
   80366:	f103 43c4 	add.w	r3, r3, #1644167168	; 0x62000000
   8036a:	801d      	strh	r5, [r3, #0]
   8036c:	b2c0      	uxtb	r0, r0

/* Define EBI access for HX8347A 16-bit System Interface.*/
#if defined(BOARD_HX8347A_ADDR) && defined (BOARD_HX8347A_RS)
	static inline void LCD_IR(uint16_t lcd_index)
	{
		*((volatile uint16_t *)(BOARD_HX8347A_ADDR)) = lcd_index; /* HX8347A index register address */
   8036e:	2503      	movs	r5, #3
   80370:	8015      	strh	r5, [r2, #0]
	}
	static inline void LCD_WD(uint16_t lcd_data)
	{
		*((volatile uint16_t *)((BOARD_HX8347A_ADDR) | (BOARD_HX8347A_RS))) = lcd_data;
   80372:	8018      	strh	r0, [r3, #0]

/* Define EBI access for HX8347A 16-bit System Interface.*/
#if defined(BOARD_HX8347A_ADDR) && defined (BOARD_HX8347A_RS)
	static inline void LCD_IR(uint16_t lcd_index)
	{
		*((volatile uint16_t *)(BOARD_HX8347A_ADDR)) = lcd_index; /* HX8347A index register address */
   80374:	2006      	movs	r0, #6
   80376:	8010      	strh	r0, [r2, #0]
	}
	static inline void LCD_WD(uint16_t lcd_data)
	{
		*((volatile uint16_t *)((BOARD_HX8347A_ADDR) | (BOARD_HX8347A_RS))) = lcd_data;
   80378:	801c      	strh	r4, [r3, #0]
   8037a:	b2c9      	uxtb	r1, r1

/* Define EBI access for HX8347A 16-bit System Interface.*/
#if defined(BOARD_HX8347A_ADDR) && defined (BOARD_HX8347A_RS)
	static inline void LCD_IR(uint16_t lcd_index)
	{
		*((volatile uint16_t *)(BOARD_HX8347A_ADDR)) = lcd_index; /* HX8347A index register address */
   8037c:	2007      	movs	r0, #7
   8037e:	8010      	strh	r0, [r2, #0]
	}
	static inline void LCD_WD(uint16_t lcd_data)
	{
		*((volatile uint16_t *)((BOARD_HX8347A_ADDR) | (BOARD_HX8347A_RS))) = lcd_data;
   80380:	8019      	strh	r1, [r3, #0]
	hx8347a_write_register(HX8347A_COL_ADDR_START2, x2); /* column high */
	hx8347a_write_register(HX8347A_COL_ADDR_START1, x1); /* column low */
	hx8347a_write_register(HX8347A_ROW_ADDR_START2, y2); /* row high */
	hx8347a_write_register(HX8347A_ROW_ADDR_START1, y1); /* row low */
}
   80382:	bc30      	pop	{r4, r5}
   80384:	4770      	bx	lr
   80386:	bf00      	nop

00080388 <hx8347a_init>:
 * \param p_opt pointer to HX8347A option structure.
 *
 * \return 0 if initialization succeeds, otherwise fails.
 */
uint32_t hx8347a_init(struct hx8347a_opt_t *p_opt)
{
   80388:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

/* Define EBI access for HX8347A 16-bit System Interface.*/
#if defined(BOARD_HX8347A_ADDR) && defined (BOARD_HX8347A_RS)
	static inline void LCD_IR(uint16_t lcd_index)
	{
		*((volatile uint16_t *)(BOARD_HX8347A_ADDR)) = lcd_index; /* HX8347A index register address */
   8038c:	2267      	movs	r2, #103	; 0x67
   8038e:	f04f 43c4 	mov.w	r3, #1644167168	; 0x62000000
   80392:	801a      	strh	r2, [r3, #0]
	{
		*((volatile uint16_t *)((BOARD_HX8347A_ADDR) | (BOARD_HX8347A_RS))) = lcd_data;
	}
	static inline uint16_t LCD_RD(void)
	{
		return *((volatile uint16_t *)((BOARD_HX8347A_ADDR) | (BOARD_HX8347A_RS)));
   80394:	3302      	adds	r3, #2
   80396:	881b      	ldrh	r3, [r3, #0]
   80398:	b29b      	uxth	r3, r3
	/* Check HX8347A chipid */
	uint16_t chipid = hx8347a_read_register(HX8347A_HIMAX_ID_CODE); /* Driver Code Read (R67h) */
	if (chipid != HX8347A_DEVICE_CODE) {
   8039a:	2b47      	cmp	r3, #71	; 0x47
   8039c:	f040 80dd 	bne.w	8055a <hx8347a_init+0x1d2>
   803a0:	4607      	mov	r7, r0

/* Define EBI access for HX8347A 16-bit System Interface.*/
#if defined(BOARD_HX8347A_ADDR) && defined (BOARD_HX8347A_RS)
	static inline void LCD_IR(uint16_t lcd_index)
	{
		*((volatile uint16_t *)(BOARD_HX8347A_ADDR)) = lcd_index; /* HX8347A index register address */
   803a2:	f04f 45c4 	mov.w	r5, #1644167168	; 0x62000000
   803a6:	2319      	movs	r3, #25
   803a8:	802b      	strh	r3, [r5, #0]
	}
	static inline void LCD_WD(uint16_t lcd_data)
	{
		*((volatile uint16_t *)((BOARD_HX8347A_ADDR) | (BOARD_HX8347A_RS))) = lcd_data;
   803aa:	4c6d      	ldr	r4, [pc, #436]	; (80560 <hx8347a_init+0x1d8>)
   803ac:	f04f 0a49 	mov.w	sl, #73	; 0x49
   803b0:	f8a4 a000 	strh.w	sl, [r4]

/* Define EBI access for HX8347A 16-bit System Interface.*/
#if defined(BOARD_HX8347A_ADDR) && defined (BOARD_HX8347A_RS)
	static inline void LCD_IR(uint16_t lcd_index)
	{
		*((volatile uint16_t *)(BOARD_HX8347A_ADDR)) = lcd_index; /* HX8347A index register address */
   803b4:	2393      	movs	r3, #147	; 0x93
   803b6:	802b      	strh	r3, [r5, #0]
	}
	static inline void LCD_WD(uint16_t lcd_data)
	{
		*((volatile uint16_t *)((BOARD_HX8347A_ADDR) | (BOARD_HX8347A_RS))) = lcd_data;
   803b8:	230c      	movs	r3, #12
   803ba:	8023      	strh	r3, [r4, #0]

/* Define EBI access for HX8347A 16-bit System Interface.*/
#if defined(BOARD_HX8347A_ADDR) && defined (BOARD_HX8347A_RS)
	static inline void LCD_IR(uint16_t lcd_index)
	{
		*((volatile uint16_t *)(BOARD_HX8347A_ADDR)) = lcd_index; /* HX8347A index register address */
   803bc:	2344      	movs	r3, #68	; 0x44
   803be:	802b      	strh	r3, [r5, #0]
	}
	static inline void LCD_WD(uint16_t lcd_data)
	{
		*((volatile uint16_t *)((BOARD_HX8347A_ADDR) | (BOARD_HX8347A_RS))) = lcd_data;
   803c0:	f04f 034d 	mov.w	r3, #77	; 0x4d
   803c4:	8023      	strh	r3, [r4, #0]

/* Define EBI access for HX8347A 16-bit System Interface.*/
#if defined(BOARD_HX8347A_ADDR) && defined (BOARD_HX8347A_RS)
	static inline void LCD_IR(uint16_t lcd_index)
	{
		*((volatile uint16_t *)(BOARD_HX8347A_ADDR)) = lcd_index; /* HX8347A index register address */
   803c6:	2345      	movs	r3, #69	; 0x45
   803c8:	802b      	strh	r3, [r5, #0]
	}
	static inline void LCD_WD(uint16_t lcd_data)
	{
		*((volatile uint16_t *)((BOARD_HX8347A_ADDR) | (BOARD_HX8347A_RS))) = lcd_data;
   803ca:	f04f 0911 	mov.w	r9, #17
   803ce:	f8a4 9000 	strh.w	r9, [r4]

/* Define EBI access for HX8347A 16-bit System Interface.*/
#if defined(BOARD_HX8347A_ADDR) && defined (BOARD_HX8347A_RS)
	static inline void LCD_IR(uint16_t lcd_index)
	{
		*((volatile uint16_t *)(BOARD_HX8347A_ADDR)) = lcd_index; /* HX8347A index register address */
   803d2:	2320      	movs	r3, #32
   803d4:	802b      	strh	r3, [r5, #0]
	}
	static inline void LCD_WD(uint16_t lcd_data)
	{
		*((volatile uint16_t *)((BOARD_HX8347A_ADDR) | (BOARD_HX8347A_RS))) = lcd_data;
   803d6:	f04f 0b40 	mov.w	fp, #64	; 0x40
   803da:	f8a4 b000 	strh.w	fp, [r4]

/* Define EBI access for HX8347A 16-bit System Interface.*/
#if defined(BOARD_HX8347A_ADDR) && defined (BOARD_HX8347A_RS)
	static inline void LCD_IR(uint16_t lcd_index)
	{
		*((volatile uint16_t *)(BOARD_HX8347A_ADDR)) = lcd_index; /* HX8347A index register address */
   803de:	231d      	movs	r3, #29
   803e0:	802b      	strh	r3, [r5, #0]
	}
	static inline void LCD_WD(uint16_t lcd_data)
	{
		*((volatile uint16_t *)((BOARD_HX8347A_ADDR) | (BOARD_HX8347A_RS))) = lcd_data;
   803e2:	f04f 0307 	mov.w	r3, #7
   803e6:	8023      	strh	r3, [r4, #0]

/* Define EBI access for HX8347A 16-bit System Interface.*/
#if defined(BOARD_HX8347A_ADDR) && defined (BOARD_HX8347A_RS)
	static inline void LCD_IR(uint16_t lcd_index)
	{
		*((volatile uint16_t *)(BOARD_HX8347A_ADDR)) = lcd_index; /* HX8347A index register address */
   803e8:	231e      	movs	r3, #30
   803ea:	802b      	strh	r3, [r5, #0]
	}
	static inline void LCD_WD(uint16_t lcd_data)
	{
		*((volatile uint16_t *)((BOARD_HX8347A_ADDR) | (BOARD_HX8347A_RS))) = lcd_data;
   803ec:	2600      	movs	r6, #0
   803ee:	8026      	strh	r6, [r4, #0]

/* Define EBI access for HX8347A 16-bit System Interface.*/
#if defined(BOARD_HX8347A_ADDR) && defined (BOARD_HX8347A_RS)
	static inline void LCD_IR(uint16_t lcd_index)
	{
		*((volatile uint16_t *)(BOARD_HX8347A_ADDR)) = lcd_index; /* HX8347A index register address */
   803f0:	231f      	movs	r3, #31
   803f2:	802b      	strh	r3, [r5, #0]
	}
	static inline void LCD_WD(uint16_t lcd_data)
	{
		*((volatile uint16_t *)((BOARD_HX8347A_ADDR) | (BOARD_HX8347A_RS))) = lcd_data;
   803f4:	f04f 0804 	mov.w	r8, #4
   803f8:	f8a4 8000 	strh.w	r8, [r4]

/* Define EBI access for HX8347A 16-bit System Interface.*/
#if defined(BOARD_HX8347A_ADDR) && defined (BOARD_HX8347A_RS)
	static inline void LCD_IR(uint16_t lcd_index)
	{
		*((volatile uint16_t *)(BOARD_HX8347A_ADDR)) = lcd_index; /* HX8347A index register address */
   803fc:	231c      	movs	r3, #28
   803fe:	802b      	strh	r3, [r5, #0]
	}
	static inline void LCD_WD(uint16_t lcd_data)
	{
		*((volatile uint16_t *)((BOARD_HX8347A_ADDR) | (BOARD_HX8347A_RS))) = lcd_data;
   80400:	f8a4 8000 	strh.w	r8, [r4]

/* Define EBI access for HX8347A 16-bit System Interface.*/
#if defined(BOARD_HX8347A_ADDR) && defined (BOARD_HX8347A_RS)
	static inline void LCD_IR(uint16_t lcd_index)
	{
		*((volatile uint16_t *)(BOARD_HX8347A_ADDR)) = lcd_index; /* HX8347A index register address */
   80404:	231b      	movs	r3, #27
   80406:	802b      	strh	r3, [r5, #0]
	}
	static inline void LCD_WD(uint16_t lcd_data)
	{
		*((volatile uint16_t *)((BOARD_HX8347A_ADDR) | (BOARD_HX8347A_RS))) = lcd_data;
   80408:	2310      	movs	r3, #16
   8040a:	8023      	strh	r3, [r4, #0]

	/* AP=100 */
	hx8347a_write_register(HX8347A_POWER_CTRL2, HX8347A_POWER_CTRL2_AP(0x04));
	/* GASENB=0, PON=1, DK=0, XDK=0, DDVDH_TRI=0, STB=0 */
	hx8347a_write_register(HX8347A_POWER_CTRL1, HX8347A_POWER_CTRL1_PON);
	hx8347a_delay(50);
   8040c:	2032      	movs	r0, #50	; 0x32
   8040e:	4b55      	ldr	r3, [pc, #340]	; (80564 <hx8347a_init+0x1dc>)
   80410:	4798      	blx	r3

/* Define EBI access for HX8347A 16-bit System Interface.*/
#if defined(BOARD_HX8347A_ADDR) && defined (BOARD_HX8347A_RS)
	static inline void LCD_IR(uint16_t lcd_index)
	{
		*((volatile uint16_t *)(BOARD_HX8347A_ADDR)) = lcd_index; /* HX8347A index register address */
   80412:	2343      	movs	r3, #67	; 0x43
   80414:	802b      	strh	r3, [r5, #0]
	}
	static inline void LCD_WD(uint16_t lcd_data)
	{
		*((volatile uint16_t *)((BOARD_HX8347A_ADDR) | (BOARD_HX8347A_RS))) = lcd_data;
   80416:	2380      	movs	r3, #128	; 0x80
   80418:	8023      	strh	r3, [r4, #0]

	/* Set VCOMG=1 */
	hx8347a_write_register(HX8347A_VCOM_CTRL1, HX8347A_VCOM_CTRL1_VCOMG);
	hx8347a_delay(50);
   8041a:	2032      	movs	r0, #50	; 0x32
   8041c:	4b51      	ldr	r3, [pc, #324]	; (80564 <hx8347a_init+0x1dc>)
   8041e:	4798      	blx	r3

/* Define EBI access for HX8347A 16-bit System Interface.*/
#if defined(BOARD_HX8347A_ADDR) && defined (BOARD_HX8347A_RS)
	static inline void LCD_IR(uint16_t lcd_index)
	{
		*((volatile uint16_t *)(BOARD_HX8347A_ADDR)) = lcd_index; /* HX8347A index register address */
   80420:	2346      	movs	r3, #70	; 0x46
   80422:	802b      	strh	r3, [r5, #0]
	}
	static inline void LCD_WD(uint16_t lcd_data)
	{
		*((volatile uint16_t *)((BOARD_HX8347A_ADDR) | (BOARD_HX8347A_RS))) = lcd_data;
   80424:	2195      	movs	r1, #149	; 0x95
   80426:	8021      	strh	r1, [r4, #0]

/* Define EBI access for HX8347A 16-bit System Interface.*/
#if defined(BOARD_HX8347A_ADDR) && defined (BOARD_HX8347A_RS)
	static inline void LCD_IR(uint16_t lcd_index)
	{
		*((volatile uint16_t *)(BOARD_HX8347A_ADDR)) = lcd_index; /* HX8347A index register address */
   80428:	2247      	movs	r2, #71	; 0x47
   8042a:	802a      	strh	r2, [r5, #0]
	}
	static inline void LCD_WD(uint16_t lcd_data)
	{
		*((volatile uint16_t *)((BOARD_HX8347A_ADDR) | (BOARD_HX8347A_RS))) = lcd_data;
   8042c:	2251      	movs	r2, #81	; 0x51
   8042e:	8022      	strh	r2, [r4, #0]

/* Define EBI access for HX8347A 16-bit System Interface.*/
#if defined(BOARD_HX8347A_ADDR) && defined (BOARD_HX8347A_RS)
	static inline void LCD_IR(uint16_t lcd_index)
	{
		*((volatile uint16_t *)(BOARD_HX8347A_ADDR)) = lcd_index; /* HX8347A index register address */
   80430:	2048      	movs	r0, #72	; 0x48
   80432:	8028      	strh	r0, [r5, #0]
	}
	static inline void LCD_WD(uint16_t lcd_data)
	{
		*((volatile uint16_t *)((BOARD_HX8347A_ADDR) | (BOARD_HX8347A_RS))) = lcd_data;
   80434:	8026      	strh	r6, [r4, #0]

/* Define EBI access for HX8347A 16-bit System Interface.*/
#if defined(BOARD_HX8347A_ADDR) && defined (BOARD_HX8347A_RS)
	static inline void LCD_IR(uint16_t lcd_index)
	{
		*((volatile uint16_t *)(BOARD_HX8347A_ADDR)) = lcd_index; /* HX8347A index register address */
   80436:	f8a5 a000 	strh.w	sl, [r5]
	}
	static inline void LCD_WD(uint16_t lcd_data)
	{
		*((volatile uint16_t *)((BOARD_HX8347A_ADDR) | (BOARD_HX8347A_RS))) = lcd_data;
   8043a:	2036      	movs	r0, #54	; 0x36
   8043c:	8020      	strh	r0, [r4, #0]

/* Define EBI access for HX8347A 16-bit System Interface.*/
#if defined(BOARD_HX8347A_ADDR) && defined (BOARD_HX8347A_RS)
	static inline void LCD_IR(uint16_t lcd_index)
	{
		*((volatile uint16_t *)(BOARD_HX8347A_ADDR)) = lcd_index; /* HX8347A index register address */
   8043e:	204a      	movs	r0, #74	; 0x4a
   80440:	8028      	strh	r0, [r5, #0]
	}
	static inline void LCD_WD(uint16_t lcd_data)
	{
		*((volatile uint16_t *)((BOARD_HX8347A_ADDR) | (BOARD_HX8347A_RS))) = lcd_data;
   80442:	f8a4 9000 	strh.w	r9, [r4]

/* Define EBI access for HX8347A 16-bit System Interface.*/
#if defined(BOARD_HX8347A_ADDR) && defined (BOARD_HX8347A_RS)
	static inline void LCD_IR(uint16_t lcd_index)
	{
		*((volatile uint16_t *)(BOARD_HX8347A_ADDR)) = lcd_index; /* HX8347A index register address */
   80446:	204b      	movs	r0, #75	; 0x4b
   80448:	8028      	strh	r0, [r5, #0]
	}
	static inline void LCD_WD(uint16_t lcd_data)
	{
		*((volatile uint16_t *)((BOARD_HX8347A_ADDR) | (BOARD_HX8347A_RS))) = lcd_data;
   8044a:	2066      	movs	r0, #102	; 0x66
   8044c:	8020      	strh	r0, [r4, #0]

/* Define EBI access for HX8347A 16-bit System Interface.*/
#if defined(BOARD_HX8347A_ADDR) && defined (BOARD_HX8347A_RS)
	static inline void LCD_IR(uint16_t lcd_index)
	{
		*((volatile uint16_t *)(BOARD_HX8347A_ADDR)) = lcd_index; /* HX8347A index register address */
   8044e:	204c      	movs	r0, #76	; 0x4c
   80450:	8028      	strh	r0, [r5, #0]
	}
	static inline void LCD_WD(uint16_t lcd_data)
	{
		*((volatile uint16_t *)((BOARD_HX8347A_ADDR) | (BOARD_HX8347A_RS))) = lcd_data;
   80452:	f04f 0e14 	mov.w	lr, #20
   80456:	f8a4 e000 	strh.w	lr, [r4]

/* Define EBI access for HX8347A 16-bit System Interface.*/
#if defined(BOARD_HX8347A_ADDR) && defined (BOARD_HX8347A_RS)
	static inline void LCD_IR(uint16_t lcd_index)
	{
		*((volatile uint16_t *)(BOARD_HX8347A_ADDR)) = lcd_index; /* HX8347A index register address */
   8045a:	f04f 0e4d 	mov.w	lr, #77	; 0x4d
   8045e:	f8a5 e000 	strh.w	lr, [r5]
	}
	static inline void LCD_WD(uint16_t lcd_data)
	{
		*((volatile uint16_t *)((BOARD_HX8347A_ADDR) | (BOARD_HX8347A_RS))) = lcd_data;
   80462:	f04f 0e77 	mov.w	lr, #119	; 0x77
   80466:	f8a4 e000 	strh.w	lr, [r4]

/* Define EBI access for HX8347A 16-bit System Interface.*/
#if defined(BOARD_HX8347A_ADDR) && defined (BOARD_HX8347A_RS)
	static inline void LCD_IR(uint16_t lcd_index)
	{
		*((volatile uint16_t *)(BOARD_HX8347A_ADDR)) = lcd_index; /* HX8347A index register address */
   8046a:	f04f 0e4e 	mov.w	lr, #78	; 0x4e
   8046e:	f8a5 e000 	strh.w	lr, [r5]
	}
	static inline void LCD_WD(uint16_t lcd_data)
	{
		*((volatile uint16_t *)((BOARD_HX8347A_ADDR) | (BOARD_HX8347A_RS))) = lcd_data;
   80472:	f04f 0e13 	mov.w	lr, #19
   80476:	f8a4 e000 	strh.w	lr, [r4]

/* Define EBI access for HX8347A 16-bit System Interface.*/
#if defined(BOARD_HX8347A_ADDR) && defined (BOARD_HX8347A_RS)
	static inline void LCD_IR(uint16_t lcd_index)
	{
		*((volatile uint16_t *)(BOARD_HX8347A_ADDR)) = lcd_index; /* HX8347A index register address */
   8047a:	f04f 0e4f 	mov.w	lr, #79	; 0x4f
   8047e:	f8a5 e000 	strh.w	lr, [r5]
	}
	static inline void LCD_WD(uint16_t lcd_data)
	{
		*((volatile uint16_t *)((BOARD_HX8347A_ADDR) | (BOARD_HX8347A_RS))) = lcd_data;
   80482:	8020      	strh	r0, [r4, #0]

/* Define EBI access for HX8347A 16-bit System Interface.*/
#if defined(BOARD_HX8347A_ADDR) && defined (BOARD_HX8347A_RS)
	static inline void LCD_IR(uint16_t lcd_index)
	{
		*((volatile uint16_t *)(BOARD_HX8347A_ADDR)) = lcd_index; /* HX8347A index register address */
   80484:	2050      	movs	r0, #80	; 0x50
   80486:	8028      	strh	r0, [r5, #0]
	}
	static inline void LCD_WD(uint16_t lcd_data)
	{
		*((volatile uint16_t *)((BOARD_HX8347A_ADDR) | (BOARD_HX8347A_RS))) = lcd_data;
   80488:	8023      	strh	r3, [r4, #0]

/* Define EBI access for HX8347A 16-bit System Interface.*/
#if defined(BOARD_HX8347A_ADDR) && defined (BOARD_HX8347A_RS)
	static inline void LCD_IR(uint16_t lcd_index)
	{
		*((volatile uint16_t *)(BOARD_HX8347A_ADDR)) = lcd_index; /* HX8347A index register address */
   8048a:	802a      	strh	r2, [r5, #0]
	}
	static inline void LCD_WD(uint16_t lcd_data)
	{
		*((volatile uint16_t *)((BOARD_HX8347A_ADDR) | (BOARD_HX8347A_RS))) = lcd_data;
   8048c:	8023      	strh	r3, [r4, #0]

/* Define EBI access for HX8347A 16-bit System Interface.*/
#if defined(BOARD_HX8347A_ADDR) && defined (BOARD_HX8347A_RS)
	static inline void LCD_IR(uint16_t lcd_index)
	{
		*((volatile uint16_t *)(BOARD_HX8347A_ADDR)) = lcd_index; /* HX8347A index register address */
   8048e:	2302      	movs	r3, #2
   80490:	802b      	strh	r3, [r5, #0]
	}
	static inline void LCD_WD(uint16_t lcd_data)
	{
		*((volatile uint16_t *)((BOARD_HX8347A_ADDR) | (BOARD_HX8347A_RS))) = lcd_data;
   80492:	8026      	strh	r6, [r4, #0]

/* Define EBI access for HX8347A 16-bit System Interface.*/
#if defined(BOARD_HX8347A_ADDR) && defined (BOARD_HX8347A_RS)
	static inline void LCD_IR(uint16_t lcd_index)
	{
		*((volatile uint16_t *)(BOARD_HX8347A_ADDR)) = lcd_index; /* HX8347A index register address */
   80494:	2303      	movs	r3, #3
   80496:	802b      	strh	r3, [r5, #0]
	}
	static inline void LCD_WD(uint16_t lcd_data)
	{
		*((volatile uint16_t *)((BOARD_HX8347A_ADDR) | (BOARD_HX8347A_RS))) = lcd_data;
   80498:	8026      	strh	r6, [r4, #0]

/* Define EBI access for HX8347A 16-bit System Interface.*/
#if defined(BOARD_HX8347A_ADDR) && defined (BOARD_HX8347A_RS)
	static inline void LCD_IR(uint16_t lcd_index)
	{
		*((volatile uint16_t *)(BOARD_HX8347A_ADDR)) = lcd_index; /* HX8347A index register address */
   8049a:	f8a5 8000 	strh.w	r8, [r5]
	}
	static inline void LCD_WD(uint16_t lcd_data)
	{
		*((volatile uint16_t *)((BOARD_HX8347A_ADDR) | (BOARD_HX8347A_RS))) = lcd_data;
   8049e:	8026      	strh	r6, [r4, #0]

/* Define EBI access for HX8347A 16-bit System Interface.*/
#if defined(BOARD_HX8347A_ADDR) && defined (BOARD_HX8347A_RS)
	static inline void LCD_IR(uint16_t lcd_index)
	{
		*((volatile uint16_t *)(BOARD_HX8347A_ADDR)) = lcd_index; /* HX8347A index register address */
   804a0:	2305      	movs	r3, #5
   804a2:	802b      	strh	r3, [r5, #0]
	}
	static inline void LCD_WD(uint16_t lcd_data)
	{
		*((volatile uint16_t *)((BOARD_HX8347A_ADDR) | (BOARD_HX8347A_RS))) = lcd_data;
   804a4:	23ef      	movs	r3, #239	; 0xef
   804a6:	8023      	strh	r3, [r4, #0]

/* Define EBI access for HX8347A 16-bit System Interface.*/
#if defined(BOARD_HX8347A_ADDR) && defined (BOARD_HX8347A_RS)
	static inline void LCD_IR(uint16_t lcd_index)
	{
		*((volatile uint16_t *)(BOARD_HX8347A_ADDR)) = lcd_index; /* HX8347A index register address */
   804a8:	2306      	movs	r3, #6
   804aa:	802b      	strh	r3, [r5, #0]
	}
	static inline void LCD_WD(uint16_t lcd_data)
	{
		*((volatile uint16_t *)((BOARD_HX8347A_ADDR) | (BOARD_HX8347A_RS))) = lcd_data;
   804ac:	8026      	strh	r6, [r4, #0]

/* Define EBI access for HX8347A 16-bit System Interface.*/
#if defined(BOARD_HX8347A_ADDR) && defined (BOARD_HX8347A_RS)
	static inline void LCD_IR(uint16_t lcd_index)
	{
		*((volatile uint16_t *)(BOARD_HX8347A_ADDR)) = lcd_index; /* HX8347A index register address */
   804ae:	f04f 0207 	mov.w	r2, #7
   804b2:	802a      	strh	r2, [r5, #0]
	}
	static inline void LCD_WD(uint16_t lcd_data)
	{
		*((volatile uint16_t *)((BOARD_HX8347A_ADDR) | (BOARD_HX8347A_RS))) = lcd_data;
   804b4:	8026      	strh	r6, [r4, #0]

/* Define EBI access for HX8347A 16-bit System Interface.*/
#if defined(BOARD_HX8347A_ADDR) && defined (BOARD_HX8347A_RS)
	static inline void LCD_IR(uint16_t lcd_index)
	{
		*((volatile uint16_t *)(BOARD_HX8347A_ADDR)) = lcd_index; /* HX8347A index register address */
   804b6:	2208      	movs	r2, #8
   804b8:	802a      	strh	r2, [r5, #0]
	}
	static inline void LCD_WD(uint16_t lcd_data)
	{
		*((volatile uint16_t *)((BOARD_HX8347A_ADDR) | (BOARD_HX8347A_RS))) = lcd_data;
   804ba:	2201      	movs	r2, #1
   804bc:	8022      	strh	r2, [r4, #0]

/* Define EBI access for HX8347A 16-bit System Interface.*/
#if defined(BOARD_HX8347A_ADDR) && defined (BOARD_HX8347A_RS)
	static inline void LCD_IR(uint16_t lcd_index)
	{
		*((volatile uint16_t *)(BOARD_HX8347A_ADDR)) = lcd_index; /* HX8347A index register address */
   804be:	2009      	movs	r0, #9
   804c0:	8028      	strh	r0, [r5, #0]
	}
	static inline void LCD_WD(uint16_t lcd_data)
	{
		*((volatile uint16_t *)((BOARD_HX8347A_ADDR) | (BOARD_HX8347A_RS))) = lcd_data;
   804c2:	203f      	movs	r0, #63	; 0x3f
   804c4:	8020      	strh	r0, [r4, #0]

/* Define EBI access for HX8347A 16-bit System Interface.*/
#if defined(BOARD_HX8347A_ADDR) && defined (BOARD_HX8347A_RS)
	static inline void LCD_IR(uint16_t lcd_index)
	{
		*((volatile uint16_t *)(BOARD_HX8347A_ADDR)) = lcd_index; /* HX8347A index register address */
   804c6:	802a      	strh	r2, [r5, #0]
	}
	static inline void LCD_WD(uint16_t lcd_data)
	{
		*((volatile uint16_t *)((BOARD_HX8347A_ADDR) | (BOARD_HX8347A_RS))) = lcd_data;
   804c8:	8023      	strh	r3, [r4, #0]

/* Define EBI access for HX8347A 16-bit System Interface.*/
#if defined(BOARD_HX8347A_ADDR) && defined (BOARD_HX8347A_RS)
	static inline void LCD_IR(uint16_t lcd_index)
	{
		*((volatile uint16_t *)(BOARD_HX8347A_ADDR)) = lcd_index; /* HX8347A index register address */
   804ca:	2016      	movs	r0, #22
   804cc:	8028      	strh	r0, [r5, #0]
	}
	static inline void LCD_WD(uint16_t lcd_data)
	{
		*((volatile uint16_t *)((BOARD_HX8347A_ADDR) | (BOARD_HX8347A_RS))) = lcd_data;
   804ce:	20c8      	movs	r0, #200	; 0xc8
   804d0:	8020      	strh	r0, [r4, #0]

/* Define EBI access for HX8347A 16-bit System Interface.*/
#if defined(BOARD_HX8347A_ADDR) && defined (BOARD_HX8347A_RS)
	static inline void LCD_IR(uint16_t lcd_index)
	{
		*((volatile uint16_t *)(BOARD_HX8347A_ADDR)) = lcd_index; /* HX8347A index register address */
   804d2:	2023      	movs	r0, #35	; 0x23
   804d4:	8028      	strh	r0, [r5, #0]
	}
	static inline void LCD_WD(uint16_t lcd_data)
	{
		*((volatile uint16_t *)((BOARD_HX8347A_ADDR) | (BOARD_HX8347A_RS))) = lcd_data;
   804d6:	8021      	strh	r1, [r4, #0]

/* Define EBI access for HX8347A 16-bit System Interface.*/
#if defined(BOARD_HX8347A_ADDR) && defined (BOARD_HX8347A_RS)
	static inline void LCD_IR(uint16_t lcd_index)
	{
		*((volatile uint16_t *)(BOARD_HX8347A_ADDR)) = lcd_index; /* HX8347A index register address */
   804d8:	2024      	movs	r0, #36	; 0x24
   804da:	8028      	strh	r0, [r5, #0]
	}
	static inline void LCD_WD(uint16_t lcd_data)
	{
		*((volatile uint16_t *)((BOARD_HX8347A_ADDR) | (BOARD_HX8347A_RS))) = lcd_data;
   804dc:	8021      	strh	r1, [r4, #0]

/* Define EBI access for HX8347A 16-bit System Interface.*/
#if defined(BOARD_HX8347A_ADDR) && defined (BOARD_HX8347A_RS)
	static inline void LCD_IR(uint16_t lcd_index)
	{
		*((volatile uint16_t *)(BOARD_HX8347A_ADDR)) = lcd_index; /* HX8347A index register address */
   804de:	2125      	movs	r1, #37	; 0x25
   804e0:	8029      	strh	r1, [r5, #0]
	}
	static inline void LCD_WD(uint16_t lcd_data)
	{
		*((volatile uint16_t *)((BOARD_HX8347A_ADDR) | (BOARD_HX8347A_RS))) = lcd_data;
   804e2:	21ff      	movs	r1, #255	; 0xff
   804e4:	8021      	strh	r1, [r4, #0]

/* Define EBI access for HX8347A 16-bit System Interface.*/
#if defined(BOARD_HX8347A_ADDR) && defined (BOARD_HX8347A_RS)
	static inline void LCD_IR(uint16_t lcd_index)
	{
		*((volatile uint16_t *)(BOARD_HX8347A_ADDR)) = lcd_index; /* HX8347A index register address */
   804e6:	2127      	movs	r1, #39	; 0x27
   804e8:	8029      	strh	r1, [r5, #0]
	}
	static inline void LCD_WD(uint16_t lcd_data)
	{
		*((volatile uint16_t *)((BOARD_HX8347A_ADDR) | (BOARD_HX8347A_RS))) = lcd_data;
   804ea:	8023      	strh	r3, [r4, #0]

/* Define EBI access for HX8347A 16-bit System Interface.*/
#if defined(BOARD_HX8347A_ADDR) && defined (BOARD_HX8347A_RS)
	static inline void LCD_IR(uint16_t lcd_index)
	{
		*((volatile uint16_t *)(BOARD_HX8347A_ADDR)) = lcd_index; /* HX8347A index register address */
   804ec:	2128      	movs	r1, #40	; 0x28
   804ee:	8029      	strh	r1, [r5, #0]
	}
	static inline void LCD_WD(uint16_t lcd_data)
	{
		*((volatile uint16_t *)((BOARD_HX8347A_ADDR) | (BOARD_HX8347A_RS))) = lcd_data;
   804f0:	8023      	strh	r3, [r4, #0]

/* Define EBI access for HX8347A 16-bit System Interface.*/
#if defined(BOARD_HX8347A_ADDR) && defined (BOARD_HX8347A_RS)
	static inline void LCD_IR(uint16_t lcd_index)
	{
		*((volatile uint16_t *)(BOARD_HX8347A_ADDR)) = lcd_index; /* HX8347A index register address */
   804f2:	2129      	movs	r1, #41	; 0x29
   804f4:	8029      	strh	r1, [r5, #0]
	}
	static inline void LCD_WD(uint16_t lcd_data)
	{
		*((volatile uint16_t *)((BOARD_HX8347A_ADDR) | (BOARD_HX8347A_RS))) = lcd_data;
   804f6:	8023      	strh	r3, [r4, #0]

/* Define EBI access for HX8347A 16-bit System Interface.*/
#if defined(BOARD_HX8347A_ADDR) && defined (BOARD_HX8347A_RS)
	static inline void LCD_IR(uint16_t lcd_index)
	{
		*((volatile uint16_t *)(BOARD_HX8347A_ADDR)) = lcd_index; /* HX8347A index register address */
   804f8:	212a      	movs	r1, #42	; 0x2a
   804fa:	8029      	strh	r1, [r5, #0]
	}
	static inline void LCD_WD(uint16_t lcd_data)
	{
		*((volatile uint16_t *)((BOARD_HX8347A_ADDR) | (BOARD_HX8347A_RS))) = lcd_data;
   804fc:	8023      	strh	r3, [r4, #0]

/* Define EBI access for HX8347A 16-bit System Interface.*/
#if defined(BOARD_HX8347A_ADDR) && defined (BOARD_HX8347A_RS)
	static inline void LCD_IR(uint16_t lcd_index)
	{
		*((volatile uint16_t *)(BOARD_HX8347A_ADDR)) = lcd_index; /* HX8347A index register address */
   804fe:	212c      	movs	r1, #44	; 0x2c
   80500:	8029      	strh	r1, [r5, #0]
	}
	static inline void LCD_WD(uint16_t lcd_data)
	{
		*((volatile uint16_t *)((BOARD_HX8347A_ADDR) | (BOARD_HX8347A_RS))) = lcd_data;
   80502:	8023      	strh	r3, [r4, #0]

/* Define EBI access for HX8347A 16-bit System Interface.*/
#if defined(BOARD_HX8347A_ADDR) && defined (BOARD_HX8347A_RS)
	static inline void LCD_IR(uint16_t lcd_index)
	{
		*((volatile uint16_t *)(BOARD_HX8347A_ADDR)) = lcd_index; /* HX8347A index register address */
   80504:	212d      	movs	r1, #45	; 0x2d
   80506:	8029      	strh	r1, [r5, #0]
	}
	static inline void LCD_WD(uint16_t lcd_data)
	{
		*((volatile uint16_t *)((BOARD_HX8347A_ADDR) | (BOARD_HX8347A_RS))) = lcd_data;
   80508:	8023      	strh	r3, [r4, #0]

/* Define EBI access for HX8347A 16-bit System Interface.*/
#if defined(BOARD_HX8347A_ADDR) && defined (BOARD_HX8347A_RS)
	static inline void LCD_IR(uint16_t lcd_index)
	{
		*((volatile uint16_t *)(BOARD_HX8347A_ADDR)) = lcd_index; /* HX8347A index register address */
   8050a:	233a      	movs	r3, #58	; 0x3a
   8050c:	802b      	strh	r3, [r5, #0]
	}
	static inline void LCD_WD(uint16_t lcd_data)
	{
		*((volatile uint16_t *)((BOARD_HX8347A_ADDR) | (BOARD_HX8347A_RS))) = lcd_data;
   8050e:	8022      	strh	r2, [r4, #0]

/* Define EBI access for HX8347A 16-bit System Interface.*/
#if defined(BOARD_HX8347A_ADDR) && defined (BOARD_HX8347A_RS)
	static inline void LCD_IR(uint16_t lcd_index)
	{
		*((volatile uint16_t *)(BOARD_HX8347A_ADDR)) = lcd_index; /* HX8347A index register address */
   80510:	233b      	movs	r3, #59	; 0x3b
   80512:	802b      	strh	r3, [r5, #0]
	}
	static inline void LCD_WD(uint16_t lcd_data)
	{
		*((volatile uint16_t *)((BOARD_HX8347A_ADDR) | (BOARD_HX8347A_RS))) = lcd_data;
   80514:	8022      	strh	r2, [r4, #0]

/* Define EBI access for HX8347A 16-bit System Interface.*/
#if defined(BOARD_HX8347A_ADDR) && defined (BOARD_HX8347A_RS)
	static inline void LCD_IR(uint16_t lcd_index)
	{
		*((volatile uint16_t *)(BOARD_HX8347A_ADDR)) = lcd_index; /* HX8347A index register address */
   80516:	233c      	movs	r3, #60	; 0x3c
   80518:	802b      	strh	r3, [r5, #0]
	}
	static inline void LCD_WD(uint16_t lcd_data)
	{
		*((volatile uint16_t *)((BOARD_HX8347A_ADDR) | (BOARD_HX8347A_RS))) = lcd_data;
   8051a:	23f0      	movs	r3, #240	; 0xf0
   8051c:	8023      	strh	r3, [r4, #0]

/* Define EBI access for HX8347A 16-bit System Interface.*/
#if defined(BOARD_HX8347A_ADDR) && defined (BOARD_HX8347A_RS)
	static inline void LCD_IR(uint16_t lcd_index)
	{
		*((volatile uint16_t *)(BOARD_HX8347A_ADDR)) = lcd_index; /* HX8347A index register address */
   8051e:	223d      	movs	r2, #61	; 0x3d
   80520:	802a      	strh	r2, [r5, #0]
	}
	static inline void LCD_WD(uint16_t lcd_data)
	{
		*((volatile uint16_t *)((BOARD_HX8347A_ADDR) | (BOARD_HX8347A_RS))) = lcd_data;
   80522:	8026      	strh	r6, [r4, #0]

/* Define EBI access for HX8347A 16-bit System Interface.*/
#if defined(BOARD_HX8347A_ADDR) && defined (BOARD_HX8347A_RS)
	static inline void LCD_IR(uint16_t lcd_index)
	{
		*((volatile uint16_t *)(BOARD_HX8347A_ADDR)) = lcd_index; /* HX8347A index register address */
   80524:	223e      	movs	r2, #62	; 0x3e
   80526:	802a      	strh	r2, [r5, #0]
	}
	static inline void LCD_WD(uint16_t lcd_data)
	{
		*((volatile uint16_t *)((BOARD_HX8347A_ADDR) | (BOARD_HX8347A_RS))) = lcd_data;
   80528:	2238      	movs	r2, #56	; 0x38
   8052a:	8022      	strh	r2, [r4, #0]

/* Define EBI access for HX8347A 16-bit System Interface.*/
#if defined(BOARD_HX8347A_ADDR) && defined (BOARD_HX8347A_RS)
	static inline void LCD_IR(uint16_t lcd_index)
	{
		*((volatile uint16_t *)(BOARD_HX8347A_ADDR)) = lcd_index; /* HX8347A index register address */
   8052c:	f8a5 b000 	strh.w	fp, [r5]
	}
	static inline void LCD_WD(uint16_t lcd_data)
	{
		*((volatile uint16_t *)((BOARD_HX8347A_ADDR) | (BOARD_HX8347A_RS))) = lcd_data;
   80530:	220f      	movs	r2, #15
   80532:	8022      	strh	r2, [r4, #0]

/* Define EBI access for HX8347A 16-bit System Interface.*/
#if defined(BOARD_HX8347A_ADDR) && defined (BOARD_HX8347A_RS)
	static inline void LCD_IR(uint16_t lcd_index)
	{
		*((volatile uint16_t *)(BOARD_HX8347A_ADDR)) = lcd_index; /* HX8347A index register address */
   80534:	2241      	movs	r2, #65	; 0x41
   80536:	802a      	strh	r2, [r5, #0]
	}
	static inline void LCD_WD(uint16_t lcd_data)
	{
		*((volatile uint16_t *)((BOARD_HX8347A_ADDR) | (BOARD_HX8347A_RS))) = lcd_data;
   80538:	8023      	strh	r3, [r4, #0]
			HX8347A_CYCLE_CTRL6_GDON(0x0F));
	/* GDOF=F0h */
	hx8347a_write_register(HX8347A_CYCLE_CTRL7,
			HX8347A_CYCLE_CTRL7_GDOF(0xF0));

	hx8347a_set_window(0, 0, p_opt->ul_width, p_opt->ul_height);
   8053a:	687b      	ldr	r3, [r7, #4]
   8053c:	683a      	ldr	r2, [r7, #0]
   8053e:	4631      	mov	r1, r6
   80540:	4630      	mov	r0, r6
   80542:	4c09      	ldr	r4, [pc, #36]	; (80568 <hx8347a_init+0x1e0>)
   80544:	47a0      	blx	r4
	hx8347a_set_foreground_color(p_opt->foreground_color);
   80546:	8938      	ldrh	r0, [r7, #8]
   80548:	4b08      	ldr	r3, [pc, #32]	; (8056c <hx8347a_init+0x1e4>)
   8054a:	4798      	blx	r3
	hx8347a_set_cursor_position(0, 0);
   8054c:	4631      	mov	r1, r6
   8054e:	4630      	mov	r0, r6
   80550:	4b07      	ldr	r3, [pc, #28]	; (80570 <hx8347a_init+0x1e8>)
   80552:	4798      	blx	r3
	return 0;
   80554:	4630      	mov	r0, r6
   80556:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
uint32_t hx8347a_init(struct hx8347a_opt_t *p_opt)
{
	/* Check HX8347A chipid */
	uint16_t chipid = hx8347a_read_register(HX8347A_HIMAX_ID_CODE); /* Driver Code Read (R67h) */
	if (chipid != HX8347A_DEVICE_CODE) {
		return 1;
   8055a:	2001      	movs	r0, #1

	hx8347a_set_window(0, 0, p_opt->ul_width, p_opt->ul_height);
	hx8347a_set_foreground_color(p_opt->foreground_color);
	hx8347a_set_cursor_position(0, 0);
	return 0;
}
   8055c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80560:	62000002 	.word	0x62000002
   80564:	00080195 	.word	0x00080195
   80568:	000802d1 	.word	0x000802d1
   8056c:	000802b9 	.word	0x000802b9
   80570:	00080359 	.word	0x00080359

00080574 <hx8347a_draw_pixel>:
 *
 * \return 0 if succeeds, otherwise fails.
 */
uint32_t hx8347a_draw_pixel(uint32_t ul_x, uint32_t ul_y)
{
	if ((ul_x >= HX8347A_LCD_WIDTH) || (ul_y >= HX8347A_LCD_HEIGHT)) {
   80574:	28ef      	cmp	r0, #239	; 0xef
   80576:	d811      	bhi.n	8059c <hx8347a_draw_pixel+0x28>
   80578:	f5b1 7fa0 	cmp.w	r1, #320	; 0x140
   8057c:	d210      	bcs.n	805a0 <hx8347a_draw_pixel+0x2c>
 * \param ul_y Y coordinate of pixel.
 *
 * \return 0 if succeeds, otherwise fails.
 */
uint32_t hx8347a_draw_pixel(uint32_t ul_x, uint32_t ul_y)
{
   8057e:	b508      	push	{r3, lr}
	if ((ul_x >= HX8347A_LCD_WIDTH) || (ul_y >= HX8347A_LCD_HEIGHT)) {
		return 1;
	}

	/* Set cursor */
	hx8347a_set_cursor_position(ul_x, ul_y);
   80580:	b289      	uxth	r1, r1
   80582:	b280      	uxth	r0, r0
   80584:	4b07      	ldr	r3, [pc, #28]	; (805a4 <hx8347a_draw_pixel+0x30>)
   80586:	4798      	blx	r3

/* Define EBI access for HX8347A 16-bit System Interface.*/
#if defined(BOARD_HX8347A_ADDR) && defined (BOARD_HX8347A_RS)
	static inline void LCD_IR(uint16_t lcd_index)
	{
		*((volatile uint16_t *)(BOARD_HX8347A_ADDR)) = lcd_index; /* HX8347A index register address */
   80588:	2222      	movs	r2, #34	; 0x22
   8058a:	f04f 43c4 	mov.w	r3, #1644167168	; 0x62000000
   8058e:	801a      	strh	r2, [r3, #0]

	/* Prepare to write in GRAM */
	hx8347a_write_ram_prepare();
	hx8347a_write_ram(*g_ul_pixel_cache);
   80590:	4b05      	ldr	r3, [pc, #20]	; (805a8 <hx8347a_draw_pixel+0x34>)
   80592:	881a      	ldrh	r2, [r3, #0]
	}
	static inline void LCD_WD(uint16_t lcd_data)
	{
		*((volatile uint16_t *)((BOARD_HX8347A_ADDR) | (BOARD_HX8347A_RS))) = lcd_data;
   80594:	4b05      	ldr	r3, [pc, #20]	; (805ac <hx8347a_draw_pixel+0x38>)
   80596:	801a      	strh	r2, [r3, #0]
	return 0;
   80598:	2000      	movs	r0, #0
   8059a:	bd08      	pop	{r3, pc}
 * \return 0 if succeeds, otherwise fails.
 */
uint32_t hx8347a_draw_pixel(uint32_t ul_x, uint32_t ul_y)
{
	if ((ul_x >= HX8347A_LCD_WIDTH) || (ul_y >= HX8347A_LCD_HEIGHT)) {
		return 1;
   8059c:	2001      	movs	r0, #1
   8059e:	4770      	bx	lr
   805a0:	2001      	movs	r0, #1
   805a2:	4770      	bx	lr
   805a4:	00080359 	.word	0x00080359
   805a8:	20000564 	.word	0x20000564
   805ac:	62000002 	.word	0x62000002

000805b0 <hx8347a_draw_filled_rectangle>:
 * \param ul_x2 X coordinate of lower-right corner on LCD.
 * \param ul_y2 Y coordinate of lower-right corner on LCD.
 */
void hx8347a_draw_filled_rectangle(uint32_t ul_x1, uint32_t ul_y1,
		uint32_t ul_x2, uint32_t ul_y2)
{
   805b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   805b4:	b084      	sub	sp, #16
   805b6:	9003      	str	r0, [sp, #12]
   805b8:	9102      	str	r1, [sp, #8]
   805ba:	9201      	str	r2, [sp, #4]
   805bc:	aa04      	add	r2, sp, #16
   805be:	f842 3d10 	str.w	r3, [r2, #-16]!
	uint32_t size, blocks;

	/* Swap coordinates if necessary */
	hx8347a_check_box_coordinates(&ul_x1, &ul_y1, &ul_x2, &ul_y2);
   805c2:	4613      	mov	r3, r2
   805c4:	aa01      	add	r2, sp, #4
   805c6:	a902      	add	r1, sp, #8
   805c8:	a803      	add	r0, sp, #12
   805ca:	4c21      	ldr	r4, [pc, #132]	; (80650 <hx8347a_draw_filled_rectangle+0xa0>)
   805cc:	47a0      	blx	r4

	/* Determine the refresh window area */
	hx8347a_set_window(ul_x1, ul_y1, (ul_x2 - ul_x1 + 1), (ul_y2 - ul_y1 + 1));
   805ce:	9803      	ldr	r0, [sp, #12]
   805d0:	9902      	ldr	r1, [sp, #8]
   805d2:	9b00      	ldr	r3, [sp, #0]
   805d4:	3301      	adds	r3, #1
   805d6:	9a01      	ldr	r2, [sp, #4]
   805d8:	3201      	adds	r2, #1
   805da:	1a5b      	subs	r3, r3, r1
   805dc:	1a12      	subs	r2, r2, r0
   805de:	4c1d      	ldr	r4, [pc, #116]	; (80654 <hx8347a_draw_filled_rectangle+0xa4>)
   805e0:	47a0      	blx	r4

	/* Set cursor */
	hx8347a_set_cursor_position(ul_x1, ul_y1);
   805e2:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   805e6:	f8bd 000c 	ldrh.w	r0, [sp, #12]
   805ea:	4b1b      	ldr	r3, [pc, #108]	; (80658 <hx8347a_draw_filled_rectangle+0xa8>)
   805ec:	4798      	blx	r3

/* Define EBI access for HX8347A 16-bit System Interface.*/
#if defined(BOARD_HX8347A_ADDR) && defined (BOARD_HX8347A_RS)
	static inline void LCD_IR(uint16_t lcd_index)
	{
		*((volatile uint16_t *)(BOARD_HX8347A_ADDR)) = lcd_index; /* HX8347A index register address */
   805ee:	2222      	movs	r2, #34	; 0x22
   805f0:	f04f 43c4 	mov.w	r3, #1644167168	; 0x62000000
   805f4:	801a      	strh	r2, [r3, #0]

	/* Prepare to write in GRAM */
	hx8347a_write_ram_prepare();

	size = (ul_x2 - ul_x1 + 1) * (ul_y2 - ul_y1 + 1);
   805f6:	9a03      	ldr	r2, [sp, #12]
   805f8:	9b01      	ldr	r3, [sp, #4]
   805fa:	1a9a      	subs	r2, r3, r2
   805fc:	9b00      	ldr	r3, [sp, #0]
   805fe:	f103 0801 	add.w	r8, r3, #1
   80602:	9b02      	ldr	r3, [sp, #8]
   80604:	ebc3 0808 	rsb	r8, r3, r8
   80608:	fb02 8808 	mla	r8, r2, r8, r8
	/* Send pixels blocks => one SPI IT / block */
	blocks = size / LCD_DATA_CACHE_SIZE;
   8060c:	4c13      	ldr	r4, [pc, #76]	; (8065c <hx8347a_draw_filled_rectangle+0xac>)
   8060e:	fba4 3408 	umull	r3, r4, r4, r8
	while (blocks--) {
   80612:	09e4      	lsrs	r4, r4, #7
   80614:	d007      	beq.n	80626 <hx8347a_draw_filled_rectangle+0x76>
		hx8347a_write_ram_buffer(g_ul_pixel_cache, LCD_DATA_CACHE_SIZE);
   80616:	4f12      	ldr	r7, [pc, #72]	; (80660 <hx8347a_draw_filled_rectangle+0xb0>)
   80618:	26f0      	movs	r6, #240	; 0xf0
   8061a:	4d12      	ldr	r5, [pc, #72]	; (80664 <hx8347a_draw_filled_rectangle+0xb4>)
   8061c:	4631      	mov	r1, r6
   8061e:	4638      	mov	r0, r7
   80620:	47a8      	blx	r5
	hx8347a_write_ram_prepare();

	size = (ul_x2 - ul_x1 + 1) * (ul_y2 - ul_y1 + 1);
	/* Send pixels blocks => one SPI IT / block */
	blocks = size / LCD_DATA_CACHE_SIZE;
	while (blocks--) {
   80622:	3c01      	subs	r4, #1
   80624:	d1fa      	bne.n	8061c <hx8347a_draw_filled_rectangle+0x6c>
		hx8347a_write_ram_buffer(g_ul_pixel_cache, LCD_DATA_CACHE_SIZE);
	}
	/* Send remaining pixels */
	hx8347a_write_ram_buffer(g_ul_pixel_cache, size % LCD_DATA_CACHE_SIZE);
   80626:	490d      	ldr	r1, [pc, #52]	; (8065c <hx8347a_draw_filled_rectangle+0xac>)
   80628:	fba1 3108 	umull	r3, r1, r1, r8
   8062c:	09c9      	lsrs	r1, r1, #7
   8062e:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
   80632:	eba8 1101 	sub.w	r1, r8, r1, lsl #4
   80636:	480a      	ldr	r0, [pc, #40]	; (80660 <hx8347a_draw_filled_rectangle+0xb0>)
   80638:	4b0a      	ldr	r3, [pc, #40]	; (80664 <hx8347a_draw_filled_rectangle+0xb4>)
   8063a:	4798      	blx	r3

	/* Reset the refresh window area */
	hx8347a_set_window(0, 0, HX8347A_LCD_WIDTH, HX8347A_LCD_HEIGHT);
   8063c:	f44f 73a0 	mov.w	r3, #320	; 0x140
   80640:	22f0      	movs	r2, #240	; 0xf0
   80642:	2100      	movs	r1, #0
   80644:	4608      	mov	r0, r1
   80646:	4c03      	ldr	r4, [pc, #12]	; (80654 <hx8347a_draw_filled_rectangle+0xa4>)
   80648:	47a0      	blx	r4
}
   8064a:	b004      	add	sp, #16
   8064c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80650:	000801cd 	.word	0x000801cd
   80654:	000802d1 	.word	0x000802d1
   80658:	00080359 	.word	0x00080359
   8065c:	88888889 	.word	0x88888889
   80660:	20000564 	.word	0x20000564
   80664:	0008021d 	.word	0x0008021d

00080668 <hx8347a_draw_line>:
 * \param ul_x2 X coordinate of line end.
 * \param ul_y2 Y coordinate of line end.
 */
void hx8347a_draw_line(uint32_t ul_x1, uint32_t ul_y1,
		uint32_t ul_x2, uint32_t ul_y2)
{
   80668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8066c:	b083      	sub	sp, #12
   8066e:	4606      	mov	r6, r0
   80670:	4688      	mov	r8, r1
	if ((ul_y1 == ul_y2) || (ul_x1 == ul_x2)) {
   80672:	4299      	cmp	r1, r3
   80674:	d001      	beq.n	8067a <hx8347a_draw_line+0x12>
   80676:	4290      	cmp	r0, r2
   80678:	d104      	bne.n	80684 <hx8347a_draw_line+0x1c>
		hx8347a_draw_filled_rectangle(ul_x1, ul_y1, ul_x2, ul_y2);
   8067a:	4641      	mov	r1, r8
   8067c:	4630      	mov	r0, r6
   8067e:	4c2c      	ldr	r4, [pc, #176]	; (80730 <hx8347a_draw_line+0xc8>)
   80680:	47a0      	blx	r4
   80682:	e051      	b.n	80728 <hx8347a_draw_line+0xc0>
	int dx, dy;
	int i;
	int xinc, yinc, cumul;
	int x, y;

	x = ul_x1;
   80684:	4681      	mov	r9, r0
	y = ul_y1;
   80686:	460f      	mov	r7, r1
	dx = ul_x2 - ul_x1;
   80688:	1a12      	subs	r2, r2, r0
	dy = ul_y2 - ul_y1;
   8068a:	1a5b      	subs	r3, r3, r1
	xinc = (dx > 0) ? 1 : -1;
   8068c:	2a00      	cmp	r2, #0
   8068e:	bfcc      	ite	gt
   80690:	2101      	movgt	r1, #1
   80692:	f04f 31ff 	movle.w	r1, #4294967295
   80696:	9100      	str	r1, [sp, #0]
	yinc = (dy > 0) ? 1 : -1;
   80698:	2b00      	cmp	r3, #0
   8069a:	bfcc      	ite	gt
   8069c:	2001      	movgt	r0, #1
   8069e:	f04f 30ff 	movle.w	r0, #4294967295
   806a2:	9001      	str	r0, [sp, #4]
	dx = abs(ul_x2 - ul_x1);
   806a4:	ea82 75e2 	eor.w	r5, r2, r2, asr #31
   806a8:	eba5 75e2 	sub.w	r5, r5, r2, asr #31
	dy = abs(ul_y2 - ul_y1);
   806ac:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
   806b0:	eba4 74e3 	sub.w	r4, r4, r3, asr #31

	hx8347a_draw_pixel(x, y);
   806b4:	4641      	mov	r1, r8
   806b6:	4630      	mov	r0, r6
   806b8:	4b1e      	ldr	r3, [pc, #120]	; (80734 <hx8347a_draw_line+0xcc>)
   806ba:	4798      	blx	r3

	if (dx > dy) {
   806bc:	42a5      	cmp	r5, r4
   806be:	dd1a      	ble.n	806f6 <hx8347a_draw_line+0x8e>
		cumul = dx >> 1;
   806c0:	ea4f 0865 	mov.w	r8, r5, asr #1

		for (i = 1; i <= dx; i++) {
   806c4:	2d00      	cmp	r5, #0
   806c6:	dd2f      	ble.n	80728 <hx8347a_draw_line+0xc0>
   806c8:	9900      	ldr	r1, [sp, #0]
   806ca:	4689      	mov	r9, r1
   806cc:	440e      	add	r6, r1
   806ce:	f04f 0a01 	mov.w	sl, #1
			if (cumul >= dx) {
				cumul -= dx;
				y += yinc;
			}

			hx8347a_draw_pixel(x, y);
   806d2:	f8df b060 	ldr.w	fp, [pc, #96]	; 80734 <hx8347a_draw_line+0xcc>
	if (dx > dy) {
		cumul = dx >> 1;

		for (i = 1; i <= dx; i++) {
			x += xinc;
			cumul += dy;
   806d6:	44a0      	add	r8, r4

			if (cumul >= dx) {
   806d8:	4545      	cmp	r5, r8
   806da:	dc03      	bgt.n	806e4 <hx8347a_draw_line+0x7c>
				cumul -= dx;
   806dc:	ebc5 0808 	rsb	r8, r5, r8
				y += yinc;
   806e0:	9b01      	ldr	r3, [sp, #4]
   806e2:	441f      	add	r7, r3
			}

			hx8347a_draw_pixel(x, y);
   806e4:	4639      	mov	r1, r7
   806e6:	4630      	mov	r0, r6
   806e8:	47d8      	blx	fp
	hx8347a_draw_pixel(x, y);

	if (dx > dy) {
		cumul = dx >> 1;

		for (i = 1; i <= dx; i++) {
   806ea:	f10a 0a01 	add.w	sl, sl, #1
   806ee:	444e      	add	r6, r9
   806f0:	4555      	cmp	r5, sl
   806f2:	daf0      	bge.n	806d6 <hx8347a_draw_line+0x6e>
   806f4:	e018      	b.n	80728 <hx8347a_draw_line+0xc0>
			}

			hx8347a_draw_pixel(x, y);
		}
	} else {
		cumul = dy >> 1;
   806f6:	1067      	asrs	r7, r4, #1

		for (i = 1; i <= dy; i++) {
   806f8:	2c00      	cmp	r4, #0
   806fa:	dd15      	ble.n	80728 <hx8347a_draw_line+0xc0>
   806fc:	9b01      	ldr	r3, [sp, #4]
   806fe:	469b      	mov	fp, r3
   80700:	4443      	add	r3, r8
   80702:	461e      	mov	r6, r3
   80704:	f04f 0801 	mov.w	r8, #1
			if (cumul >= dy) {
				cumul -= dy;
				x += xinc;
			}

			hx8347a_draw_pixel(x, y);
   80708:	f8df a028 	ldr.w	sl, [pc, #40]	; 80734 <hx8347a_draw_line+0xcc>
	} else {
		cumul = dy >> 1;

		for (i = 1; i <= dy; i++) {
			y += yinc;
			cumul += dx;
   8070c:	442f      	add	r7, r5

			if (cumul >= dy) {
   8070e:	42bc      	cmp	r4, r7
   80710:	dc02      	bgt.n	80718 <hx8347a_draw_line+0xb0>
				cumul -= dy;
   80712:	1b3f      	subs	r7, r7, r4
				x += xinc;
   80714:	9b00      	ldr	r3, [sp, #0]
   80716:	4499      	add	r9, r3
			}

			hx8347a_draw_pixel(x, y);
   80718:	4631      	mov	r1, r6
   8071a:	4648      	mov	r0, r9
   8071c:	47d0      	blx	sl
			hx8347a_draw_pixel(x, y);
		}
	} else {
		cumul = dy >> 1;

		for (i = 1; i <= dy; i++) {
   8071e:	f108 0801 	add.w	r8, r8, #1
   80722:	445e      	add	r6, fp
   80724:	4544      	cmp	r4, r8
   80726:	daf1      	bge.n	8070c <hx8347a_draw_line+0xa4>
	if ((ul_y1 == ul_y2) || (ul_x1 == ul_x2)) {
		hx8347a_draw_filled_rectangle(ul_x1, ul_y1, ul_x2, ul_y2);
	} else {
		hx8347a_draw_line_bresenham(ul_x1, ul_y1, ul_x2, ul_y2);
	}
}
   80728:	b003      	add	sp, #12
   8072a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8072e:	bf00      	nop
   80730:	000805b1 	.word	0x000805b1
   80734:	00080575 	.word	0x00080575

00080738 <smc_set_setup_timing>:
 * \param ul_setup_timing Setup timing for NWE, NCS, NRD.
 */
void smc_set_setup_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_setup_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_SETUP = ul_setup_timing;
   80738:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   8073c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   80740:	6702      	str	r2, [r0, #112]	; 0x70
   80742:	4770      	bx	lr

00080744 <smc_set_pulse_timing>:
 * \param ul_pulse_timing Pulse timing for NWE,NCS,NRD.
 */
void smc_set_pulse_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_pulse_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_PULSE = ul_pulse_timing;
   80744:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   80748:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   8074c:	6742      	str	r2, [r0, #116]	; 0x74
   8074e:	4770      	bx	lr

00080750 <smc_set_cycle_timing>:
 * \param ul_cycle_timing Cycle timing for NWE and NRD.
 */
void smc_set_cycle_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_cycle_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_CYCLE = ul_cycle_timing;
   80750:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   80754:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   80758:	6782      	str	r2, [r0, #120]	; 0x78
   8075a:	4770      	bx	lr

0008075c <smc_set_mode>:
 * \param ul_cs Chip select number to be set.
 * \param ul_mode SMC mode.
 */
void smc_set_mode(Smc *p_smc, uint32_t ul_cs, uint32_t ul_mode)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_MODE = ul_mode;
   8075c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   80760:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   80764:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
   80768:	4770      	bx	lr
   8076a:	bf00      	nop

0008076c <sysclk_init>:
		pll_disable(1);
	}
}

void sysclk_init(void)
{
   8076c:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   8076e:	4812      	ldr	r0, [pc, #72]	; (807b8 <sysclk_init+0x4c>)
   80770:	4b12      	ldr	r3, [pc, #72]	; (807bc <sysclk_init+0x50>)
   80772:	4798      	blx	r3
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   80774:	203e      	movs	r0, #62	; 0x3e
   80776:	4b12      	ldr	r3, [pc, #72]	; (807c0 <sysclk_init+0x54>)
   80778:	4798      	blx	r3
	case OSC_MAINCK_12M_RC:
		return pmc_osc_is_ready_fastrc();

	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_main_xtal();
   8077a:	4c12      	ldr	r4, [pc, #72]	; (807c4 <sysclk_init+0x58>)
   8077c:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   8077e:	2800      	cmp	r0, #0
   80780:	d0fc      	beq.n	8077c <sysclk_init+0x10>
#  ifndef CONFIG_PLL1_SOURCE
			pmc_osc_disable_main_xtal();
#  endif
		} else if (CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_XTAL ||
				CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_BYPASS) {
			pmc_mainck_osc_select(CKGR_MOR_MOSCSEL);
   80782:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   80786:	4b10      	ldr	r3, [pc, #64]	; (807c8 <sysclk_init+0x5c>)
   80788:	4798      	blx	r3
			while(!pmc_osc_is_ready_mainck());
   8078a:	4c10      	ldr	r4, [pc, #64]	; (807cc <sysclk_init+0x60>)
   8078c:	47a0      	blx	r4
   8078e:	2800      	cmp	r0, #0
   80790:	d0fc      	beq.n	8078c <sysclk_init+0x20>
		uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   80792:	4b0f      	ldr	r3, [pc, #60]	; (807d0 <sysclk_init+0x64>)
   80794:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80796:	4a0f      	ldr	r2, [pc, #60]	; (807d4 <sysclk_init+0x68>)
   80798:	4b0f      	ldr	r3, [pc, #60]	; (807d8 <sysclk_init+0x6c>)
   8079a:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   8079c:	4c0f      	ldr	r4, [pc, #60]	; (807dc <sysclk_init+0x70>)
   8079e:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   807a0:	2800      	cmp	r0, #0
   807a2:	d0fc      	beq.n	8079e <sysclk_init+0x32>
		}
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   807a4:	2010      	movs	r0, #16
   807a6:	4b0e      	ldr	r3, [pc, #56]	; (807e0 <sysclk_init+0x74>)
   807a8:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   807aa:	4b0e      	ldr	r3, [pc, #56]	; (807e4 <sysclk_init+0x78>)
   807ac:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   807ae:	4802      	ldr	r0, [pc, #8]	; (807b8 <sysclk_init+0x4c>)
   807b0:	4b02      	ldr	r3, [pc, #8]	; (807bc <sysclk_init+0x50>)
   807b2:	4798      	blx	r3
   807b4:	bd10      	pop	{r4, pc}
   807b6:	bf00      	nop
   807b8:	05b8d800 	.word	0x05b8d800
   807bc:	200000a9 	.word	0x200000a9
   807c0:	00080d11 	.word	0x00080d11
   807c4:	00080d39 	.word	0x00080d39
   807c8:	00080d59 	.word	0x00080d59
   807cc:	00080d49 	.word	0x00080d49
   807d0:	00080d79 	.word	0x00080d79
   807d4:	200f3f01 	.word	0x200f3f01
   807d8:	400e0400 	.word	0x400e0400
   807dc:	00080d89 	.word	0x00080d89
   807e0:	00080ca9 	.word	0x00080ca9
   807e4:	00080e7d 	.word	0x00080e7d

000807e8 <board_init>:
#endif
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   807e8:	b570      	push	{r4, r5, r6, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   807ea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   807ee:	4b7c      	ldr	r3, [pc, #496]	; (809e0 <board_init+0x1f8>)
   807f0:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   807f2:	200a      	movs	r0, #10
   807f4:	4c7b      	ldr	r4, [pc, #492]	; (809e4 <board_init+0x1fc>)
   807f6:	47a0      	blx	r4
   807f8:	200b      	movs	r0, #11
   807fa:	47a0      	blx	r4
   807fc:	200c      	movs	r0, #12
   807fe:	47a0      	blx	r4
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();

	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   80800:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80804:	2020      	movs	r0, #32
   80806:	4c78      	ldr	r4, [pc, #480]	; (809e8 <board_init+0x200>)
   80808:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   8080a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8080e:	2021      	movs	r0, #33	; 0x21
   80810:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   80812:	4976      	ldr	r1, [pc, #472]	; (809ec <board_init+0x204>)
   80814:	2012      	movs	r0, #18
   80816:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   80818:	4975      	ldr	r1, [pc, #468]	; (809f0 <board_init+0x208>)
   8081a:	2013      	movs	r0, #19
   8081c:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   8081e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   80822:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
   80826:	4873      	ldr	r0, [pc, #460]	; (809f4 <board_init+0x20c>)
   80828:	4b73      	ldr	r3, [pc, #460]	; (809f8 <board_init+0x210>)
   8082a:	4798      	blx	r3
	gpio_configure_pin(TWI1_CLK_GPIO, TWI1_CLK_FLAGS);
#endif

	/* Configure SPI pins */
#ifdef CONF_BOARD_SPI
	gpio_configure_pin(SPI_MISO_GPIO, SPI_MISO_FLAGS);
   8082c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80830:	200d      	movs	r0, #13
   80832:	47a0      	blx	r4
	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
   80834:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80838:	200e      	movs	r0, #14
   8083a:	47a0      	blx	r4
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
   8083c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80840:	200f      	movs	r0, #15
   80842:	47a0      	blx	r4
	 * Hence a different PIN should be selected using the CONF_BOARD_SPI_NPCS_GPIO and
	 * CONF_BOARD_SPI_NPCS_FLAGS macros.
	 */

#  ifdef CONF_BOARD_SPI_NPCS0
	gpio_configure_pin(SPI_NPCS0_GPIO, SPI_NPCS0_FLAGS);
   80844:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80848:	2010      	movs	r0, #16
   8084a:	47a0      	blx	r4

#  ifdef CONF_BOARD_SPI_NPCS2
#    if defined(CONF_BOARD_SPI_NPCS2_GPIO) && defined(CONF_BOARD_SPI_NPCS2_FLAGS)
	gpio_configure_pin(CONF_BOARD_SPI_NPCS2_GPIO, CONF_BOARD_SPI_NPCS2_FLAGS);
#    else
	gpio_configure_pin(SPI_NPCS2_PA1_GPIO, SPI_NPCS2_PA1_FLAGS);
   8084c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80850:	2001      	movs	r0, #1
   80852:	47a0      	blx	r4
#  endif
#endif /* CONF_BOARD_SPI */

#ifdef CONF_BOARD_USART_RXD
	/* Configure USART RXD pin */
	gpio_configure_pin(PIN_USART1_RXD_IDX, PIN_USART1_RXD_FLAGS);
   80854:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80858:	2015      	movs	r0, #21
   8085a:	47a0      	blx	r4
#endif

#ifdef CONF_BOARD_USART_TXD
	/* Configure USART TXD pin */
	gpio_configure_pin(PIN_USART1_TXD_IDX, PIN_USART1_TXD_FLAGS);
   8085c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80860:	2014      	movs	r0, #20
   80862:	47a0      	blx	r4
	gpio_configure_pin(PIN_RE_IDX, PIN_RE_FLAGS);
	gpio_set_pin_low(PIN_RE_IDX);
#endif

#ifdef CONF_BOARD_SMC_PSRAM
	gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIN_EBI_DATA_BUS_FLAG1);
   80864:	4d65      	ldr	r5, [pc, #404]	; (809fc <board_init+0x214>)
   80866:	4629      	mov	r1, r5
   80868:	2029      	movs	r0, #41	; 0x29
   8086a:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIN_EBI_DATA_BUS_FLAG1);
   8086c:	4629      	mov	r1, r5
   8086e:	202a      	movs	r0, #42	; 0x2a
   80870:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIN_EBI_DATA_BUS_FLAG1);
   80872:	4629      	mov	r1, r5
   80874:	202b      	movs	r0, #43	; 0x2b
   80876:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIN_EBI_DATA_BUS_FLAG1);
   80878:	4629      	mov	r1, r5
   8087a:	202c      	movs	r0, #44	; 0x2c
   8087c:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIN_EBI_DATA_BUS_FLAG1);
   8087e:	4629      	mov	r1, r5
   80880:	202d      	movs	r0, #45	; 0x2d
   80882:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIN_EBI_DATA_BUS_FLAG1);
   80884:	4629      	mov	r1, r5
   80886:	202e      	movs	r0, #46	; 0x2e
   80888:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIN_EBI_DATA_BUS_FLAG1);
   8088a:	4629      	mov	r1, r5
   8088c:	202f      	movs	r0, #47	; 0x2f
   8088e:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIN_EBI_DATA_BUS_FLAG1);
   80890:	4629      	mov	r1, r5
   80892:	2030      	movs	r0, #48	; 0x30
   80894:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D8, PIN_EBI_DATA_BUS_FLAG1);
   80896:	4629      	mov	r1, r5
   80898:	2039      	movs	r0, #57	; 0x39
   8089a:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D9, PIN_EBI_DATA_BUS_FLAG1);
   8089c:	4629      	mov	r1, r5
   8089e:	203a      	movs	r0, #58	; 0x3a
   808a0:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D10, PIN_EBI_DATA_BUS_FLAG1);
   808a2:	4629      	mov	r1, r5
   808a4:	203b      	movs	r0, #59	; 0x3b
   808a6:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D11, PIN_EBI_DATA_BUS_FLAG1);
   808a8:	4629      	mov	r1, r5
   808aa:	203c      	movs	r0, #60	; 0x3c
   808ac:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D12, PIN_EBI_DATA_BUS_FLAG1);
   808ae:	4629      	mov	r1, r5
   808b0:	203d      	movs	r0, #61	; 0x3d
   808b2:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D13, PIN_EBI_DATA_BUS_FLAG1);
   808b4:	4629      	mov	r1, r5
   808b6:	203e      	movs	r0, #62	; 0x3e
   808b8:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D14, PIN_EBI_DATA_BUS_FLAG1);
   808ba:	4629      	mov	r1, r5
   808bc:	203f      	movs	r0, #63	; 0x3f
   808be:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D15, PIN_EBI_DATA_BUS_FLAG2);
   808c0:	4e4f      	ldr	r6, [pc, #316]	; (80a00 <board_init+0x218>)
   808c2:	4631      	mov	r1, r6
   808c4:	2026      	movs	r0, #38	; 0x26
   808c6:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NRD, PIN_EBI_NRD_FLAGS);
   808c8:	4629      	mov	r1, r5
   808ca:	2033      	movs	r0, #51	; 0x33
   808cc:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NWE, PIN_EBI_NWE_FLAGS);
   808ce:	4629      	mov	r1, r5
   808d0:	2037      	movs	r0, #55	; 0x37
   808d2:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NCS0, PIN_EBI_NCS0_FLAGS);
   808d4:	4629      	mov	r1, r5
   808d6:	2034      	movs	r0, #52	; 0x34
   808d8:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_NBS0, PIN_EBI_ADDR_BUS_FLAG1);
   808da:	4631      	mov	r1, r6
   808dc:	2027      	movs	r0, #39	; 0x27
   808de:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_NBS1, PIN_EBI_ADDR_BUS_FLAG2);
   808e0:	4629      	mov	r1, r5
   808e2:	204f      	movs	r0, #79	; 0x4f
   808e4:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A1, PIN_EBI_ADDR_BUS_FLAG1);
   808e6:	4631      	mov	r1, r6
   808e8:	2028      	movs	r0, #40	; 0x28
   808ea:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A2, PIN_EBI_ADDR_BUS_FLAG2);
   808ec:	4629      	mov	r1, r5
   808ee:	2040      	movs	r0, #64	; 0x40
   808f0:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A3, PIN_EBI_ADDR_BUS_FLAG2);
   808f2:	4629      	mov	r1, r5
   808f4:	2041      	movs	r0, #65	; 0x41
   808f6:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A4, PIN_EBI_ADDR_BUS_FLAG2);
   808f8:	4629      	mov	r1, r5
   808fa:	2042      	movs	r0, #66	; 0x42
   808fc:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A5, PIN_EBI_ADDR_BUS_FLAG2);
   808fe:	4629      	mov	r1, r5
   80900:	2043      	movs	r0, #67	; 0x43
   80902:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A6, PIN_EBI_ADDR_BUS_FLAG2);
   80904:	4629      	mov	r1, r5
   80906:	2044      	movs	r0, #68	; 0x44
   80908:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A7, PIN_EBI_ADDR_BUS_FLAG2);
   8090a:	4629      	mov	r1, r5
   8090c:	2045      	movs	r0, #69	; 0x45
   8090e:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A8, PIN_EBI_ADDR_BUS_FLAG2);
   80910:	4629      	mov	r1, r5
   80912:	2046      	movs	r0, #70	; 0x46
   80914:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A9, PIN_EBI_ADDR_BUS_FLAG2);
   80916:	4629      	mov	r1, r5
   80918:	2047      	movs	r0, #71	; 0x47
   8091a:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A10, PIN_EBI_ADDR_BUS_FLAG2);
   8091c:	4629      	mov	r1, r5
   8091e:	2048      	movs	r0, #72	; 0x48
   80920:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A11, PIN_EBI_ADDR_BUS_FLAG2);
   80922:	4629      	mov	r1, r5
   80924:	2049      	movs	r0, #73	; 0x49
   80926:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A12, PIN_EBI_ADDR_BUS_FLAG2);
   80928:	4629      	mov	r1, r5
   8092a:	204a      	movs	r0, #74	; 0x4a
   8092c:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A13, PIN_EBI_ADDR_BUS_FLAG2);
   8092e:	4629      	mov	r1, r5
   80930:	204b      	movs	r0, #75	; 0x4b
   80932:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A14, PIN_EBI_ADDR_BUS_FLAG2);
   80934:	4629      	mov	r1, r5
   80936:	2054      	movs	r0, #84	; 0x54
   80938:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A15, PIN_EBI_ADDR_BUS_FLAG2);
   8093a:	4629      	mov	r1, r5
   8093c:	2055      	movs	r0, #85	; 0x55
   8093e:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A16, PIN_EBI_ADDR_BUS_FLAG2);
   80940:	4629      	mov	r1, r5
   80942:	2056      	movs	r0, #86	; 0x56
   80944:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A17, PIN_EBI_ADDR_BUS_FLAG2);
   80946:	4629      	mov	r1, r5
   80948:	2057      	movs	r0, #87	; 0x57
   8094a:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A18, PIN_EBI_ADDR_BUS_FLAG2);
   8094c:	4629      	mov	r1, r5
   8094e:	2058      	movs	r0, #88	; 0x58
   80950:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A19, PIN_EBI_ADDR_BUS_FLAG2);
   80952:	4629      	mov	r1, r5
   80954:	2059      	movs	r0, #89	; 0x59
   80956:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A20, PIN_EBI_ADDR_BUS_FLAG2);
   80958:	4629      	mov	r1, r5
   8095a:	205a      	movs	r0, #90	; 0x5a
   8095c:	47a0      	blx	r4
#endif

#ifdef CONF_BOARD_HX8347A
	/* Configure LCD EBI pins */
	gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIN_EBI_DATA_BUS_FLAG1);
   8095e:	4629      	mov	r1, r5
   80960:	2029      	movs	r0, #41	; 0x29
   80962:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIN_EBI_DATA_BUS_FLAG1);
   80964:	4629      	mov	r1, r5
   80966:	202a      	movs	r0, #42	; 0x2a
   80968:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIN_EBI_DATA_BUS_FLAG1);
   8096a:	4629      	mov	r1, r5
   8096c:	202b      	movs	r0, #43	; 0x2b
   8096e:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIN_EBI_DATA_BUS_FLAG1);
   80970:	4629      	mov	r1, r5
   80972:	202c      	movs	r0, #44	; 0x2c
   80974:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIN_EBI_DATA_BUS_FLAG1);
   80976:	4629      	mov	r1, r5
   80978:	202d      	movs	r0, #45	; 0x2d
   8097a:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIN_EBI_DATA_BUS_FLAG1);
   8097c:	4629      	mov	r1, r5
   8097e:	202e      	movs	r0, #46	; 0x2e
   80980:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIN_EBI_DATA_BUS_FLAG1);
   80982:	4629      	mov	r1, r5
   80984:	202f      	movs	r0, #47	; 0x2f
   80986:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIN_EBI_DATA_BUS_FLAG1);
   80988:	4629      	mov	r1, r5
   8098a:	2030      	movs	r0, #48	; 0x30
   8098c:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D8, PIN_EBI_DATA_BUS_FLAG1);
   8098e:	4629      	mov	r1, r5
   80990:	2039      	movs	r0, #57	; 0x39
   80992:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D9, PIN_EBI_DATA_BUS_FLAG1);
   80994:	4629      	mov	r1, r5
   80996:	203a      	movs	r0, #58	; 0x3a
   80998:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D10, PIN_EBI_DATA_BUS_FLAG1);
   8099a:	4629      	mov	r1, r5
   8099c:	203b      	movs	r0, #59	; 0x3b
   8099e:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D11, PIN_EBI_DATA_BUS_FLAG1);
   809a0:	4629      	mov	r1, r5
   809a2:	203c      	movs	r0, #60	; 0x3c
   809a4:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D12, PIN_EBI_DATA_BUS_FLAG1);
   809a6:	4629      	mov	r1, r5
   809a8:	203d      	movs	r0, #61	; 0x3d
   809aa:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D13, PIN_EBI_DATA_BUS_FLAG1);
   809ac:	4629      	mov	r1, r5
   809ae:	203e      	movs	r0, #62	; 0x3e
   809b0:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D14, PIN_EBI_DATA_BUS_FLAG1);
   809b2:	4629      	mov	r1, r5
   809b4:	203f      	movs	r0, #63	; 0x3f
   809b6:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D15, PIN_EBI_DATA_BUS_FLAG2);
   809b8:	4631      	mov	r1, r6
   809ba:	2026      	movs	r0, #38	; 0x26
   809bc:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NRD, PIN_EBI_NRD_FLAGS);
   809be:	4629      	mov	r1, r5
   809c0:	2033      	movs	r0, #51	; 0x33
   809c2:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NWE, PIN_EBI_NWE_FLAGS);
   809c4:	4629      	mov	r1, r5
   809c6:	2037      	movs	r0, #55	; 0x37
   809c8:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NCS2, PIN_EBI_NCS2_FLAGS);
   809ca:	4629      	mov	r1, r5
   809cc:	2050      	movs	r0, #80	; 0x50
   809ce:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_LCD_RS, PIN_EBI_LCD_RS_FLAGS);
   809d0:	4631      	mov	r1, r6
   809d2:	2028      	movs	r0, #40	; 0x28
   809d4:	47a0      	blx	r4
#endif

#ifdef CONF_BOARD_AAT3194
	/* Configure Backlight control pin */
	gpio_configure_pin(BOARD_AAT31XX_SET_GPIO, BOARD_AAT31XX_SET_FLAGS);
   809d6:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   809da:	2053      	movs	r0, #83	; 0x53
   809dc:	47a0      	blx	r4
   809de:	bd70      	pop	{r4, r5, r6, pc}
   809e0:	400e1250 	.word	0x400e1250
   809e4:	00080d99 	.word	0x00080d99
   809e8:	00080aa9 	.word	0x00080aa9
   809ec:	28000073 	.word	0x28000073
   809f0:	28000053 	.word	0x28000053
   809f4:	400e0c00 	.word	0x400e0c00
   809f8:	00080b7d 	.word	0x00080b7d
   809fc:	08000001 	.word	0x08000001
   80a00:	10000001 	.word	0x10000001

00080a04 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   80a04:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   80a06:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   80a0a:	d016      	beq.n	80a3a <pio_set_peripheral+0x36>
   80a0c:	d804      	bhi.n	80a18 <pio_set_peripheral+0x14>
   80a0e:	b1c1      	cbz	r1, 80a42 <pio_set_peripheral+0x3e>
   80a10:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   80a14:	d00a      	beq.n	80a2c <pio_set_peripheral+0x28>
   80a16:	e013      	b.n	80a40 <pio_set_peripheral+0x3c>
   80a18:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   80a1c:	d011      	beq.n	80a42 <pio_set_peripheral+0x3e>
   80a1e:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   80a22:	d00e      	beq.n	80a42 <pio_set_peripheral+0x3e>
   80a24:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   80a28:	d10a      	bne.n	80a40 <pio_set_peripheral+0x3c>
   80a2a:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   80a2c:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   80a2e:	6f03      	ldr	r3, [r0, #112]	; 0x70
   80a30:	400b      	ands	r3, r1
   80a32:	ea23 0302 	bic.w	r3, r3, r2
   80a36:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   80a38:	e002      	b.n	80a40 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   80a3a:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   80a3c:	4313      	orrs	r3, r2
   80a3e:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   80a40:	6042      	str	r2, [r0, #4]
   80a42:	4770      	bx	lr

00080a44 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80a44:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80a46:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   80a4a:	bf14      	ite	ne
   80a4c:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80a4e:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   80a50:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   80a54:	bf14      	ite	ne
   80a56:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   80a58:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   80a5a:	f012 0f02 	tst.w	r2, #2
   80a5e:	d002      	beq.n	80a66 <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   80a60:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   80a64:	e004      	b.n	80a70 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   80a66:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   80a6a:	bf18      	it	ne
   80a6c:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   80a70:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   80a72:	6001      	str	r1, [r0, #0]
   80a74:	4770      	bx	lr
   80a76:	bf00      	nop

00080a78 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   80a78:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80a7a:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80a7c:	9c01      	ldr	r4, [sp, #4]
   80a7e:	b10c      	cbz	r4, 80a84 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   80a80:	6641      	str	r1, [r0, #100]	; 0x64
   80a82:	e000      	b.n	80a86 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80a84:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   80a86:	b10b      	cbz	r3, 80a8c <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   80a88:	6501      	str	r1, [r0, #80]	; 0x50
   80a8a:	e000      	b.n	80a8e <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   80a8c:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   80a8e:	b10a      	cbz	r2, 80a94 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   80a90:	6301      	str	r1, [r0, #48]	; 0x30
   80a92:	e000      	b.n	80a96 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   80a94:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   80a96:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   80a98:	6001      	str	r1, [r0, #0]
}
   80a9a:	bc10      	pop	{r4}
   80a9c:	4770      	bx	lr
   80a9e:	bf00      	nop

00080aa0 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   80aa0:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   80aa2:	4770      	bx	lr

00080aa4 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   80aa4:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   80aa6:	4770      	bx	lr

00080aa8 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   80aa8:	b570      	push	{r4, r5, r6, lr}
   80aaa:	b082      	sub	sp, #8
   80aac:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80aae:	0943      	lsrs	r3, r0, #5
   80ab0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80ab4:	f203 7306 	addw	r3, r3, #1798	; 0x706
   80ab8:	025c      	lsls	r4, r3, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80aba:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   80abe:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   80ac2:	d030      	beq.n	80b26 <pio_configure_pin+0x7e>
   80ac4:	d806      	bhi.n	80ad4 <pio_configure_pin+0x2c>
   80ac6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   80aca:	d00a      	beq.n	80ae2 <pio_configure_pin+0x3a>
   80acc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80ad0:	d018      	beq.n	80b04 <pio_configure_pin+0x5c>
   80ad2:	e049      	b.n	80b68 <pio_configure_pin+0xc0>
   80ad4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   80ad8:	d030      	beq.n	80b3c <pio_configure_pin+0x94>
   80ada:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80ade:	d02d      	beq.n	80b3c <pio_configure_pin+0x94>
   80ae0:	e042      	b.n	80b68 <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   80ae2:	f000 001f 	and.w	r0, r0, #31
   80ae6:	2601      	movs	r6, #1
   80ae8:	4086      	lsls	r6, r0
   80aea:	4632      	mov	r2, r6
   80aec:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80af0:	4620      	mov	r0, r4
   80af2:	4b1f      	ldr	r3, [pc, #124]	; (80b70 <pio_configure_pin+0xc8>)
   80af4:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80af6:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80afa:	bf14      	ite	ne
   80afc:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80afe:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80b00:	2001      	movs	r0, #1
   80b02:	e032      	b.n	80b6a <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   80b04:	f000 001f 	and.w	r0, r0, #31
   80b08:	2601      	movs	r6, #1
   80b0a:	4086      	lsls	r6, r0
   80b0c:	4632      	mov	r2, r6
   80b0e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80b12:	4620      	mov	r0, r4
   80b14:	4b16      	ldr	r3, [pc, #88]	; (80b70 <pio_configure_pin+0xc8>)
   80b16:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80b18:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80b1c:	bf14      	ite	ne
   80b1e:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80b20:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80b22:	2001      	movs	r0, #1
   80b24:	e021      	b.n	80b6a <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   80b26:	f000 011f 	and.w	r1, r0, #31
   80b2a:	2601      	movs	r6, #1
   80b2c:	462a      	mov	r2, r5
   80b2e:	fa06 f101 	lsl.w	r1, r6, r1
   80b32:	4620      	mov	r0, r4
   80b34:	4b0f      	ldr	r3, [pc, #60]	; (80b74 <pio_configure_pin+0xcc>)
   80b36:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80b38:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   80b3a:	e016      	b.n	80b6a <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80b3c:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
   80b40:	f000 011f 	and.w	r1, r0, #31
   80b44:	2601      	movs	r6, #1
   80b46:	ea05 0306 	and.w	r3, r5, r6
   80b4a:	9300      	str	r3, [sp, #0]
   80b4c:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80b50:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80b54:	bf14      	ite	ne
   80b56:	2200      	movne	r2, #0
   80b58:	2201      	moveq	r2, #1
   80b5a:	fa06 f101 	lsl.w	r1, r6, r1
   80b5e:	4620      	mov	r0, r4
   80b60:	4c05      	ldr	r4, [pc, #20]	; (80b78 <pio_configure_pin+0xd0>)
   80b62:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   80b64:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80b66:	e000      	b.n	80b6a <pio_configure_pin+0xc2>

	default:
		return 0;
   80b68:	2000      	movs	r0, #0
	}

	return 1;
}
   80b6a:	b002      	add	sp, #8
   80b6c:	bd70      	pop	{r4, r5, r6, pc}
   80b6e:	bf00      	nop
   80b70:	00080a05 	.word	0x00080a05
   80b74:	00080a45 	.word	0x00080a45
   80b78:	00080a79 	.word	0x00080a79

00080b7c <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   80b7c:	b570      	push	{r4, r5, r6, lr}
   80b7e:	b082      	sub	sp, #8
   80b80:	4605      	mov	r5, r0
   80b82:	460e      	mov	r6, r1
   80b84:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80b86:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   80b8a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   80b8e:	d026      	beq.n	80bde <pio_configure_pin_group+0x62>
   80b90:	d806      	bhi.n	80ba0 <pio_configure_pin_group+0x24>
   80b92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   80b96:	d00a      	beq.n	80bae <pio_configure_pin_group+0x32>
   80b98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80b9c:	d013      	beq.n	80bc6 <pio_configure_pin_group+0x4a>
   80b9e:	e034      	b.n	80c0a <pio_configure_pin_group+0x8e>
   80ba0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   80ba4:	d01f      	beq.n	80be6 <pio_configure_pin_group+0x6a>
   80ba6:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80baa:	d01c      	beq.n	80be6 <pio_configure_pin_group+0x6a>
   80bac:	e02d      	b.n	80c0a <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   80bae:	460a      	mov	r2, r1
   80bb0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80bb4:	4b16      	ldr	r3, [pc, #88]	; (80c10 <pio_configure_pin_group+0x94>)
   80bb6:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80bb8:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   80bbc:	bf14      	ite	ne
   80bbe:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80bc0:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80bc2:	2001      	movs	r0, #1
   80bc4:	e022      	b.n	80c0c <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   80bc6:	460a      	mov	r2, r1
   80bc8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80bcc:	4b10      	ldr	r3, [pc, #64]	; (80c10 <pio_configure_pin_group+0x94>)
   80bce:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80bd0:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   80bd4:	bf14      	ite	ne
   80bd6:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80bd8:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80bda:	2001      	movs	r0, #1
   80bdc:	e016      	b.n	80c0c <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   80bde:	4b0d      	ldr	r3, [pc, #52]	; (80c14 <pio_configure_pin_group+0x98>)
   80be0:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80be2:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   80be4:	e012      	b.n	80c0c <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   80be6:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
   80bea:	f004 0301 	and.w	r3, r4, #1
   80bee:	9300      	str	r3, [sp, #0]
   80bf0:	f3c4 0380 	ubfx	r3, r4, #2, #1
   80bf4:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80bf8:	bf14      	ite	ne
   80bfa:	2200      	movne	r2, #0
   80bfc:	2201      	moveq	r2, #1
   80bfe:	4631      	mov	r1, r6
   80c00:	4628      	mov	r0, r5
   80c02:	4c05      	ldr	r4, [pc, #20]	; (80c18 <pio_configure_pin_group+0x9c>)
   80c04:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   80c06:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80c08:	e000      	b.n	80c0c <pio_configure_pin_group+0x90>

	default:
		return 0;
   80c0a:	2000      	movs	r0, #0
	}

	return 1;
}
   80c0c:	b002      	add	sp, #8
   80c0e:	bd70      	pop	{r4, r5, r6, pc}
   80c10:	00080a05 	.word	0x00080a05
   80c14:	00080a45 	.word	0x00080a45
   80c18:	00080a79 	.word	0x00080a79

00080c1c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80c20:	4604      	mov	r4, r0
   80c22:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80c24:	4b0e      	ldr	r3, [pc, #56]	; (80c60 <pio_handler_process+0x44>)
   80c26:	4798      	blx	r3
   80c28:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   80c2a:	4620      	mov	r0, r4
   80c2c:	4b0d      	ldr	r3, [pc, #52]	; (80c64 <pio_handler_process+0x48>)
   80c2e:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   80c30:	4005      	ands	r5, r0
   80c32:	d013      	beq.n	80c5c <pio_handler_process+0x40>
   80c34:	4c0c      	ldr	r4, [pc, #48]	; (80c68 <pio_handler_process+0x4c>)
   80c36:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   80c3a:	6823      	ldr	r3, [r4, #0]
   80c3c:	4543      	cmp	r3, r8
   80c3e:	d108      	bne.n	80c52 <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   80c40:	6861      	ldr	r1, [r4, #4]
   80c42:	4229      	tst	r1, r5
   80c44:	d005      	beq.n	80c52 <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   80c46:	68e3      	ldr	r3, [r4, #12]
   80c48:	4640      	mov	r0, r8
   80c4a:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   80c4c:	6863      	ldr	r3, [r4, #4]
   80c4e:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   80c52:	42b4      	cmp	r4, r6
   80c54:	d002      	beq.n	80c5c <pio_handler_process+0x40>
   80c56:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   80c58:	2d00      	cmp	r5, #0
   80c5a:	d1ee      	bne.n	80c3a <pio_handler_process+0x1e>
   80c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80c60:	00080aa1 	.word	0x00080aa1
   80c64:	00080aa5 	.word	0x00080aa5
   80c68:	20000744 	.word	0x20000744

00080c6c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   80c6c:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   80c6e:	210a      	movs	r1, #10
   80c70:	4801      	ldr	r0, [pc, #4]	; (80c78 <PIOA_Handler+0xc>)
   80c72:	4b02      	ldr	r3, [pc, #8]	; (80c7c <PIOA_Handler+0x10>)
   80c74:	4798      	blx	r3
   80c76:	bd08      	pop	{r3, pc}
   80c78:	400e0c00 	.word	0x400e0c00
   80c7c:	00080c1d 	.word	0x00080c1d

00080c80 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   80c80:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   80c82:	210b      	movs	r1, #11
   80c84:	4801      	ldr	r0, [pc, #4]	; (80c8c <PIOB_Handler+0xc>)
   80c86:	4b02      	ldr	r3, [pc, #8]	; (80c90 <PIOB_Handler+0x10>)
   80c88:	4798      	blx	r3
   80c8a:	bd08      	pop	{r3, pc}
   80c8c:	400e0e00 	.word	0x400e0e00
   80c90:	00080c1d 	.word	0x00080c1d

00080c94 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   80c94:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   80c96:	210c      	movs	r1, #12
   80c98:	4801      	ldr	r0, [pc, #4]	; (80ca0 <PIOC_Handler+0xc>)
   80c9a:	4b02      	ldr	r3, [pc, #8]	; (80ca4 <PIOC_Handler+0x10>)
   80c9c:	4798      	blx	r3
   80c9e:	bd08      	pop	{r3, pc}
   80ca0:	400e1000 	.word	0x400e1000
   80ca4:	00080c1d 	.word	0x00080c1d

00080ca8 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   80ca8:	4a18      	ldr	r2, [pc, #96]	; (80d0c <pmc_switch_mck_to_pllack+0x64>)
   80caa:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80cac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   80cb0:	4318      	orrs	r0, r3
   80cb2:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80cb4:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80cb6:	f013 0f08 	tst.w	r3, #8
   80cba:	d003      	beq.n	80cc4 <pmc_switch_mck_to_pllack+0x1c>
   80cbc:	e009      	b.n	80cd2 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80cbe:	3b01      	subs	r3, #1
   80cc0:	d103      	bne.n	80cca <pmc_switch_mck_to_pllack+0x22>
   80cc2:	e01e      	b.n	80d02 <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80cc4:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80cc8:	4910      	ldr	r1, [pc, #64]	; (80d0c <pmc_switch_mck_to_pllack+0x64>)
   80cca:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80ccc:	f012 0f08 	tst.w	r2, #8
   80cd0:	d0f5      	beq.n	80cbe <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   80cd2:	4a0e      	ldr	r2, [pc, #56]	; (80d0c <pmc_switch_mck_to_pllack+0x64>)
   80cd4:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80cd6:	f023 0303 	bic.w	r3, r3, #3
   80cda:	f043 0302 	orr.w	r3, r3, #2
   80cde:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80ce0:	6e90      	ldr	r0, [r2, #104]	; 0x68
   80ce2:	f010 0008 	ands.w	r0, r0, #8
   80ce6:	d004      	beq.n	80cf2 <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   80ce8:	2000      	movs	r0, #0
   80cea:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   80cec:	3b01      	subs	r3, #1
   80cee:	d103      	bne.n	80cf8 <pmc_switch_mck_to_pllack+0x50>
   80cf0:	e009      	b.n	80d06 <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80cf2:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80cf6:	4905      	ldr	r1, [pc, #20]	; (80d0c <pmc_switch_mck_to_pllack+0x64>)
   80cf8:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80cfa:	f012 0f08 	tst.w	r2, #8
   80cfe:	d0f5      	beq.n	80cec <pmc_switch_mck_to_pllack+0x44>
   80d00:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   80d02:	2001      	movs	r0, #1
   80d04:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   80d06:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   80d08:	4770      	bx	lr
   80d0a:	bf00      	nop
   80d0c:	400e0400 	.word	0x400e0400

00080d10 <pmc_osc_enable_main_xtal>:
 *
 * \param ul_xtal_startup_time Xtal start-up time, in number of slow clocks.
 */
void pmc_osc_enable_main_xtal(uint32_t ul_xtal_startup_time)
{
	uint32_t mor = PMC->CKGR_MOR;
   80d10:	4a08      	ldr	r2, [pc, #32]	; (80d34 <pmc_osc_enable_main_xtal+0x24>)
   80d12:	6a13      	ldr	r3, [r2, #32]
   80d14:	f023 0303 	bic.w	r3, r3, #3
   80d18:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   80d1c:	f043 0301 	orr.w	r3, r3, #1
	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   80d20:	0200      	lsls	r0, r0, #8
   80d22:	b280      	uxth	r0, r0
   80d24:	4303      	orrs	r3, r0
			CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
	PMC->CKGR_MOR = mor;
   80d26:	6213      	str	r3, [r2, #32]
	/* Wait the main Xtal to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   80d28:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80d2a:	f013 0f01 	tst.w	r3, #1
   80d2e:	d0fb      	beq.n	80d28 <pmc_osc_enable_main_xtal+0x18>
}
   80d30:	4770      	bx	lr
   80d32:	bf00      	nop
   80d34:	400e0400 	.word	0x400e0400

00080d38 <pmc_osc_is_ready_main_xtal>:
 *
 * \retval 0 main crystal is not ready, otherwise ready.
 */
uint32_t pmc_osc_is_ready_main_xtal(void)
{
	return (PMC->PMC_SR & PMC_SR_MOSCXTS);
   80d38:	4b02      	ldr	r3, [pc, #8]	; (80d44 <pmc_osc_is_ready_main_xtal+0xc>)
   80d3a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80d3c:	f000 0001 	and.w	r0, r0, #1
   80d40:	4770      	bx	lr
   80d42:	bf00      	nop
   80d44:	400e0400 	.word	0x400e0400

00080d48 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   80d48:	4b02      	ldr	r3, [pc, #8]	; (80d54 <pmc_osc_is_ready_mainck+0xc>)
   80d4a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80d4c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   80d50:	4770      	bx	lr
   80d52:	bf00      	nop
   80d54:	400e0400 	.word	0x400e0400

00080d58 <pmc_mainck_osc_select>:
 *
 * \param ul_xtal_rc 0 internal RC is selected, otherwise Main Crystal.
 */
void pmc_mainck_osc_select(uint32_t ul_xtal_rc)
{
	uint32_t mor = PMC->CKGR_MOR;
   80d58:	4b06      	ldr	r3, [pc, #24]	; (80d74 <pmc_mainck_osc_select+0x1c>)
   80d5a:	6a1b      	ldr	r3, [r3, #32]
	if (ul_xtal_rc) {
   80d5c:	b110      	cbz	r0, 80d64 <pmc_mainck_osc_select+0xc>
		mor |=  CKGR_MOR_MOSCSEL;
   80d5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   80d62:	e001      	b.n	80d68 <pmc_mainck_osc_select+0x10>
	} else {
		mor &= ~CKGR_MOR_MOSCSEL;
   80d64:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
	}
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor;
   80d68:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   80d6c:	4a01      	ldr	r2, [pc, #4]	; (80d74 <pmc_mainck_osc_select+0x1c>)
   80d6e:	6213      	str	r3, [r2, #32]
   80d70:	4770      	bx	lr
   80d72:	bf00      	nop
   80d74:	400e0400 	.word	0x400e0400

00080d78 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   80d78:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   80d7c:	4b01      	ldr	r3, [pc, #4]	; (80d84 <pmc_disable_pllack+0xc>)
   80d7e:	629a      	str	r2, [r3, #40]	; 0x28
   80d80:	4770      	bx	lr
   80d82:	bf00      	nop
   80d84:	400e0400 	.word	0x400e0400

00080d88 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   80d88:	4b02      	ldr	r3, [pc, #8]	; (80d94 <pmc_is_locked_pllack+0xc>)
   80d8a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80d8c:	f000 0002 	and.w	r0, r0, #2
   80d90:	4770      	bx	lr
   80d92:	bf00      	nop
   80d94:	400e0400 	.word	0x400e0400

00080d98 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   80d98:	281d      	cmp	r0, #29
   80d9a:	d80e      	bhi.n	80dba <pmc_enable_periph_clk+0x22>
		return 1;
	}

	if (ul_id < 32) {
   80d9c:	281f      	cmp	r0, #31
   80d9e:	d80e      	bhi.n	80dbe <pmc_enable_periph_clk+0x26>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80da0:	4b09      	ldr	r3, [pc, #36]	; (80dc8 <pmc_enable_periph_clk+0x30>)
   80da2:	699a      	ldr	r2, [r3, #24]
   80da4:	2301      	movs	r3, #1
   80da6:	4083      	lsls	r3, r0
   80da8:	4393      	bics	r3, r2
   80daa:	d00a      	beq.n	80dc2 <pmc_enable_periph_clk+0x2a>
			PMC->PMC_PCER0 = 1 << ul_id;
   80dac:	2301      	movs	r3, #1
   80dae:	fa03 f000 	lsl.w	r0, r3, r0
   80db2:	4b05      	ldr	r3, [pc, #20]	; (80dc8 <pmc_enable_periph_clk+0x30>)
   80db4:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80db6:	2000      	movs	r0, #0
   80db8:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   80dba:	2001      	movs	r0, #1
   80dbc:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80dbe:	2000      	movs	r0, #0
   80dc0:	4770      	bx	lr
   80dc2:	2000      	movs	r0, #0
}
   80dc4:	4770      	bx	lr
   80dc6:	bf00      	nop
   80dc8:	400e0400 	.word	0x400e0400

00080dcc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80dcc:	e7fe      	b.n	80dcc <Dummy_Handler>
   80dce:	bf00      	nop

00080dd0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80dd0:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   80dd2:	4b1e      	ldr	r3, [pc, #120]	; (80e4c <Reset_Handler+0x7c>)
   80dd4:	4a1e      	ldr	r2, [pc, #120]	; (80e50 <Reset_Handler+0x80>)
   80dd6:	429a      	cmp	r2, r3
   80dd8:	d003      	beq.n	80de2 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   80dda:	4b1e      	ldr	r3, [pc, #120]	; (80e54 <Reset_Handler+0x84>)
   80ddc:	4a1b      	ldr	r2, [pc, #108]	; (80e4c <Reset_Handler+0x7c>)
   80dde:	429a      	cmp	r2, r3
   80de0:	d304      	bcc.n	80dec <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80de2:	4b1d      	ldr	r3, [pc, #116]	; (80e58 <Reset_Handler+0x88>)
   80de4:	4a1d      	ldr	r2, [pc, #116]	; (80e5c <Reset_Handler+0x8c>)
   80de6:	429a      	cmp	r2, r3
   80de8:	d30f      	bcc.n	80e0a <Reset_Handler+0x3a>
   80dea:	e01a      	b.n	80e22 <Reset_Handler+0x52>
   80dec:	4917      	ldr	r1, [pc, #92]	; (80e4c <Reset_Handler+0x7c>)
   80dee:	4b1c      	ldr	r3, [pc, #112]	; (80e60 <Reset_Handler+0x90>)
   80df0:	1a5b      	subs	r3, r3, r1
   80df2:	f023 0303 	bic.w	r3, r3, #3
   80df6:	3304      	adds	r3, #4
   80df8:	4a15      	ldr	r2, [pc, #84]	; (80e50 <Reset_Handler+0x80>)
   80dfa:	4413      	add	r3, r2
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   80dfc:	f852 0b04 	ldr.w	r0, [r2], #4
   80e00:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80e04:	429a      	cmp	r2, r3
   80e06:	d1f9      	bne.n	80dfc <Reset_Handler+0x2c>
   80e08:	e7eb      	b.n	80de2 <Reset_Handler+0x12>
   80e0a:	4b16      	ldr	r3, [pc, #88]	; (80e64 <Reset_Handler+0x94>)
   80e0c:	4a16      	ldr	r2, [pc, #88]	; (80e68 <Reset_Handler+0x98>)
   80e0e:	1ad2      	subs	r2, r2, r3
   80e10:	f022 0203 	bic.w	r2, r2, #3
   80e14:	441a      	add	r2, r3
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80e16:	3b04      	subs	r3, #4
		*pDest++ = 0;
   80e18:	2100      	movs	r1, #0
   80e1a:	f843 1b04 	str.w	r1, [r3], #4
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80e1e:	4293      	cmp	r3, r2
   80e20:	d1fb      	bne.n	80e1a <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80e22:	4b12      	ldr	r3, [pc, #72]	; (80e6c <Reset_Handler+0x9c>)
   80e24:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   80e28:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   80e2c:	4910      	ldr	r1, [pc, #64]	; (80e70 <Reset_Handler+0xa0>)
   80e2e:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < IRAM0_ADDR + IRAM_SIZE)) {
   80e30:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   80e34:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
   80e38:	d203      	bcs.n	80e42 <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   80e3a:	688b      	ldr	r3, [r1, #8]
   80e3c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   80e40:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   80e42:	4b0c      	ldr	r3, [pc, #48]	; (80e74 <Reset_Handler+0xa4>)
   80e44:	4798      	blx	r3

	/* Branch to main function */
	main();
   80e46:	4b0c      	ldr	r3, [pc, #48]	; (80e78 <Reset_Handler+0xa8>)
   80e48:	4798      	blx	r3
   80e4a:	e7fe      	b.n	80e4a <Reset_Handler+0x7a>
   80e4c:	20000000 	.word	0x20000000
   80e50:	00083854 	.word	0x00083854
   80e54:	20000548 	.word	0x20000548
   80e58:	20000848 	.word	0x20000848
   80e5c:	20000548 	.word	0x20000548
   80e60:	20000547 	.word	0x20000547
   80e64:	2000054c 	.word	0x2000054c
   80e68:	2000084b 	.word	0x2000084b
   80e6c:	00080000 	.word	0x00080000
   80e70:	e000ed00 	.word	0xe000ed00
   80e74:	00083511 	.word	0x00083511
   80e78:	000817e5 	.word	0x000817e5

00080e7c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   80e7c:	4b3e      	ldr	r3, [pc, #248]	; (80f78 <SystemCoreClockUpdate+0xfc>)
   80e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80e80:	f003 0303 	and.w	r3, r3, #3
   80e84:	2b03      	cmp	r3, #3
   80e86:	d85f      	bhi.n	80f48 <SystemCoreClockUpdate+0xcc>
   80e88:	e8df f003 	tbb	[pc, r3]
   80e8c:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   80e90:	4b3a      	ldr	r3, [pc, #232]	; (80f7c <SystemCoreClockUpdate+0x100>)
   80e92:	695b      	ldr	r3, [r3, #20]
   80e94:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   80e98:	bf14      	ite	ne
   80e9a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   80e9e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   80ea2:	4b37      	ldr	r3, [pc, #220]	; (80f80 <SystemCoreClockUpdate+0x104>)
   80ea4:	601a      	str	r2, [r3, #0]
   80ea6:	e04f      	b.n	80f48 <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80ea8:	4b33      	ldr	r3, [pc, #204]	; (80f78 <SystemCoreClockUpdate+0xfc>)
   80eaa:	6a1b      	ldr	r3, [r3, #32]
   80eac:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80eb0:	d003      	beq.n	80eba <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80eb2:	4a34      	ldr	r2, [pc, #208]	; (80f84 <SystemCoreClockUpdate+0x108>)
   80eb4:	4b32      	ldr	r3, [pc, #200]	; (80f80 <SystemCoreClockUpdate+0x104>)
   80eb6:	601a      	str	r2, [r3, #0]
   80eb8:	e046      	b.n	80f48 <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80eba:	4a33      	ldr	r2, [pc, #204]	; (80f88 <SystemCoreClockUpdate+0x10c>)
   80ebc:	4b30      	ldr	r3, [pc, #192]	; (80f80 <SystemCoreClockUpdate+0x104>)
   80ebe:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80ec0:	4b2d      	ldr	r3, [pc, #180]	; (80f78 <SystemCoreClockUpdate+0xfc>)
   80ec2:	6a1b      	ldr	r3, [r3, #32]
   80ec4:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80ec8:	2b10      	cmp	r3, #16
   80eca:	d002      	beq.n	80ed2 <SystemCoreClockUpdate+0x56>
   80ecc:	2b20      	cmp	r3, #32
   80ece:	d004      	beq.n	80eda <SystemCoreClockUpdate+0x5e>
   80ed0:	e03a      	b.n	80f48 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80ed2:	4a2e      	ldr	r2, [pc, #184]	; (80f8c <SystemCoreClockUpdate+0x110>)
   80ed4:	4b2a      	ldr	r3, [pc, #168]	; (80f80 <SystemCoreClockUpdate+0x104>)
   80ed6:	601a      	str	r2, [r3, #0]
				break;
   80ed8:	e036      	b.n	80f48 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80eda:	4a2a      	ldr	r2, [pc, #168]	; (80f84 <SystemCoreClockUpdate+0x108>)
   80edc:	4b28      	ldr	r3, [pc, #160]	; (80f80 <SystemCoreClockUpdate+0x104>)
   80ede:	601a      	str	r2, [r3, #0]
				break;
   80ee0:	e032      	b.n	80f48 <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80ee2:	4b25      	ldr	r3, [pc, #148]	; (80f78 <SystemCoreClockUpdate+0xfc>)
   80ee4:	6a1b      	ldr	r3, [r3, #32]
   80ee6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80eea:	d003      	beq.n	80ef4 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80eec:	4a25      	ldr	r2, [pc, #148]	; (80f84 <SystemCoreClockUpdate+0x108>)
   80eee:	4b24      	ldr	r3, [pc, #144]	; (80f80 <SystemCoreClockUpdate+0x104>)
   80ef0:	601a      	str	r2, [r3, #0]
   80ef2:	e012      	b.n	80f1a <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80ef4:	4a24      	ldr	r2, [pc, #144]	; (80f88 <SystemCoreClockUpdate+0x10c>)
   80ef6:	4b22      	ldr	r3, [pc, #136]	; (80f80 <SystemCoreClockUpdate+0x104>)
   80ef8:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80efa:	4b1f      	ldr	r3, [pc, #124]	; (80f78 <SystemCoreClockUpdate+0xfc>)
   80efc:	6a1b      	ldr	r3, [r3, #32]
   80efe:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80f02:	2b10      	cmp	r3, #16
   80f04:	d002      	beq.n	80f0c <SystemCoreClockUpdate+0x90>
   80f06:	2b20      	cmp	r3, #32
   80f08:	d004      	beq.n	80f14 <SystemCoreClockUpdate+0x98>
   80f0a:	e006      	b.n	80f1a <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80f0c:	4a1f      	ldr	r2, [pc, #124]	; (80f8c <SystemCoreClockUpdate+0x110>)
   80f0e:	4b1c      	ldr	r3, [pc, #112]	; (80f80 <SystemCoreClockUpdate+0x104>)
   80f10:	601a      	str	r2, [r3, #0]
				break;
   80f12:	e002      	b.n	80f1a <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80f14:	4a1b      	ldr	r2, [pc, #108]	; (80f84 <SystemCoreClockUpdate+0x108>)
   80f16:	4b1a      	ldr	r3, [pc, #104]	; (80f80 <SystemCoreClockUpdate+0x104>)
   80f18:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   80f1a:	4b17      	ldr	r3, [pc, #92]	; (80f78 <SystemCoreClockUpdate+0xfc>)
   80f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80f1e:	f003 0303 	and.w	r3, r3, #3
   80f22:	2b02      	cmp	r3, #2
   80f24:	d10d      	bne.n	80f42 <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80f26:	4a14      	ldr	r2, [pc, #80]	; (80f78 <SystemCoreClockUpdate+0xfc>)
   80f28:	6a93      	ldr	r3, [r2, #40]	; 0x28
				                          CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >>
   80f2a:	6a92      	ldr	r2, [r2, #40]	; 0x28
   80f2c:	4814      	ldr	r0, [pc, #80]	; (80f80 <SystemCoreClockUpdate+0x104>)
   80f2e:	f3c3 410a 	ubfx	r1, r3, #16, #11
   80f32:	6803      	ldr	r3, [r0, #0]
   80f34:	fb01 3303 	mla	r3, r1, r3, r3
   80f38:	b2d2      	uxtb	r2, r2
   80f3a:	fbb3 f3f2 	udiv	r3, r3, r2
   80f3e:	6003      	str	r3, [r0, #0]
   80f40:	e002      	b.n	80f48 <SystemCoreClockUpdate+0xcc>
				                           CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   80f42:	4a13      	ldr	r2, [pc, #76]	; (80f90 <SystemCoreClockUpdate+0x114>)
   80f44:	4b0e      	ldr	r3, [pc, #56]	; (80f80 <SystemCoreClockUpdate+0x104>)
   80f46:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   80f48:	4b0b      	ldr	r3, [pc, #44]	; (80f78 <SystemCoreClockUpdate+0xfc>)
   80f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80f4c:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80f50:	2b70      	cmp	r3, #112	; 0x70
   80f52:	d107      	bne.n	80f64 <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   80f54:	4a0a      	ldr	r2, [pc, #40]	; (80f80 <SystemCoreClockUpdate+0x104>)
   80f56:	6813      	ldr	r3, [r2, #0]
   80f58:	490e      	ldr	r1, [pc, #56]	; (80f94 <SystemCoreClockUpdate+0x118>)
   80f5a:	fba1 1303 	umull	r1, r3, r1, r3
   80f5e:	085b      	lsrs	r3, r3, #1
   80f60:	6013      	str	r3, [r2, #0]
   80f62:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   80f64:	4b04      	ldr	r3, [pc, #16]	; (80f78 <SystemCoreClockUpdate+0xfc>)
   80f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80f68:	4905      	ldr	r1, [pc, #20]	; (80f80 <SystemCoreClockUpdate+0x104>)
   80f6a:	f3c3 1202 	ubfx	r2, r3, #4, #3
   80f6e:	680b      	ldr	r3, [r1, #0]
   80f70:	40d3      	lsrs	r3, r2
   80f72:	600b      	str	r3, [r1, #0]
   80f74:	4770      	bx	lr
   80f76:	bf00      	nop
   80f78:	400e0400 	.word	0x400e0400
   80f7c:	400e1210 	.word	0x400e1210
   80f80:	20000118 	.word	0x20000118
   80f84:	00b71b00 	.word	0x00b71b00
   80f88:	003d0900 	.word	0x003d0900
   80f8c:	007a1200 	.word	0x007a1200
   80f90:	0e4e1c00 	.word	0x0e4e1c00
   80f94:	aaaaaaab 	.word	0xaaaaaaab

00080f98 <SysTick_Handler>:
	} Point;
	
 Point p1, p2, p3, p4, p5, p6, p7, p8;
 Point r1, r2, r3, r4, r5, r6, r7, r8;
void SysTick_Handler(void) {
	g_ul_ms_ticks++;
   80f98:	4a02      	ldr	r2, [pc, #8]	; (80fa4 <SysTick_Handler+0xc>)
   80f9a:	6813      	ldr	r3, [r2, #0]
   80f9c:	3301      	adds	r3, #1
   80f9e:	6013      	str	r3, [r2, #0]
   80fa0:	4770      	bx	lr
   80fa2:	bf00      	nop
   80fa4:	200007b4 	.word	0x200007b4

00080fa8 <persx>:
	return result_color;
}

static short d;

short persx(Point p) {
   80fa8:	b510      	push	{r4, lr}
   80faa:	b082      	sub	sp, #8
   80fac:	ab02      	add	r3, sp, #8
   80fae:	e903 0003 	stmdb	r3, {r0, r1}
	return TOFLT(FADD(TOFIX(120, Q4), FDIV(FMUL(p.x, d, Q4), FADD(p.z, d), Q4)), Q4);
   80fb2:	4b0d      	ldr	r3, [pc, #52]	; (80fe8 <persx+0x40>)
   80fb4:	f9b3 2000 	ldrsh.w	r2, [r3]
   80fb8:	f9bd 0000 	ldrsh.w	r0, [sp]
   80fbc:	fb02 f000 	mul.w	r0, r2, r0
   80fc0:	f020 030f 	bic.w	r3, r0, #15
   80fc4:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
   80fc8:	4410      	add	r0, r2
   80fca:	fb93 f0f0 	sdiv	r0, r3, r0
   80fce:	f500 60f0 	add.w	r0, r0, #1920	; 0x780
   80fd2:	4b06      	ldr	r3, [pc, #24]	; (80fec <persx+0x44>)
   80fd4:	4798      	blx	r3
   80fd6:	2200      	movs	r2, #0
   80fd8:	4b05      	ldr	r3, [pc, #20]	; (80ff0 <persx+0x48>)
   80fda:	4c06      	ldr	r4, [pc, #24]	; (80ff4 <persx+0x4c>)
   80fdc:	47a0      	blx	r4
   80fde:	4b06      	ldr	r3, [pc, #24]	; (80ff8 <persx+0x50>)
   80fe0:	4798      	blx	r3
}
   80fe2:	b200      	sxth	r0, r0
   80fe4:	b002      	add	sp, #8
   80fe6:	bd10      	pop	{r4, pc}
   80fe8:	200007b8 	.word	0x200007b8
   80fec:	00082ec1 	.word	0x00082ec1
   80ff0:	3fb00000 	.word	0x3fb00000
   80ff4:	00082f8d 	.word	0x00082f8d
   80ff8:	000834c1 	.word	0x000834c1

00080ffc <persy>:

short persy(Point p) {
   80ffc:	b510      	push	{r4, lr}
   80ffe:	b082      	sub	sp, #8
   81000:	ab02      	add	r3, sp, #8
   81002:	e903 0003 	stmdb	r3, {r0, r1}
	return TOFLT(FADD(TOFIX(150, Q4), FDIV(FMUL(p.y, d, Q4), FADD(p.z, d), Q4)), Q4);
   81006:	4b0d      	ldr	r3, [pc, #52]	; (8103c <persy+0x40>)
   81008:	f9b3 2000 	ldrsh.w	r2, [r3]
   8100c:	f9bd 0002 	ldrsh.w	r0, [sp, #2]
   81010:	fb02 f000 	mul.w	r0, r2, r0
   81014:	f020 030f 	bic.w	r3, r0, #15
   81018:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
   8101c:	4410      	add	r0, r2
   8101e:	fb93 f0f0 	sdiv	r0, r3, r0
   81022:	f500 6016 	add.w	r0, r0, #2400	; 0x960
   81026:	4b06      	ldr	r3, [pc, #24]	; (81040 <persy+0x44>)
   81028:	4798      	blx	r3
   8102a:	2200      	movs	r2, #0
   8102c:	4b05      	ldr	r3, [pc, #20]	; (81044 <persy+0x48>)
   8102e:	4c06      	ldr	r4, [pc, #24]	; (81048 <persy+0x4c>)
   81030:	47a0      	blx	r4
   81032:	4b06      	ldr	r3, [pc, #24]	; (8104c <persy+0x50>)
   81034:	4798      	blx	r3
}
   81036:	b200      	sxth	r0, r0
   81038:	b002      	add	sp, #8
   8103a:	bd10      	pop	{r4, pc}
   8103c:	200007b8 	.word	0x200007b8
   81040:	00082ec1 	.word	0x00082ec1
   81044:	3fb00000 	.word	0x3fb00000
   81048:	00082f8d 	.word	0x00082f8d
   8104c:	000834c1 	.word	0x000834c1

00081050 <printCube>:

void printCube() {
   81050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81054:	b085      	sub	sp, #20
	
	hx8347a_set_foreground_color(rgb24_to_rgb16(COLOR_WHITE));
   81056:	f64f 70ff 	movw	r0, #65535	; 0xffff
   8105a:	4cb3      	ldr	r4, [pc, #716]	; (81328 <printCube+0x2d8>)
   8105c:	47a0      	blx	r4
	hx8347a_draw_filled_rectangle(0, 0, 240, 320);
   8105e:	f44f 73a0 	mov.w	r3, #320	; 0x140
   81062:	22f0      	movs	r2, #240	; 0xf0
   81064:	2100      	movs	r1, #0
   81066:	4608      	mov	r0, r1
   81068:	4db0      	ldr	r5, [pc, #704]	; (8132c <printCube+0x2dc>)
   8106a:	47a8      	blx	r5
	
	hx8347a_set_foreground_color(rgb24_to_rgb16(COLOR_RED));
   8106c:	f44f 4078 	mov.w	r0, #63488	; 0xf800
   81070:	47a0      	blx	r4
	
	//front
	hx8347a_draw_line(persx(p1), persy(p1), persx(p2), persy(p2));
   81072:	4baf      	ldr	r3, [pc, #700]	; (81330 <printCube+0x2e0>)
   81074:	681e      	ldr	r6, [r3, #0]
   81076:	889c      	ldrh	r4, [r3, #4]
   81078:	4630      	mov	r0, r6
   8107a:	4621      	mov	r1, r4
   8107c:	4dad      	ldr	r5, [pc, #692]	; (81334 <printCube+0x2e4>)
   8107e:	47a8      	blx	r5
   81080:	4680      	mov	r8, r0
   81082:	4630      	mov	r0, r6
   81084:	4621      	mov	r1, r4
   81086:	4cac      	ldr	r4, [pc, #688]	; (81338 <printCube+0x2e8>)
   81088:	47a0      	blx	r4
   8108a:	4681      	mov	r9, r0
   8108c:	4bab      	ldr	r3, [pc, #684]	; (8133c <printCube+0x2ec>)
   8108e:	681f      	ldr	r7, [r3, #0]
   81090:	889e      	ldrh	r6, [r3, #4]
   81092:	4638      	mov	r0, r7
   81094:	4631      	mov	r1, r6
   81096:	47a8      	blx	r5
   81098:	4682      	mov	sl, r0
   8109a:	4638      	mov	r0, r7
   8109c:	4631      	mov	r1, r6
   8109e:	47a0      	blx	r4
   810a0:	4603      	mov	r3, r0
   810a2:	4652      	mov	r2, sl
   810a4:	4649      	mov	r1, r9
   810a6:	4640      	mov	r0, r8
   810a8:	4ea5      	ldr	r6, [pc, #660]	; (81340 <printCube+0x2f0>)
   810aa:	47b0      	blx	r6
	hx8347a_draw_line(persx(p2), persy(p2), persx(p3), persy(p3));
   810ac:	4ba3      	ldr	r3, [pc, #652]	; (8133c <printCube+0x2ec>)
   810ae:	f8d3 8000 	ldr.w	r8, [r3]
   810b2:	889f      	ldrh	r7, [r3, #4]
   810b4:	4640      	mov	r0, r8
   810b6:	4639      	mov	r1, r7
   810b8:	47a8      	blx	r5
   810ba:	4681      	mov	r9, r0
   810bc:	4640      	mov	r0, r8
   810be:	4639      	mov	r1, r7
   810c0:	47a0      	blx	r4
   810c2:	4682      	mov	sl, r0
   810c4:	4b9f      	ldr	r3, [pc, #636]	; (81344 <printCube+0x2f4>)
   810c6:	f8d3 8000 	ldr.w	r8, [r3]
   810ca:	889f      	ldrh	r7, [r3, #4]
   810cc:	4640      	mov	r0, r8
   810ce:	4639      	mov	r1, r7
   810d0:	47a8      	blx	r5
   810d2:	4683      	mov	fp, r0
   810d4:	4640      	mov	r0, r8
   810d6:	4639      	mov	r1, r7
   810d8:	47a0      	blx	r4
   810da:	4603      	mov	r3, r0
   810dc:	465a      	mov	r2, fp
   810de:	4651      	mov	r1, sl
   810e0:	4648      	mov	r0, r9
   810e2:	47b0      	blx	r6
	hx8347a_draw_line(persx(p3), persy(p3), persx(p4), persy(p4));
   810e4:	4b97      	ldr	r3, [pc, #604]	; (81344 <printCube+0x2f4>)
   810e6:	f8d3 8000 	ldr.w	r8, [r3]
   810ea:	889f      	ldrh	r7, [r3, #4]
   810ec:	4640      	mov	r0, r8
   810ee:	4639      	mov	r1, r7
   810f0:	47a8      	blx	r5
   810f2:	9001      	str	r0, [sp, #4]
   810f4:	4640      	mov	r0, r8
   810f6:	4639      	mov	r1, r7
   810f8:	47a0      	blx	r4
   810fa:	4682      	mov	sl, r0
   810fc:	f8df 9250 	ldr.w	r9, [pc, #592]	; 81350 <printCube+0x300>
   81100:	f8d9 8000 	ldr.w	r8, [r9]
   81104:	f8b9 7004 	ldrh.w	r7, [r9, #4]
   81108:	4640      	mov	r0, r8
   8110a:	4639      	mov	r1, r7
   8110c:	47a8      	blx	r5
   8110e:	4683      	mov	fp, r0
   81110:	4640      	mov	r0, r8
   81112:	4639      	mov	r1, r7
   81114:	47a0      	blx	r4
   81116:	4603      	mov	r3, r0
   81118:	465a      	mov	r2, fp
   8111a:	4651      	mov	r1, sl
   8111c:	9801      	ldr	r0, [sp, #4]
   8111e:	47b0      	blx	r6
	hx8347a_draw_line(persx(p4), persy(p4), persx(p1), persy(p1));
   81120:	f8d9 8000 	ldr.w	r8, [r9]
   81124:	f8b9 7004 	ldrh.w	r7, [r9, #4]
   81128:	4640      	mov	r0, r8
   8112a:	4639      	mov	r1, r7
   8112c:	47a8      	blx	r5
   8112e:	9001      	str	r0, [sp, #4]
   81130:	4640      	mov	r0, r8
   81132:	4639      	mov	r1, r7
   81134:	47a0      	blx	r4
   81136:	4682      	mov	sl, r0
   81138:	4b7d      	ldr	r3, [pc, #500]	; (81330 <printCube+0x2e0>)
   8113a:	f8d3 8000 	ldr.w	r8, [r3]
   8113e:	889f      	ldrh	r7, [r3, #4]
   81140:	4640      	mov	r0, r8
   81142:	4639      	mov	r1, r7
   81144:	47a8      	blx	r5
   81146:	4683      	mov	fp, r0
   81148:	4640      	mov	r0, r8
   8114a:	4639      	mov	r1, r7
   8114c:	47a0      	blx	r4
   8114e:	4603      	mov	r3, r0
   81150:	465a      	mov	r2, fp
   81152:	4651      	mov	r1, sl
   81154:	9801      	ldr	r0, [sp, #4]
   81156:	47b0      	blx	r6

	//back
	hx8347a_draw_line(persx(p5), persy(p5), persx(p6), persy(p6));
   81158:	4b7b      	ldr	r3, [pc, #492]	; (81348 <printCube+0x2f8>)
   8115a:	f8d3 8000 	ldr.w	r8, [r3]
   8115e:	889f      	ldrh	r7, [r3, #4]
   81160:	4640      	mov	r0, r8
   81162:	4639      	mov	r1, r7
   81164:	47a8      	blx	r5
   81166:	9001      	str	r0, [sp, #4]
   81168:	4640      	mov	r0, r8
   8116a:	4639      	mov	r1, r7
   8116c:	47a0      	blx	r4
   8116e:	4682      	mov	sl, r0
   81170:	4b76      	ldr	r3, [pc, #472]	; (8134c <printCube+0x2fc>)
   81172:	f8d3 8000 	ldr.w	r8, [r3]
   81176:	889f      	ldrh	r7, [r3, #4]
   81178:	4640      	mov	r0, r8
   8117a:	4639      	mov	r1, r7
   8117c:	47a8      	blx	r5
   8117e:	4683      	mov	fp, r0
   81180:	4640      	mov	r0, r8
   81182:	4639      	mov	r1, r7
   81184:	47a0      	blx	r4
   81186:	4603      	mov	r3, r0
   81188:	465a      	mov	r2, fp
   8118a:	4651      	mov	r1, sl
   8118c:	9801      	ldr	r0, [sp, #4]
   8118e:	47b0      	blx	r6
	hx8347a_draw_line(persx(p6), persy(p6), persx(p7), persy(p7));
   81190:	4b6e      	ldr	r3, [pc, #440]	; (8134c <printCube+0x2fc>)
   81192:	f8d3 8000 	ldr.w	r8, [r3]
   81196:	889f      	ldrh	r7, [r3, #4]
   81198:	4640      	mov	r0, r8
   8119a:	4639      	mov	r1, r7
   8119c:	47a8      	blx	r5
   8119e:	9001      	str	r0, [sp, #4]
   811a0:	4640      	mov	r0, r8
   811a2:	4639      	mov	r1, r7
   811a4:	47a0      	blx	r4
   811a6:	4683      	mov	fp, r0
   811a8:	f8df a1a8 	ldr.w	sl, [pc, #424]	; 81354 <printCube+0x304>
   811ac:	f8da 8000 	ldr.w	r8, [sl]
   811b0:	f8ba 7004 	ldrh.w	r7, [sl, #4]
   811b4:	4640      	mov	r0, r8
   811b6:	4639      	mov	r1, r7
   811b8:	47a8      	blx	r5
   811ba:	9002      	str	r0, [sp, #8]
   811bc:	4640      	mov	r0, r8
   811be:	4639      	mov	r1, r7
   811c0:	47a0      	blx	r4
   811c2:	4603      	mov	r3, r0
   811c4:	9a02      	ldr	r2, [sp, #8]
   811c6:	4659      	mov	r1, fp
   811c8:	9801      	ldr	r0, [sp, #4]
   811ca:	47b0      	blx	r6
	hx8347a_draw_line(persx(p7), persy(p7), persx(p8), persy(p8));
   811cc:	f8da 8000 	ldr.w	r8, [sl]
   811d0:	f8ba 7004 	ldrh.w	r7, [sl, #4]
   811d4:	4640      	mov	r0, r8
   811d6:	4639      	mov	r1, r7
   811d8:	47a8      	blx	r5
   811da:	9001      	str	r0, [sp, #4]
   811dc:	4640      	mov	r0, r8
   811de:	4639      	mov	r1, r7
   811e0:	47a0      	blx	r4
   811e2:	9002      	str	r0, [sp, #8]
   811e4:	f8df b170 	ldr.w	fp, [pc, #368]	; 81358 <printCube+0x308>
   811e8:	f8db 8000 	ldr.w	r8, [fp]
   811ec:	f8bb 7004 	ldrh.w	r7, [fp, #4]
   811f0:	4640      	mov	r0, r8
   811f2:	4639      	mov	r1, r7
   811f4:	47a8      	blx	r5
   811f6:	9003      	str	r0, [sp, #12]
   811f8:	4640      	mov	r0, r8
   811fa:	4639      	mov	r1, r7
   811fc:	47a0      	blx	r4
   811fe:	4603      	mov	r3, r0
   81200:	9a03      	ldr	r2, [sp, #12]
   81202:	9902      	ldr	r1, [sp, #8]
   81204:	9801      	ldr	r0, [sp, #4]
   81206:	47b0      	blx	r6
	hx8347a_draw_line(persx(p8), persy(p8), persx(p5), persy(p5));
   81208:	f8db 8000 	ldr.w	r8, [fp]
   8120c:	f8bb 7004 	ldrh.w	r7, [fp, #4]
   81210:	4640      	mov	r0, r8
   81212:	4639      	mov	r1, r7
   81214:	47a8      	blx	r5
   81216:	9001      	str	r0, [sp, #4]
   81218:	4640      	mov	r0, r8
   8121a:	4639      	mov	r1, r7
   8121c:	47a0      	blx	r4
   8121e:	9002      	str	r0, [sp, #8]
   81220:	4b49      	ldr	r3, [pc, #292]	; (81348 <printCube+0x2f8>)
   81222:	f8d3 8000 	ldr.w	r8, [r3]
   81226:	889f      	ldrh	r7, [r3, #4]
   81228:	4640      	mov	r0, r8
   8122a:	4639      	mov	r1, r7
   8122c:	47a8      	blx	r5
   8122e:	9003      	str	r0, [sp, #12]
   81230:	4640      	mov	r0, r8
   81232:	4639      	mov	r1, r7
   81234:	47a0      	blx	r4
   81236:	4603      	mov	r3, r0
   81238:	9a03      	ldr	r2, [sp, #12]
   8123a:	9902      	ldr	r1, [sp, #8]
   8123c:	9801      	ldr	r0, [sp, #4]
   8123e:	47b0      	blx	r6
	
	//sides
	hx8347a_draw_line(persx(p1), persy(p1), persx(p5), persy(p5));
   81240:	4b3b      	ldr	r3, [pc, #236]	; (81330 <printCube+0x2e0>)
   81242:	681f      	ldr	r7, [r3, #0]
   81244:	f8b3 8004 	ldrh.w	r8, [r3, #4]
   81248:	4638      	mov	r0, r7
   8124a:	4641      	mov	r1, r8
   8124c:	47a8      	blx	r5
   8124e:	9001      	str	r0, [sp, #4]
   81250:	4638      	mov	r0, r7
   81252:	4641      	mov	r1, r8
   81254:	47a0      	blx	r4
   81256:	9002      	str	r0, [sp, #8]
   81258:	4b3b      	ldr	r3, [pc, #236]	; (81348 <printCube+0x2f8>)
   8125a:	f8d3 8000 	ldr.w	r8, [r3]
   8125e:	889f      	ldrh	r7, [r3, #4]
   81260:	4640      	mov	r0, r8
   81262:	4639      	mov	r1, r7
   81264:	47a8      	blx	r5
   81266:	9003      	str	r0, [sp, #12]
   81268:	4640      	mov	r0, r8
   8126a:	4639      	mov	r1, r7
   8126c:	47a0      	blx	r4
   8126e:	4603      	mov	r3, r0
   81270:	9a03      	ldr	r2, [sp, #12]
   81272:	9902      	ldr	r1, [sp, #8]
   81274:	9801      	ldr	r0, [sp, #4]
   81276:	47b0      	blx	r6
	hx8347a_draw_line(persx(p2), persy(p2), persx(p6), persy(p6));
   81278:	4b30      	ldr	r3, [pc, #192]	; (8133c <printCube+0x2ec>)
   8127a:	f8d3 8000 	ldr.w	r8, [r3]
   8127e:	889f      	ldrh	r7, [r3, #4]
   81280:	4640      	mov	r0, r8
   81282:	4639      	mov	r1, r7
   81284:	47a8      	blx	r5
   81286:	9001      	str	r0, [sp, #4]
   81288:	4640      	mov	r0, r8
   8128a:	4639      	mov	r1, r7
   8128c:	47a0      	blx	r4
   8128e:	9002      	str	r0, [sp, #8]
   81290:	4b2e      	ldr	r3, [pc, #184]	; (8134c <printCube+0x2fc>)
   81292:	f8d3 8000 	ldr.w	r8, [r3]
   81296:	889f      	ldrh	r7, [r3, #4]
   81298:	4640      	mov	r0, r8
   8129a:	4639      	mov	r1, r7
   8129c:	47a8      	blx	r5
   8129e:	9003      	str	r0, [sp, #12]
   812a0:	4640      	mov	r0, r8
   812a2:	4639      	mov	r1, r7
   812a4:	47a0      	blx	r4
   812a6:	4603      	mov	r3, r0
   812a8:	9a03      	ldr	r2, [sp, #12]
   812aa:	9902      	ldr	r1, [sp, #8]
   812ac:	9801      	ldr	r0, [sp, #4]
   812ae:	47b0      	blx	r6
	hx8347a_draw_line(persx(p3), persy(p3), persx(p7), persy(p7));
   812b0:	4b24      	ldr	r3, [pc, #144]	; (81344 <printCube+0x2f4>)
   812b2:	681f      	ldr	r7, [r3, #0]
   812b4:	f8b3 8004 	ldrh.w	r8, [r3, #4]
   812b8:	4638      	mov	r0, r7
   812ba:	4641      	mov	r1, r8
   812bc:	47a8      	blx	r5
   812be:	9001      	str	r0, [sp, #4]
   812c0:	4638      	mov	r0, r7
   812c2:	4641      	mov	r1, r8
   812c4:	47a0      	blx	r4
   812c6:	9002      	str	r0, [sp, #8]
   812c8:	f8da 8000 	ldr.w	r8, [sl]
   812cc:	f8ba 7004 	ldrh.w	r7, [sl, #4]
   812d0:	4640      	mov	r0, r8
   812d2:	4639      	mov	r1, r7
   812d4:	47a8      	blx	r5
   812d6:	4682      	mov	sl, r0
   812d8:	4640      	mov	r0, r8
   812da:	4639      	mov	r1, r7
   812dc:	47a0      	blx	r4
   812de:	4603      	mov	r3, r0
   812e0:	4652      	mov	r2, sl
   812e2:	9902      	ldr	r1, [sp, #8]
   812e4:	9801      	ldr	r0, [sp, #4]
   812e6:	47b0      	blx	r6
	hx8347a_draw_line(persx(p4), persy(p4), persx(p8), persy(p8));
   812e8:	f8d9 8000 	ldr.w	r8, [r9]
   812ec:	f8b9 7004 	ldrh.w	r7, [r9, #4]
   812f0:	4640      	mov	r0, r8
   812f2:	4639      	mov	r1, r7
   812f4:	47a8      	blx	r5
   812f6:	4681      	mov	r9, r0
   812f8:	4640      	mov	r0, r8
   812fa:	4639      	mov	r1, r7
   812fc:	47a0      	blx	r4
   812fe:	4682      	mov	sl, r0
   81300:	f8db 8000 	ldr.w	r8, [fp]
   81304:	f8bb 7004 	ldrh.w	r7, [fp, #4]
   81308:	4640      	mov	r0, r8
   8130a:	4639      	mov	r1, r7
   8130c:	47a8      	blx	r5
   8130e:	4605      	mov	r5, r0
   81310:	4640      	mov	r0, r8
   81312:	4639      	mov	r1, r7
   81314:	47a0      	blx	r4
   81316:	4603      	mov	r3, r0
   81318:	462a      	mov	r2, r5
   8131a:	4651      	mov	r1, sl
   8131c:	4648      	mov	r0, r9
   8131e:	47b0      	blx	r6
}
   81320:	b005      	add	sp, #20
   81322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81326:	bf00      	nop
   81328:	000802b9 	.word	0x000802b9
   8132c:	000805b1 	.word	0x000805b1
   81330:	200007ec 	.word	0x200007ec
   81334:	00080fa9 	.word	0x00080fa9
   81338:	00080ffd 	.word	0x00080ffd
   8133c:	200007bc 	.word	0x200007bc
   81340:	00080669 	.word	0x00080669
   81344:	20000828 	.word	0x20000828
   81348:	200007e4 	.word	0x200007e4
   8134c:	200007fc 	.word	0x200007fc
   81350:	20000830 	.word	0x20000830
   81354:	200007c4 	.word	0x200007c4
   81358:	200007f4 	.word	0x200007f4

0008135c <calc_in_x>:

void calc_in_x(Point *t, Point *p, double alpha) {
   8135c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81360:	4606      	mov	r6, r0
   81362:	460d      	mov	r5, r1
   81364:	4690      	mov	r8, r2
   81366:	4699      	mov	r9, r3
	p->x = t->x;
   81368:	f9b0 3000 	ldrsh.w	r3, [r0]
   8136c:	800b      	strh	r3, [r1, #0]
	p->y = FSUB(FMULG(t->y, TOFIX(cos(alpha), Q8), Q4, Q8, Q4) , FMULG(t->z, TOFIX(sin(alpha), Q8), Q4, Q8, Q4));
   8136e:	4610      	mov	r0, r2
   81370:	4649      	mov	r1, r9
   81372:	4b16      	ldr	r3, [pc, #88]	; (813cc <calc_in_x+0x70>)
   81374:	4798      	blx	r3
   81376:	f8df a064 	ldr.w	sl, [pc, #100]	; 813dc <calc_in_x+0x80>
   8137a:	2200      	movs	r2, #0
   8137c:	4b14      	ldr	r3, [pc, #80]	; (813d0 <calc_in_x+0x74>)
   8137e:	47d0      	blx	sl
   81380:	4f14      	ldr	r7, [pc, #80]	; (813d4 <calc_in_x+0x78>)
   81382:	47b8      	blx	r7
   81384:	4604      	mov	r4, r0
   81386:	4640      	mov	r0, r8
   81388:	4649      	mov	r1, r9
   8138a:	4b13      	ldr	r3, [pc, #76]	; (813d8 <calc_in_x+0x7c>)
   8138c:	4798      	blx	r3
   8138e:	2200      	movs	r2, #0
   81390:	4b0f      	ldr	r3, [pc, #60]	; (813d0 <calc_in_x+0x74>)
   81392:	47d0      	blx	sl
   81394:	47b8      	blx	r7
   81396:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
   8139a:	fb04 f203 	mul.w	r2, r4, r3
   8139e:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
   813a2:	fb00 f303 	mul.w	r3, r0, r3
   813a6:	111b      	asrs	r3, r3, #4
   813a8:	ebc3 1322 	rsb	r3, r3, r2, asr #4
   813ac:	806b      	strh	r3, [r5, #2]
	p->z = FADD(FMULG(t->y, TOFIX(sin(alpha), Q8), Q4, Q8, Q4) , FMULG(t->z, TOFIX(cos(alpha), Q8), Q4, Q8, Q4));
   813ae:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
   813b2:	fb00 f003 	mul.w	r0, r0, r3
   813b6:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
   813ba:	fb04 f403 	mul.w	r4, r4, r3
   813be:	1124      	asrs	r4, r4, #4
   813c0:	eb04 1020 	add.w	r0, r4, r0, asr #4
   813c4:	80a8      	strh	r0, [r5, #4]
   813c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   813ca:	bf00      	nop
   813cc:	00081911 	.word	0x00081911
   813d0:	40300000 	.word	0x40300000
   813d4:	000834c1 	.word	0x000834c1
   813d8:	000819a1 	.word	0x000819a1
   813dc:	00082f8d 	.word	0x00082f8d

000813e0 <calc_in_y>:
}


void calc_in_y(Point *t, Point *p, double alpha) {
   813e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   813e4:	4606      	mov	r6, r0
   813e6:	460d      	mov	r5, r1
   813e8:	4690      	mov	r8, r2
   813ea:	4699      	mov	r9, r3
	p->x = FADD(FMULG(t->z, TOFIX(sin(alpha), Q8), Q4, Q8, Q4) , FMULG(t->x, TOFIX(cos(alpha), Q8), Q4, Q8, Q4));
   813ec:	4610      	mov	r0, r2
   813ee:	4619      	mov	r1, r3
   813f0:	4b17      	ldr	r3, [pc, #92]	; (81450 <calc_in_y+0x70>)
   813f2:	4798      	blx	r3
   813f4:	f8df a068 	ldr.w	sl, [pc, #104]	; 81460 <calc_in_y+0x80>
   813f8:	2200      	movs	r2, #0
   813fa:	4b16      	ldr	r3, [pc, #88]	; (81454 <calc_in_y+0x74>)
   813fc:	47d0      	blx	sl
   813fe:	4f16      	ldr	r7, [pc, #88]	; (81458 <calc_in_y+0x78>)
   81400:	47b8      	blx	r7
   81402:	4604      	mov	r4, r0
   81404:	4640      	mov	r0, r8
   81406:	4649      	mov	r1, r9
   81408:	4b14      	ldr	r3, [pc, #80]	; (8145c <calc_in_y+0x7c>)
   8140a:	4798      	blx	r3
   8140c:	2200      	movs	r2, #0
   8140e:	4b11      	ldr	r3, [pc, #68]	; (81454 <calc_in_y+0x74>)
   81410:	47d0      	blx	sl
   81412:	47b8      	blx	r7
   81414:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
   81418:	fb04 f203 	mul.w	r2, r4, r3
   8141c:	f9b6 3000 	ldrsh.w	r3, [r6]
   81420:	fb00 f303 	mul.w	r3, r0, r3
   81424:	111b      	asrs	r3, r3, #4
   81426:	eb03 1322 	add.w	r3, r3, r2, asr #4
   8142a:	802b      	strh	r3, [r5, #0]
	p->y = t->y;
   8142c:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
   81430:	806b      	strh	r3, [r5, #2]
	p->z = FSUB(FMULG(t->z, TOFIX(cos(alpha), Q8), Q4, Q8, Q4), FMULG(t->x, TOFIX(sin(alpha), Q8), Q4, Q8, Q4));
   81432:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
   81436:	fb00 f003 	mul.w	r0, r0, r3
   8143a:	f9b6 3000 	ldrsh.w	r3, [r6]
   8143e:	fb04 f403 	mul.w	r4, r4, r3
   81442:	1124      	asrs	r4, r4, #4
   81444:	ebc4 1020 	rsb	r0, r4, r0, asr #4
   81448:	80a8      	strh	r0, [r5, #4]
   8144a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8144e:	bf00      	nop
   81450:	000819a1 	.word	0x000819a1
   81454:	40300000 	.word	0x40300000
   81458:	000834c1 	.word	0x000834c1
   8145c:	00081911 	.word	0x00081911
   81460:	00082f8d 	.word	0x00082f8d

00081464 <calc_in_z>:
}

void calc_in_z(Point *t, Point *p, double alpha) {
   81464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81468:	4605      	mov	r5, r0
   8146a:	460e      	mov	r6, r1
   8146c:	4690      	mov	r8, r2
   8146e:	4699      	mov	r9, r3
	p->x = FSUB(FMULG(t->x, TOFIX(cos(alpha), Q8), Q4, Q8, Q4), FMULG(t->y, TOFIX(sin(alpha), Q8), Q4, Q8, Q4));
   81470:	4610      	mov	r0, r2
   81472:	4619      	mov	r1, r3
   81474:	4b17      	ldr	r3, [pc, #92]	; (814d4 <calc_in_z+0x70>)
   81476:	4798      	blx	r3
   81478:	f8df a068 	ldr.w	sl, [pc, #104]	; 814e4 <calc_in_z+0x80>
   8147c:	2200      	movs	r2, #0
   8147e:	4b16      	ldr	r3, [pc, #88]	; (814d8 <calc_in_z+0x74>)
   81480:	47d0      	blx	sl
   81482:	4f16      	ldr	r7, [pc, #88]	; (814dc <calc_in_z+0x78>)
   81484:	47b8      	blx	r7
   81486:	4604      	mov	r4, r0
   81488:	4640      	mov	r0, r8
   8148a:	4649      	mov	r1, r9
   8148c:	4b14      	ldr	r3, [pc, #80]	; (814e0 <calc_in_z+0x7c>)
   8148e:	4798      	blx	r3
   81490:	2200      	movs	r2, #0
   81492:	4b11      	ldr	r3, [pc, #68]	; (814d8 <calc_in_z+0x74>)
   81494:	47d0      	blx	sl
   81496:	47b8      	blx	r7
   81498:	f9b5 3000 	ldrsh.w	r3, [r5]
   8149c:	fb04 f203 	mul.w	r2, r4, r3
   814a0:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
   814a4:	fb00 f303 	mul.w	r3, r0, r3
   814a8:	111b      	asrs	r3, r3, #4
   814aa:	ebc3 1322 	rsb	r3, r3, r2, asr #4
   814ae:	8033      	strh	r3, [r6, #0]
	p->y = FADD(FMULG(t->x, TOFIX(sin(alpha), Q8), Q4, Q8, Q4), FMULG(t->y, TOFIX(cos(alpha), Q8), Q4, Q8, Q4));
   814b0:	f9b5 3000 	ldrsh.w	r3, [r5]
   814b4:	fb00 f003 	mul.w	r0, r0, r3
   814b8:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
   814bc:	fb04 f403 	mul.w	r4, r4, r3
   814c0:	1124      	asrs	r4, r4, #4
   814c2:	eb04 1020 	add.w	r0, r4, r0, asr #4
   814c6:	8070      	strh	r0, [r6, #2]
	p->z = t->z;
   814c8:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   814cc:	80b3      	strh	r3, [r6, #4]
   814ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   814d2:	bf00      	nop
   814d4:	00081911 	.word	0x00081911
   814d8:	40300000 	.word	0x40300000
   814dc:	000834c1 	.word	0x000834c1
   814e0:	000819a1 	.word	0x000819a1
   814e4:	00082f8d 	.word	0x00082f8d

000814e8 <opt>:
	p->z += FMULG(t->y, TOFIX(sin(alpha), Q8), Q4, Q8, Q4);
	p->z += FMULG(t->z, TOFIX(d, Q8), Q4, Q8, Q4);

}

void opt() {
   814e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   814ec:	b091      	sub	sp, #68	; 0x44

x = 1;
y = 1;
z = 1;

p1.x = TOFIX(start, Q4);
   814ee:	f8df 829c 	ldr.w	r8, [pc, #668]	; 8178c <opt+0x2a4>
   814f2:	f64f 5280 	movw	r2, #64896	; 0xfd80
   814f6:	f8a8 2000 	strh.w	r2, [r8]
p1.y = TOFIX(start, Q4);
   814fa:	f8a8 2002 	strh.w	r2, [r8, #2]
p1.z = TOFIX(-0.5 * length, Q4);
   814fe:	f8a8 2004 	strh.w	r2, [r8, #4]

p2.x = TOFIX(start + length, Q4);
   81502:	f8df c290 	ldr.w	ip, [pc, #656]	; 81794 <opt+0x2ac>
   81506:	f44f 7320 	mov.w	r3, #640	; 0x280
   8150a:	f8ac 3000 	strh.w	r3, [ip]
p2.y = TOFIX(start, Q4);
   8150e:	f8ac 2002 	strh.w	r2, [ip, #2]
p2.z = TOFIX(-0.5 * length, Q4);
   81512:	f8ac 2004 	strh.w	r2, [ip, #4]

p3.x = TOFIX(start + length, Q4);
   81516:	f8df e280 	ldr.w	lr, [pc, #640]	; 81798 <opt+0x2b0>
   8151a:	f8ae 3000 	strh.w	r3, [lr]
p3.y = TOFIX(start + length, Q4);
   8151e:	f8ae 3002 	strh.w	r3, [lr, #2]
p3.z = TOFIX(-0.5 * length, Q4);
   81522:	f8ae 2004 	strh.w	r2, [lr, #4]

p4.x = TOFIX(start, Q4);
   81526:	4f94      	ldr	r7, [pc, #592]	; (81778 <opt+0x290>)
   81528:	803a      	strh	r2, [r7, #0]
p4.y = TOFIX(start + length, Q4);
   8152a:	807b      	strh	r3, [r7, #2]
p4.z = TOFIX(-0.5 * length, Q4);
   8152c:	80ba      	strh	r2, [r7, #4]

p5.x = TOFIX(start, Q4);
   8152e:	4e93      	ldr	r6, [pc, #588]	; (8177c <opt+0x294>)
   81530:	8032      	strh	r2, [r6, #0]
p5.y = TOFIX(start, Q4);
   81532:	8072      	strh	r2, [r6, #2]
p5.z = TOFIX(0.5 * length, Q4);
   81534:	80b3      	strh	r3, [r6, #4]

p6.x = TOFIX(start + length, Q4);
   81536:	4d92      	ldr	r5, [pc, #584]	; (81780 <opt+0x298>)
   81538:	802b      	strh	r3, [r5, #0]
p6.y = TOFIX(start, Q4);
   8153a:	806a      	strh	r2, [r5, #2]
p6.z = TOFIX(0.5 * length, Q4);
   8153c:	80ab      	strh	r3, [r5, #4]

p7.x = TOFIX(start + length, Q4);
   8153e:	4c91      	ldr	r4, [pc, #580]	; (81784 <opt+0x29c>)
   81540:	8023      	strh	r3, [r4, #0]
p7.y = TOFIX(start + length, Q4);
   81542:	8063      	strh	r3, [r4, #2]
p7.z = TOFIX(0.5 * length, Q4);
   81544:	80a3      	strh	r3, [r4, #4]

p8.x = TOFIX(start, Q4);
   81546:	4990      	ldr	r1, [pc, #576]	; (81788 <opt+0x2a0>)
   81548:	800a      	strh	r2, [r1, #0]
p8.y = TOFIX(start + length, Q4);
   8154a:	804b      	strh	r3, [r1, #2]
p8.z = TOFIX(0.5 * length, Q4);
   8154c:	808b      	strh	r3, [r1, #4]

Point t1,t2,t3,t4,t5,t6,t7,t8;
t1=p1;t2=p2;t3=p3;t4=p4;t5=p5;t6=p6;t7=p7;t8=p8;
   8154e:	f8d8 0000 	ldr.w	r0, [r8]
   81552:	900e      	str	r0, [sp, #56]	; 0x38
   81554:	f8b8 3004 	ldrh.w	r3, [r8, #4]
   81558:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
   8155c:	f8dc 0000 	ldr.w	r0, [ip]
   81560:	900c      	str	r0, [sp, #48]	; 0x30
   81562:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
   81566:	f8de 0000 	ldr.w	r0, [lr]
   8156a:	900a      	str	r0, [sp, #40]	; 0x28
   8156c:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
   81570:	6838      	ldr	r0, [r7, #0]
   81572:	9008      	str	r0, [sp, #32]
   81574:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
   81578:	6830      	ldr	r0, [r6, #0]
   8157a:	9006      	str	r0, [sp, #24]
   8157c:	88b3      	ldrh	r3, [r6, #4]
   8157e:	f8ad 301c 	strh.w	r3, [sp, #28]
   81582:	6828      	ldr	r0, [r5, #0]
   81584:	9004      	str	r0, [sp, #16]
   81586:	f8ad 3014 	strh.w	r3, [sp, #20]
   8158a:	6820      	ldr	r0, [r4, #0]
   8158c:	9002      	str	r0, [sp, #8]
   8158e:	f8ad 300c 	strh.w	r3, [sp, #12]
   81592:	6808      	ldr	r0, [r1, #0]
   81594:	9000      	str	r0, [sp, #0]
   81596:	f8ad 3004 	strh.w	r3, [sp, #4]
void opt() {

short start = -40.0;
short length = 80.0;

short param = 0.0;
   8159a:	f04f 0800 	mov.w	r8, #0


while(1) {
	
	if(x == 1) {
		calc_in_x(&t1, &p1, alpha);
   8159e:	4652      	mov	r2, sl
   815a0:	465b      	mov	r3, fp
   815a2:	497a      	ldr	r1, [pc, #488]	; (8178c <opt+0x2a4>)
   815a4:	a80e      	add	r0, sp, #56	; 0x38
   815a6:	4d7a      	ldr	r5, [pc, #488]	; (81790 <opt+0x2a8>)
   815a8:	47a8      	blx	r5
		calc_in_x(&t2, &p2, alpha);
   815aa:	4652      	mov	r2, sl
   815ac:	465b      	mov	r3, fp
   815ae:	4979      	ldr	r1, [pc, #484]	; (81794 <opt+0x2ac>)
   815b0:	a80c      	add	r0, sp, #48	; 0x30
   815b2:	47a8      	blx	r5
		calc_in_x(&t3, &p3, alpha);
   815b4:	4652      	mov	r2, sl
   815b6:	465b      	mov	r3, fp
   815b8:	4977      	ldr	r1, [pc, #476]	; (81798 <opt+0x2b0>)
   815ba:	a80a      	add	r0, sp, #40	; 0x28
   815bc:	47a8      	blx	r5
		calc_in_x(&t4, &p4, alpha);
   815be:	4652      	mov	r2, sl
   815c0:	465b      	mov	r3, fp
   815c2:	496d      	ldr	r1, [pc, #436]	; (81778 <opt+0x290>)
   815c4:	a808      	add	r0, sp, #32
   815c6:	47a8      	blx	r5
		calc_in_x(&t5, &p5, alpha);
   815c8:	4652      	mov	r2, sl
   815ca:	465b      	mov	r3, fp
   815cc:	496b      	ldr	r1, [pc, #428]	; (8177c <opt+0x294>)
   815ce:	a806      	add	r0, sp, #24
   815d0:	47a8      	blx	r5
		calc_in_x(&t6, &p6, alpha);
   815d2:	4652      	mov	r2, sl
   815d4:	465b      	mov	r3, fp
   815d6:	496a      	ldr	r1, [pc, #424]	; (81780 <opt+0x298>)
   815d8:	a804      	add	r0, sp, #16
   815da:	47a8      	blx	r5
		calc_in_x(&t7, &p7, alpha);
   815dc:	4652      	mov	r2, sl
   815de:	465b      	mov	r3, fp
   815e0:	4968      	ldr	r1, [pc, #416]	; (81784 <opt+0x29c>)
   815e2:	a802      	add	r0, sp, #8
   815e4:	47a8      	blx	r5
		calc_in_x(&t8, &p8, alpha);
   815e6:	4652      	mov	r2, sl
   815e8:	465b      	mov	r3, fp
   815ea:	4967      	ldr	r1, [pc, #412]	; (81788 <opt+0x2a0>)
   815ec:	4668      	mov	r0, sp
   815ee:	47a8      	blx	r5
	}

	if(y == 1) {
		calc_in_y(&t1, &r1, alpha);
   815f0:	4652      	mov	r2, sl
   815f2:	465b      	mov	r3, fp
   815f4:	4969      	ldr	r1, [pc, #420]	; (8179c <opt+0x2b4>)
   815f6:	a80e      	add	r0, sp, #56	; 0x38
   815f8:	4c69      	ldr	r4, [pc, #420]	; (817a0 <opt+0x2b8>)
   815fa:	47a0      	blx	r4
		calc_in_y(&t2, &r2, alpha);
   815fc:	4652      	mov	r2, sl
   815fe:	465b      	mov	r3, fp
   81600:	4968      	ldr	r1, [pc, #416]	; (817a4 <opt+0x2bc>)
   81602:	a80c      	add	r0, sp, #48	; 0x30
   81604:	47a0      	blx	r4
		calc_in_y(&t3, &r3, alpha);
   81606:	4652      	mov	r2, sl
   81608:	465b      	mov	r3, fp
   8160a:	4967      	ldr	r1, [pc, #412]	; (817a8 <opt+0x2c0>)
   8160c:	a80a      	add	r0, sp, #40	; 0x28
   8160e:	47a0      	blx	r4
		calc_in_y(&t4, &r4, alpha);
   81610:	4652      	mov	r2, sl
   81612:	465b      	mov	r3, fp
   81614:	4965      	ldr	r1, [pc, #404]	; (817ac <opt+0x2c4>)
   81616:	a808      	add	r0, sp, #32
   81618:	47a0      	blx	r4
		calc_in_y(&t5, &r5, alpha);
   8161a:	4652      	mov	r2, sl
   8161c:	465b      	mov	r3, fp
   8161e:	4964      	ldr	r1, [pc, #400]	; (817b0 <opt+0x2c8>)
   81620:	a806      	add	r0, sp, #24
   81622:	47a0      	blx	r4
		calc_in_y(&t6, &r6, alpha);
   81624:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 817e0 <opt+0x2f8>
   81628:	4652      	mov	r2, sl
   8162a:	465b      	mov	r3, fp
   8162c:	4649      	mov	r1, r9
   8162e:	a804      	add	r0, sp, #16
   81630:	47a0      	blx	r4
		calc_in_y(&t7, &r7, alpha);
   81632:	4652      	mov	r2, sl
   81634:	465b      	mov	r3, fp
   81636:	495f      	ldr	r1, [pc, #380]	; (817b4 <opt+0x2cc>)
   81638:	a802      	add	r0, sp, #8
   8163a:	47a0      	blx	r4
		calc_in_y(&t8, &r8, alpha);
   8163c:	4f5e      	ldr	r7, [pc, #376]	; (817b8 <opt+0x2d0>)
   8163e:	4652      	mov	r2, sl
   81640:	465b      	mov	r3, fp
   81642:	4639      	mov	r1, r7
   81644:	4668      	mov	r0, sp
   81646:	47a0      	blx	r4
		
		calc_in_z(&r1, &p1, alpha);
   81648:	4652      	mov	r2, sl
   8164a:	465b      	mov	r3, fp
   8164c:	494f      	ldr	r1, [pc, #316]	; (8178c <opt+0x2a4>)
   8164e:	4853      	ldr	r0, [pc, #332]	; (8179c <opt+0x2b4>)
   81650:	4e5a      	ldr	r6, [pc, #360]	; (817bc <opt+0x2d4>)
   81652:	47b0      	blx	r6
		calc_in_z(&r2, &p2, alpha);
   81654:	4652      	mov	r2, sl
   81656:	465b      	mov	r3, fp
   81658:	494e      	ldr	r1, [pc, #312]	; (81794 <opt+0x2ac>)
   8165a:	4852      	ldr	r0, [pc, #328]	; (817a4 <opt+0x2bc>)
   8165c:	47b0      	blx	r6
		calc_in_z(&r3, &p3, alpha);
   8165e:	4652      	mov	r2, sl
   81660:	465b      	mov	r3, fp
   81662:	494d      	ldr	r1, [pc, #308]	; (81798 <opt+0x2b0>)
   81664:	4850      	ldr	r0, [pc, #320]	; (817a8 <opt+0x2c0>)
   81666:	47b0      	blx	r6
		calc_in_z(&r4, &p4, alpha);
   81668:	4652      	mov	r2, sl
   8166a:	465b      	mov	r3, fp
   8166c:	4942      	ldr	r1, [pc, #264]	; (81778 <opt+0x290>)
   8166e:	484f      	ldr	r0, [pc, #316]	; (817ac <opt+0x2c4>)
   81670:	47b0      	blx	r6
		calc_in_z(&r5, &p5, alpha);
   81672:	4652      	mov	r2, sl
   81674:	465b      	mov	r3, fp
   81676:	4941      	ldr	r1, [pc, #260]	; (8177c <opt+0x294>)
   81678:	484d      	ldr	r0, [pc, #308]	; (817b0 <opt+0x2c8>)
   8167a:	47b0      	blx	r6
		calc_in_z(&r6, &p6, alpha);
   8167c:	4652      	mov	r2, sl
   8167e:	465b      	mov	r3, fp
   81680:	493f      	ldr	r1, [pc, #252]	; (81780 <opt+0x298>)
   81682:	4648      	mov	r0, r9
   81684:	47b0      	blx	r6
		calc_in_z(&r7, &p7, alpha);
   81686:	4652      	mov	r2, sl
   81688:	465b      	mov	r3, fp
   8168a:	493e      	ldr	r1, [pc, #248]	; (81784 <opt+0x29c>)
   8168c:	4849      	ldr	r0, [pc, #292]	; (817b4 <opt+0x2cc>)
   8168e:	47b0      	blx	r6
		calc_in_z(&r8, &p8, alpha);
   81690:	4652      	mov	r2, sl
   81692:	465b      	mov	r3, fp
   81694:	493c      	ldr	r1, [pc, #240]	; (81788 <opt+0x2a0>)
   81696:	4638      	mov	r0, r7
   81698:	47b0      	blx	r6
	}

	if(z == 1) {
		calc_in_x(&t1, &r1, alpha);
   8169a:	4652      	mov	r2, sl
   8169c:	465b      	mov	r3, fp
   8169e:	493f      	ldr	r1, [pc, #252]	; (8179c <opt+0x2b4>)
   816a0:	a80e      	add	r0, sp, #56	; 0x38
   816a2:	47a8      	blx	r5
		calc_in_x(&t2, &r2, alpha);
   816a4:	4652      	mov	r2, sl
   816a6:	465b      	mov	r3, fp
   816a8:	493e      	ldr	r1, [pc, #248]	; (817a4 <opt+0x2bc>)
   816aa:	a80c      	add	r0, sp, #48	; 0x30
   816ac:	47a8      	blx	r5
		calc_in_x(&t3, &r3, alpha);
   816ae:	4652      	mov	r2, sl
   816b0:	465b      	mov	r3, fp
   816b2:	493d      	ldr	r1, [pc, #244]	; (817a8 <opt+0x2c0>)
   816b4:	a80a      	add	r0, sp, #40	; 0x28
   816b6:	47a8      	blx	r5
		calc_in_x(&t4, &r4, alpha);
   816b8:	4652      	mov	r2, sl
   816ba:	465b      	mov	r3, fp
   816bc:	493b      	ldr	r1, [pc, #236]	; (817ac <opt+0x2c4>)
   816be:	a808      	add	r0, sp, #32
   816c0:	47a8      	blx	r5
		calc_in_x(&t5, &r5, alpha);
   816c2:	4652      	mov	r2, sl
   816c4:	465b      	mov	r3, fp
   816c6:	493a      	ldr	r1, [pc, #232]	; (817b0 <opt+0x2c8>)
   816c8:	a806      	add	r0, sp, #24
   816ca:	47a8      	blx	r5
		calc_in_x(&t6, &r6, alpha);
   816cc:	4652      	mov	r2, sl
   816ce:	465b      	mov	r3, fp
   816d0:	4649      	mov	r1, r9
   816d2:	a804      	add	r0, sp, #16
   816d4:	47a8      	blx	r5
		calc_in_x(&t7, &r7, alpha);
   816d6:	4652      	mov	r2, sl
   816d8:	465b      	mov	r3, fp
   816da:	4936      	ldr	r1, [pc, #216]	; (817b4 <opt+0x2cc>)
   816dc:	a802      	add	r0, sp, #8
   816de:	47a8      	blx	r5
		calc_in_x(&t8, &r8, alpha);
   816e0:	4652      	mov	r2, sl
   816e2:	465b      	mov	r3, fp
   816e4:	4639      	mov	r1, r7
   816e6:	4668      	mov	r0, sp
   816e8:	47a8      	blx	r5
		
		calc_in_y(&r1, &p1, alpha);
   816ea:	4652      	mov	r2, sl
   816ec:	465b      	mov	r3, fp
   816ee:	4927      	ldr	r1, [pc, #156]	; (8178c <opt+0x2a4>)
   816f0:	482a      	ldr	r0, [pc, #168]	; (8179c <opt+0x2b4>)
   816f2:	47a0      	blx	r4
		calc_in_y(&r2, &p2, alpha);
   816f4:	4652      	mov	r2, sl
   816f6:	465b      	mov	r3, fp
   816f8:	4926      	ldr	r1, [pc, #152]	; (81794 <opt+0x2ac>)
   816fa:	482a      	ldr	r0, [pc, #168]	; (817a4 <opt+0x2bc>)
   816fc:	47a0      	blx	r4
		calc_in_y(&r3, &p3, alpha);
   816fe:	4652      	mov	r2, sl
   81700:	465b      	mov	r3, fp
   81702:	4925      	ldr	r1, [pc, #148]	; (81798 <opt+0x2b0>)
   81704:	4828      	ldr	r0, [pc, #160]	; (817a8 <opt+0x2c0>)
   81706:	47a0      	blx	r4
		calc_in_y(&r4, &p4, alpha);
   81708:	4652      	mov	r2, sl
   8170a:	465b      	mov	r3, fp
   8170c:	491a      	ldr	r1, [pc, #104]	; (81778 <opt+0x290>)
   8170e:	4827      	ldr	r0, [pc, #156]	; (817ac <opt+0x2c4>)
   81710:	47a0      	blx	r4
		calc_in_y(&r5, &p5, alpha);
   81712:	4652      	mov	r2, sl
   81714:	465b      	mov	r3, fp
   81716:	4919      	ldr	r1, [pc, #100]	; (8177c <opt+0x294>)
   81718:	4825      	ldr	r0, [pc, #148]	; (817b0 <opt+0x2c8>)
   8171a:	47a0      	blx	r4
		calc_in_y(&r6, &p6, alpha);
   8171c:	4652      	mov	r2, sl
   8171e:	465b      	mov	r3, fp
   81720:	4917      	ldr	r1, [pc, #92]	; (81780 <opt+0x298>)
   81722:	4648      	mov	r0, r9
   81724:	47a0      	blx	r4
		calc_in_y(&r7, &p7, alpha);
   81726:	4652      	mov	r2, sl
   81728:	465b      	mov	r3, fp
   8172a:	4916      	ldr	r1, [pc, #88]	; (81784 <opt+0x29c>)
   8172c:	4821      	ldr	r0, [pc, #132]	; (817b4 <opt+0x2cc>)
   8172e:	47a0      	blx	r4
		calc_in_y(&r8, &p8, alpha);
   81730:	4652      	mov	r2, sl
   81732:	465b      	mov	r3, fp
   81734:	4914      	ldr	r1, [pc, #80]	; (81788 <opt+0x2a0>)
   81736:	4638      	mov	r0, r7
   81738:	47a0      	blx	r4
	}
	
 printCube();
   8173a:	4b21      	ldr	r3, [pc, #132]	; (817c0 <opt+0x2d8>)
   8173c:	4798      	blx	r3
 param += 1.5;
   8173e:	4c21      	ldr	r4, [pc, #132]	; (817c4 <opt+0x2dc>)
   81740:	4640      	mov	r0, r8
   81742:	47a0      	blx	r4
   81744:	2200      	movs	r2, #0
   81746:	4b20      	ldr	r3, [pc, #128]	; (817c8 <opt+0x2e0>)
   81748:	4d20      	ldr	r5, [pc, #128]	; (817cc <opt+0x2e4>)
   8174a:	47a8      	blx	r5
   8174c:	4b20      	ldr	r3, [pc, #128]	; (817d0 <opt+0x2e8>)
   8174e:	4798      	blx	r3
   81750:	fa0f f880 	sxth.w	r8, r0
 alpha = (param * 3.14159) / 180.0;
   81754:	4640      	mov	r0, r8
   81756:	47a0      	blx	r4
   81758:	a305      	add	r3, pc, #20	; (adr r3, 81770 <opt+0x288>)
   8175a:	e9d3 2300 	ldrd	r2, r3, [r3]
   8175e:	4c1d      	ldr	r4, [pc, #116]	; (817d4 <opt+0x2ec>)
   81760:	47a0      	blx	r4
   81762:	2200      	movs	r2, #0
   81764:	4b1c      	ldr	r3, [pc, #112]	; (817d8 <opt+0x2f0>)
   81766:	4c1d      	ldr	r4, [pc, #116]	; (817dc <opt+0x2f4>)
   81768:	47a0      	blx	r4
   8176a:	4682      	mov	sl, r0
   8176c:	468b      	mov	fp, r1
   8176e:	e716      	b.n	8159e <opt+0xb6>
   81770:	f01b866e 	.word	0xf01b866e
   81774:	400921f9 	.word	0x400921f9
   81778:	20000830 	.word	0x20000830
   8177c:	200007e4 	.word	0x200007e4
   81780:	200007fc 	.word	0x200007fc
   81784:	200007c4 	.word	0x200007c4
   81788:	200007f4 	.word	0x200007f4
   8178c:	200007ec 	.word	0x200007ec
   81790:	0008135d 	.word	0x0008135d
   81794:	200007bc 	.word	0x200007bc
   81798:	20000828 	.word	0x20000828
   8179c:	20000840 	.word	0x20000840
   817a0:	000813e1 	.word	0x000813e1
   817a4:	20000820 	.word	0x20000820
   817a8:	200007cc 	.word	0x200007cc
   817ac:	200007dc 	.word	0x200007dc
   817b0:	20000838 	.word	0x20000838
   817b4:	20000818 	.word	0x20000818
   817b8:	20000810 	.word	0x20000810
   817bc:	00081465 	.word	0x00081465
   817c0:	00081051 	.word	0x00081051
   817c4:	00082ec1 	.word	0x00082ec1
   817c8:	3ff80000 	.word	0x3ff80000
   817cc:	00082c29 	.word	0x00082c29
   817d0:	000834c1 	.word	0x000834c1
   817d4:	00082f8d 	.word	0x00082f8d
   817d8:	40668000 	.word	0x40668000
   817dc:	000831e1 	.word	0x000831e1
   817e0:	200007d4 	.word	0x200007d4

000817e4 <main>:
}

}


int main(void) {
   817e4:	b580      	push	{r7, lr}
	
	 d = TOFIX(150, Q4);
   817e6:	f44f 6216 	mov.w	r2, #2400	; 0x960
   817ea:	4b31      	ldr	r3, [pc, #196]	; (818b0 <main+0xcc>)
   817ec:	801a      	strh	r2, [r3, #0]
	
	sysclk_init();
   817ee:	4b31      	ldr	r3, [pc, #196]	; (818b4 <main+0xd0>)
   817f0:	4798      	blx	r3
	board_init();
   817f2:	4b31      	ldr	r3, [pc, #196]	; (818b8 <main+0xd4>)
   817f4:	4798      	blx	r3
	/* Set up SysTick Timer for 1 msec interrupts. */
	if (SysTick_Config(SystemCoreClock / (uint32_t) 1000)) {
   817f6:	4b31      	ldr	r3, [pc, #196]	; (818bc <main+0xd8>)
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
   817f8:	681b      	ldr	r3, [r3, #0]
   817fa:	4a31      	ldr	r2, [pc, #196]	; (818c0 <main+0xdc>)
   817fc:	fba2 2303 	umull	r2, r3, r2, r3
   81800:	099b      	lsrs	r3, r3, #6
   81802:	3b01      	subs	r3, #1
   81804:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   81808:	d250      	bcs.n	818ac <main+0xc8>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
   8180a:	4a2e      	ldr	r2, [pc, #184]	; (818c4 <main+0xe0>)
   8180c:	6053      	str	r3, [r2, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   8180e:	26f0      	movs	r6, #240	; 0xf0
   81810:	4b2d      	ldr	r3, [pc, #180]	; (818c8 <main+0xe4>)
   81812:	f883 6023 	strb.w	r6, [r3, #35]	; 0x23
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
   81816:	2500      	movs	r5, #0
   81818:	6095      	str	r5, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
   8181a:	2307      	movs	r3, #7
   8181c:	6013      	str	r3, [r2, #0]
		/* Capture error. */
		while (1) {
		}
	}

	pmc_enable_periph_clk(ID_SMC);
   8181e:	2009      	movs	r0, #9
   81820:	4b2a      	ldr	r3, [pc, #168]	; (818cc <main+0xe8>)
   81822:	4798      	blx	r3
	/* Configure and enable PSRAM memory */
	smc_set_setup_timing(SMC, 0,
   81824:	4c2a      	ldr	r4, [pc, #168]	; (818d0 <main+0xec>)
   81826:	4a2b      	ldr	r2, [pc, #172]	; (818d4 <main+0xf0>)
   81828:	4629      	mov	r1, r5
   8182a:	4620      	mov	r0, r4
   8182c:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 81904 <main+0x120>
   81830:	47d0      	blx	sl
			SMC_SETUP_NWE_SETUP(0) | SMC_SETUP_NCS_WR_SETUP(2)
					| SMC_SETUP_NRD_SETUP(2) | SMC_SETUP_NCS_RD_SETUP(2));
	smc_set_pulse_timing(SMC, 0,
   81832:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
   81836:	4629      	mov	r1, r5
   81838:	4620      	mov	r0, r4
   8183a:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 81908 <main+0x124>
   8183e:	47c8      	blx	r9
			SMC_PULSE_NWE_PULSE(6) | SMC_PULSE_NCS_WR_PULSE(6)
					| SMC_PULSE_NRD_PULSE(6) | SMC_PULSE_NCS_RD_PULSE(6));
	smc_set_cycle_timing(SMC, 0,
   81840:	f04f 1208 	mov.w	r2, #524296	; 0x80008
   81844:	4629      	mov	r1, r5
   81846:	4620      	mov	r0, r4
   81848:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8190c <main+0x128>
   8184c:	47c0      	blx	r8
			SMC_CYCLE_NWE_CYCLE(8) | SMC_CYCLE_NRD_CYCLE(8));
	smc_set_mode(SMC, 0,
   8184e:	f241 0203 	movw	r2, #4099	; 0x1003
   81852:	4629      	mov	r1, r5
   81854:	4620      	mov	r0, r4
   81856:	4f20      	ldr	r7, [pc, #128]	; (818d8 <main+0xf4>)
   81858:	47b8      	blx	r7
			SMC_MODE_READ_MODE | SMC_MODE_WRITE_MODE | SMC_MODE_DBW_BIT_16);
	/* Configure and enable LCD display */
	smc_set_setup_timing(SMC, CONF_BOARD_HX8347A_LCD_CS,
   8185a:	4a20      	ldr	r2, [pc, #128]	; (818dc <main+0xf8>)
   8185c:	2102      	movs	r1, #2
   8185e:	4620      	mov	r0, r4
   81860:	47d0      	blx	sl
			SMC_SETUP_NWE_SETUP(1) | SMC_SETUP_NCS_WR_SETUP(1)
					| SMC_SETUP_NRD_SETUP(9) | SMC_SETUP_NCS_RD_SETUP(9));
	smc_set_pulse_timing(SMC, CONF_BOARD_HX8347A_LCD_CS,
   81862:	4a1f      	ldr	r2, [pc, #124]	; (818e0 <main+0xfc>)
   81864:	2102      	movs	r1, #2
   81866:	4620      	mov	r0, r4
   81868:	47c8      	blx	r9
			SMC_PULSE_NWE_PULSE(4) | SMC_PULSE_NCS_WR_PULSE(4)
					| SMC_PULSE_NRD_PULSE(36) | SMC_PULSE_NCS_RD_PULSE(36));
	smc_set_cycle_timing(SMC, CONF_BOARD_HX8347A_LCD_CS,
   8186a:	4a1e      	ldr	r2, [pc, #120]	; (818e4 <main+0x100>)
   8186c:	2102      	movs	r1, #2
   8186e:	4620      	mov	r0, r4
   81870:	47c0      	blx	r8
			SMC_CYCLE_NWE_CYCLE(10) | SMC_CYCLE_NRD_CYCLE(45));
	smc_set_mode(SMC, CONF_BOARD_HX8347A_LCD_CS,
   81872:	f241 0203 	movw	r2, #4099	; 0x1003
   81876:	2102      	movs	r1, #2
   81878:	4620      	mov	r0, r4
   8187a:	47b8      	blx	r7
			SMC_MODE_READ_MODE | SMC_MODE_WRITE_MODE | SMC_MODE_DBW_BIT_16);
			
	g_hx8347a_display_opt.ul_width = HX8347A_LCD_WIDTH;
   8187c:	4c1a      	ldr	r4, [pc, #104]	; (818e8 <main+0x104>)
   8187e:	6026      	str	r6, [r4, #0]
	g_hx8347a_display_opt.ul_height = HX8347A_LCD_HEIGHT;
   81880:	f44f 73a0 	mov.w	r3, #320	; 0x140
   81884:	6063      	str	r3, [r4, #4]
	g_hx8347a_display_opt.foreground_color = rgb24_to_rgb16(COLOR_BLACK);
   81886:	8125      	strh	r5, [r4, #8]
	g_hx8347a_display_opt.background_color = rgb24_to_rgb16(COLOR_WHITE);
   81888:	f64f 75ff 	movw	r5, #65535	; 0xffff
   8188c:	8165      	strh	r5, [r4, #10]

	/* Switch off backlight */
	aat31xx_disable_backlight();
   8188e:	4b17      	ldr	r3, [pc, #92]	; (818ec <main+0x108>)
   81890:	4798      	blx	r3

	/* Initialize LCD */
	hx8347a_init(&g_hx8347a_display_opt);
   81892:	4620      	mov	r0, r4
   81894:	4b16      	ldr	r3, [pc, #88]	; (818f0 <main+0x10c>)
   81896:	4798      	blx	r3

	/* Set backlight level */
	aat31xx_set_backlight(AAT31XX_AVG_BACKLIGHT_LEVEL);
   81898:	2019      	movs	r0, #25
   8189a:	4b16      	ldr	r3, [pc, #88]	; (818f4 <main+0x110>)
   8189c:	4798      	blx	r3

	/* Turn on LCD */
	hx8347a_display_on();
   8189e:	4b16      	ldr	r3, [pc, #88]	; (818f8 <main+0x114>)
   818a0:	4798      	blx	r3
	
	/* Set color */
	hx8347a_set_foreground_color(rgb24_to_rgb16(COLOR_WHITE));
   818a2:	4628      	mov	r0, r5
   818a4:	4b15      	ldr	r3, [pc, #84]	; (818fc <main+0x118>)
   818a6:	4798      	blx	r3
	
	/* Draw flames */
	opt();
   818a8:	4b15      	ldr	r3, [pc, #84]	; (81900 <main+0x11c>)
   818aa:	4798      	blx	r3
   818ac:	e7fe      	b.n	818ac <main+0xc8>
   818ae:	bf00      	nop
   818b0:	200007b8 	.word	0x200007b8
   818b4:	0008076d 	.word	0x0008076d
   818b8:	000807e9 	.word	0x000807e9
   818bc:	20000118 	.word	0x20000118
   818c0:	10624dd3 	.word	0x10624dd3
   818c4:	e000e010 	.word	0xe000e010
   818c8:	e000ed00 	.word	0xe000ed00
   818cc:	00080d99 	.word	0x00080d99
   818d0:	400e0000 	.word	0x400e0000
   818d4:	02020200 	.word	0x02020200
   818d8:	0008075d 	.word	0x0008075d
   818dc:	09090101 	.word	0x09090101
   818e0:	24240404 	.word	0x24240404
   818e4:	002d000a 	.word	0x002d000a
   818e8:	20000804 	.word	0x20000804
   818ec:	00080171 	.word	0x00080171
   818f0:	00080389 	.word	0x00080389
   818f4:	00080119 	.word	0x00080119
   818f8:	00080279 	.word	0x00080279
   818fc:	000802b9 	.word	0x000802b9
   81900:	000814e9 	.word	0x000814e9
   81904:	00080739 	.word	0x00080739
   81908:	00080745 	.word	0x00080745
   8190c:	00080751 	.word	0x00080751

00081910 <cos>:
   81910:	b530      	push	{r4, r5, lr}
   81912:	4a21      	ldr	r2, [pc, #132]	; (81998 <cos+0x88>)
   81914:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   81918:	4293      	cmp	r3, r2
   8191a:	b087      	sub	sp, #28
   8191c:	dd1b      	ble.n	81956 <cos+0x46>
   8191e:	4a1f      	ldr	r2, [pc, #124]	; (8199c <cos+0x8c>)
   81920:	4293      	cmp	r3, r2
   81922:	dd05      	ble.n	81930 <cos+0x20>
   81924:	4602      	mov	r2, r0
   81926:	460b      	mov	r3, r1
   81928:	f001 f97c 	bl	82c24 <__aeabi_dsub>
   8192c:	b007      	add	sp, #28
   8192e:	bd30      	pop	{r4, r5, pc}
   81930:	aa02      	add	r2, sp, #8
   81932:	f000 f87d 	bl	81a30 <__ieee754_rem_pio2>
   81936:	f000 0003 	and.w	r0, r0, #3
   8193a:	2801      	cmp	r0, #1
   8193c:	d01a      	beq.n	81974 <cos+0x64>
   8193e:	2802      	cmp	r0, #2
   81940:	d00f      	beq.n	81962 <cos+0x52>
   81942:	b308      	cbz	r0, 81988 <cos+0x78>
   81944:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   81948:	2301      	movs	r3, #1
   8194a:	9300      	str	r3, [sp, #0]
   8194c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   81950:	f000 ffa6 	bl	828a0 <__kernel_sin>
   81954:	e7ea      	b.n	8192c <cos+0x1c>
   81956:	2200      	movs	r2, #0
   81958:	2300      	movs	r3, #0
   8195a:	f000 fa81 	bl	81e60 <__kernel_cos>
   8195e:	b007      	add	sp, #28
   81960:	bd30      	pop	{r4, r5, pc}
   81962:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   81966:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   8196a:	f000 fa79 	bl	81e60 <__kernel_cos>
   8196e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
   81972:	e7db      	b.n	8192c <cos+0x1c>
   81974:	9000      	str	r0, [sp, #0]
   81976:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   8197a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   8197e:	f000 ff8f 	bl	828a0 <__kernel_sin>
   81982:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
   81986:	e7d1      	b.n	8192c <cos+0x1c>
   81988:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   8198c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   81990:	f000 fa66 	bl	81e60 <__kernel_cos>
   81994:	e7ca      	b.n	8192c <cos+0x1c>
   81996:	bf00      	nop
   81998:	3fe921fb 	.word	0x3fe921fb
   8199c:	7fefffff 	.word	0x7fefffff

000819a0 <sin>:
   819a0:	b530      	push	{r4, r5, lr}
   819a2:	4a21      	ldr	r2, [pc, #132]	; (81a28 <sin+0x88>)
   819a4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   819a8:	4293      	cmp	r3, r2
   819aa:	b087      	sub	sp, #28
   819ac:	dd1b      	ble.n	819e6 <sin+0x46>
   819ae:	4a1f      	ldr	r2, [pc, #124]	; (81a2c <sin+0x8c>)
   819b0:	4293      	cmp	r3, r2
   819b2:	dd05      	ble.n	819c0 <sin+0x20>
   819b4:	4602      	mov	r2, r0
   819b6:	460b      	mov	r3, r1
   819b8:	f001 f934 	bl	82c24 <__aeabi_dsub>
   819bc:	b007      	add	sp, #28
   819be:	bd30      	pop	{r4, r5, pc}
   819c0:	aa02      	add	r2, sp, #8
   819c2:	f000 f835 	bl	81a30 <__ieee754_rem_pio2>
   819c6:	f000 0003 	and.w	r0, r0, #3
   819ca:	2801      	cmp	r0, #1
   819cc:	d01e      	beq.n	81a0c <sin+0x6c>
   819ce:	2802      	cmp	r0, #2
   819d0:	d011      	beq.n	819f6 <sin+0x56>
   819d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   819d6:	b300      	cbz	r0, 81a1a <sin+0x7a>
   819d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   819dc:	f000 fa40 	bl	81e60 <__kernel_cos>
   819e0:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
   819e4:	e7ea      	b.n	819bc <sin+0x1c>
   819e6:	2300      	movs	r3, #0
   819e8:	9300      	str	r3, [sp, #0]
   819ea:	2200      	movs	r2, #0
   819ec:	2300      	movs	r3, #0
   819ee:	f000 ff57 	bl	828a0 <__kernel_sin>
   819f2:	b007      	add	sp, #28
   819f4:	bd30      	pop	{r4, r5, pc}
   819f6:	2301      	movs	r3, #1
   819f8:	9300      	str	r3, [sp, #0]
   819fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   819fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   81a02:	f000 ff4d 	bl	828a0 <__kernel_sin>
   81a06:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
   81a0a:	e7d7      	b.n	819bc <sin+0x1c>
   81a0c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   81a10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   81a14:	f000 fa24 	bl	81e60 <__kernel_cos>
   81a18:	e7d0      	b.n	819bc <sin+0x1c>
   81a1a:	2401      	movs	r4, #1
   81a1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   81a20:	9400      	str	r4, [sp, #0]
   81a22:	f000 ff3d 	bl	828a0 <__kernel_sin>
   81a26:	e7c9      	b.n	819bc <sin+0x1c>
   81a28:	3fe921fb 	.word	0x3fe921fb
   81a2c:	7fefffff 	.word	0x7fefffff

00081a30 <__ieee754_rem_pio2>:
   81a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81a34:	4c94      	ldr	r4, [pc, #592]	; (81c88 <__ieee754_rem_pio2+0x258>)
   81a36:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
   81a3a:	42a7      	cmp	r7, r4
   81a3c:	b08f      	sub	sp, #60	; 0x3c
   81a3e:	f340 8081 	ble.w	81b44 <__ieee754_rem_pio2+0x114>
   81a42:	4614      	mov	r4, r2
   81a44:	4a91      	ldr	r2, [pc, #580]	; (81c8c <__ieee754_rem_pio2+0x25c>)
   81a46:	460e      	mov	r6, r1
   81a48:	4297      	cmp	r7, r2
   81a4a:	dc26      	bgt.n	81a9a <__ieee754_rem_pio2+0x6a>
   81a4c:	a384      	add	r3, pc, #528	; (adr r3, 81c60 <__ieee754_rem_pio2+0x230>)
   81a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
   81a52:	2900      	cmp	r1, #0
   81a54:	f340 81a0 	ble.w	81d98 <__ieee754_rem_pio2+0x368>
   81a58:	f001 f8e4 	bl	82c24 <__aeabi_dsub>
   81a5c:	4b8c      	ldr	r3, [pc, #560]	; (81c90 <__ieee754_rem_pio2+0x260>)
   81a5e:	4680      	mov	r8, r0
   81a60:	429f      	cmp	r7, r3
   81a62:	4689      	mov	r9, r1
   81a64:	f000 8083 	beq.w	81b6e <__ieee754_rem_pio2+0x13e>
   81a68:	a37f      	add	r3, pc, #508	; (adr r3, 81c68 <__ieee754_rem_pio2+0x238>)
   81a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
   81a6e:	f001 f8d9 	bl	82c24 <__aeabi_dsub>
   81a72:	4602      	mov	r2, r0
   81a74:	460b      	mov	r3, r1
   81a76:	4640      	mov	r0, r8
   81a78:	e9c4 2300 	strd	r2, r3, [r4]
   81a7c:	4649      	mov	r1, r9
   81a7e:	f001 f8d1 	bl	82c24 <__aeabi_dsub>
   81a82:	a379      	add	r3, pc, #484	; (adr r3, 81c68 <__ieee754_rem_pio2+0x238>)
   81a84:	e9d3 2300 	ldrd	r2, r3, [r3]
   81a88:	f001 f8cc 	bl	82c24 <__aeabi_dsub>
   81a8c:	2501      	movs	r5, #1
   81a8e:	e9c4 0102 	strd	r0, r1, [r4, #8]
   81a92:	4628      	mov	r0, r5
   81a94:	b00f      	add	sp, #60	; 0x3c
   81a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81a9a:	4a7e      	ldr	r2, [pc, #504]	; (81c94 <__ieee754_rem_pio2+0x264>)
   81a9c:	4297      	cmp	r7, r2
   81a9e:	f340 8083 	ble.w	81ba8 <__ieee754_rem_pio2+0x178>
   81aa2:	4a7d      	ldr	r2, [pc, #500]	; (81c98 <__ieee754_rem_pio2+0x268>)
   81aa4:	4297      	cmp	r7, r2
   81aa6:	dc58      	bgt.n	81b5a <__ieee754_rem_pio2+0x12a>
   81aa8:	153d      	asrs	r5, r7, #20
   81aaa:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
   81aae:	eba7 5105 	sub.w	r1, r7, r5, lsl #20
   81ab2:	468b      	mov	fp, r1
   81ab4:	4682      	mov	sl, r0
   81ab6:	f001 fd03 	bl	834c0 <__aeabi_d2iz>
   81aba:	f001 fa01 	bl	82ec0 <__aeabi_i2d>
   81abe:	4680      	mov	r8, r0
   81ac0:	4689      	mov	r9, r1
   81ac2:	4642      	mov	r2, r8
   81ac4:	464b      	mov	r3, r9
   81ac6:	4650      	mov	r0, sl
   81ac8:	4659      	mov	r1, fp
   81aca:	e9cd 8908 	strd	r8, r9, [sp, #32]
   81ace:	f001 f8a9 	bl	82c24 <__aeabi_dsub>
   81ad2:	2200      	movs	r2, #0
   81ad4:	4b71      	ldr	r3, [pc, #452]	; (81c9c <__ieee754_rem_pio2+0x26c>)
   81ad6:	f001 fa59 	bl	82f8c <__aeabi_dmul>
   81ada:	468b      	mov	fp, r1
   81adc:	4682      	mov	sl, r0
   81ade:	f001 fcef 	bl	834c0 <__aeabi_d2iz>
   81ae2:	f001 f9ed 	bl	82ec0 <__aeabi_i2d>
   81ae6:	4680      	mov	r8, r0
   81ae8:	4689      	mov	r9, r1
   81aea:	4642      	mov	r2, r8
   81aec:	464b      	mov	r3, r9
   81aee:	4650      	mov	r0, sl
   81af0:	4659      	mov	r1, fp
   81af2:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
   81af6:	f001 f895 	bl	82c24 <__aeabi_dsub>
   81afa:	2200      	movs	r2, #0
   81afc:	4b67      	ldr	r3, [pc, #412]	; (81c9c <__ieee754_rem_pio2+0x26c>)
   81afe:	f001 fa45 	bl	82f8c <__aeabi_dmul>
   81b02:	2200      	movs	r2, #0
   81b04:	2300      	movs	r3, #0
   81b06:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   81b0a:	f001 fca7 	bl	8345c <__aeabi_dcmpeq>
   81b0e:	2800      	cmp	r0, #0
   81b10:	f000 816a 	beq.w	81de8 <__ieee754_rem_pio2+0x3b8>
   81b14:	2300      	movs	r3, #0
   81b16:	4640      	mov	r0, r8
   81b18:	4649      	mov	r1, r9
   81b1a:	2200      	movs	r2, #0
   81b1c:	f001 fc9e 	bl	8345c <__aeabi_dcmpeq>
   81b20:	2800      	cmp	r0, #0
   81b22:	bf14      	ite	ne
   81b24:	2301      	movne	r3, #1
   81b26:	2302      	moveq	r3, #2
   81b28:	485d      	ldr	r0, [pc, #372]	; (81ca0 <__ieee754_rem_pio2+0x270>)
   81b2a:	2102      	movs	r1, #2
   81b2c:	9001      	str	r0, [sp, #4]
   81b2e:	9100      	str	r1, [sp, #0]
   81b30:	462a      	mov	r2, r5
   81b32:	4621      	mov	r1, r4
   81b34:	a808      	add	r0, sp, #32
   81b36:	f000 fab7 	bl	820a8 <__kernel_rem_pio2>
   81b3a:	2e00      	cmp	r6, #0
   81b3c:	f2c0 814a 	blt.w	81dd4 <__ieee754_rem_pio2+0x3a4>
   81b40:	4605      	mov	r5, r0
   81b42:	e006      	b.n	81b52 <__ieee754_rem_pio2+0x122>
   81b44:	e9c2 0100 	strd	r0, r1, [r2]
   81b48:	2500      	movs	r5, #0
   81b4a:	2400      	movs	r4, #0
   81b4c:	e9c2 4502 	strd	r4, r5, [r2, #8]
   81b50:	2500      	movs	r5, #0
   81b52:	4628      	mov	r0, r5
   81b54:	b00f      	add	sp, #60	; 0x3c
   81b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81b5a:	4602      	mov	r2, r0
   81b5c:	460b      	mov	r3, r1
   81b5e:	f001 f861 	bl	82c24 <__aeabi_dsub>
   81b62:	2500      	movs	r5, #0
   81b64:	e9c4 0102 	strd	r0, r1, [r4, #8]
   81b68:	e9c4 0100 	strd	r0, r1, [r4]
   81b6c:	e7f1      	b.n	81b52 <__ieee754_rem_pio2+0x122>
   81b6e:	a340      	add	r3, pc, #256	; (adr r3, 81c70 <__ieee754_rem_pio2+0x240>)
   81b70:	e9d3 2300 	ldrd	r2, r3, [r3]
   81b74:	f001 f856 	bl	82c24 <__aeabi_dsub>
   81b78:	a33f      	add	r3, pc, #252	; (adr r3, 81c78 <__ieee754_rem_pio2+0x248>)
   81b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
   81b7e:	4606      	mov	r6, r0
   81b80:	460f      	mov	r7, r1
   81b82:	f001 f84f 	bl	82c24 <__aeabi_dsub>
   81b86:	4602      	mov	r2, r0
   81b88:	460b      	mov	r3, r1
   81b8a:	4630      	mov	r0, r6
   81b8c:	e9c4 2300 	strd	r2, r3, [r4]
   81b90:	4639      	mov	r1, r7
   81b92:	f001 f847 	bl	82c24 <__aeabi_dsub>
   81b96:	a338      	add	r3, pc, #224	; (adr r3, 81c78 <__ieee754_rem_pio2+0x248>)
   81b98:	e9d3 2300 	ldrd	r2, r3, [r3]
   81b9c:	f001 f842 	bl	82c24 <__aeabi_dsub>
   81ba0:	2501      	movs	r5, #1
   81ba2:	e9c4 0102 	strd	r0, r1, [r4, #8]
   81ba6:	e7d4      	b.n	81b52 <__ieee754_rem_pio2+0x122>
   81ba8:	f000 ff30 	bl	82a0c <fabs>
   81bac:	a334      	add	r3, pc, #208	; (adr r3, 81c80 <__ieee754_rem_pio2+0x250>)
   81bae:	e9d3 2300 	ldrd	r2, r3, [r3]
   81bb2:	4680      	mov	r8, r0
   81bb4:	4689      	mov	r9, r1
   81bb6:	f001 f9e9 	bl	82f8c <__aeabi_dmul>
   81bba:	2200      	movs	r2, #0
   81bbc:	4b39      	ldr	r3, [pc, #228]	; (81ca4 <__ieee754_rem_pio2+0x274>)
   81bbe:	f001 f833 	bl	82c28 <__adddf3>
   81bc2:	f001 fc7d 	bl	834c0 <__aeabi_d2iz>
   81bc6:	4605      	mov	r5, r0
   81bc8:	f001 f97a 	bl	82ec0 <__aeabi_i2d>
   81bcc:	a324      	add	r3, pc, #144	; (adr r3, 81c60 <__ieee754_rem_pio2+0x230>)
   81bce:	e9d3 2300 	ldrd	r2, r3, [r3]
   81bd2:	e9cd 0104 	strd	r0, r1, [sp, #16]
   81bd6:	f001 f9d9 	bl	82f8c <__aeabi_dmul>
   81bda:	4602      	mov	r2, r0
   81bdc:	460b      	mov	r3, r1
   81bde:	4640      	mov	r0, r8
   81be0:	4649      	mov	r1, r9
   81be2:	f001 f81f 	bl	82c24 <__aeabi_dsub>
   81be6:	a320      	add	r3, pc, #128	; (adr r3, 81c68 <__ieee754_rem_pio2+0x238>)
   81be8:	e9d3 2300 	ldrd	r2, r3, [r3]
   81bec:	4682      	mov	sl, r0
   81bee:	468b      	mov	fp, r1
   81bf0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   81bf4:	f001 f9ca 	bl	82f8c <__aeabi_dmul>
   81bf8:	2d1f      	cmp	r5, #31
   81bfa:	e9cd 0102 	strd	r0, r1, [sp, #8]
   81bfe:	dc55      	bgt.n	81cac <__ieee754_rem_pio2+0x27c>
   81c00:	4b29      	ldr	r3, [pc, #164]	; (81ca8 <__ieee754_rem_pio2+0x278>)
   81c02:	1e6a      	subs	r2, r5, #1
   81c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   81c08:	429f      	cmp	r7, r3
   81c0a:	d04f      	beq.n	81cac <__ieee754_rem_pio2+0x27c>
   81c0c:	4602      	mov	r2, r0
   81c0e:	460b      	mov	r3, r1
   81c10:	4650      	mov	r0, sl
   81c12:	4659      	mov	r1, fp
   81c14:	f001 f806 	bl	82c24 <__aeabi_dsub>
   81c18:	4602      	mov	r2, r0
   81c1a:	460b      	mov	r3, r1
   81c1c:	4681      	mov	r9, r0
   81c1e:	4688      	mov	r8, r1
   81c20:	e9c4 2300 	strd	r2, r3, [r4]
   81c24:	464a      	mov	r2, r9
   81c26:	4643      	mov	r3, r8
   81c28:	4650      	mov	r0, sl
   81c2a:	4659      	mov	r1, fp
   81c2c:	f000 fffa 	bl	82c24 <__aeabi_dsub>
   81c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   81c34:	f000 fff6 	bl	82c24 <__aeabi_dsub>
   81c38:	4602      	mov	r2, r0
   81c3a:	460b      	mov	r3, r1
   81c3c:	2e00      	cmp	r6, #0
   81c3e:	e9c4 2302 	strd	r2, r3, [r4, #8]
   81c42:	da86      	bge.n	81b52 <__ieee754_rem_pio2+0x122>
   81c44:	464a      	mov	r2, r9
   81c46:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
   81c4a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
   81c4e:	e884 000c 	stmia.w	r4, {r2, r3}
   81c52:	60e1      	str	r1, [r4, #12]
   81c54:	60a0      	str	r0, [r4, #8]
   81c56:	426d      	negs	r5, r5
   81c58:	e77b      	b.n	81b52 <__ieee754_rem_pio2+0x122>
   81c5a:	bf00      	nop
   81c5c:	f3af 8000 	nop.w
   81c60:	54400000 	.word	0x54400000
   81c64:	3ff921fb 	.word	0x3ff921fb
   81c68:	1a626331 	.word	0x1a626331
   81c6c:	3dd0b461 	.word	0x3dd0b461
   81c70:	1a600000 	.word	0x1a600000
   81c74:	3dd0b461 	.word	0x3dd0b461
   81c78:	2e037073 	.word	0x2e037073
   81c7c:	3ba3198a 	.word	0x3ba3198a
   81c80:	6dc9c883 	.word	0x6dc9c883
   81c84:	3fe45f30 	.word	0x3fe45f30
   81c88:	3fe921fb 	.word	0x3fe921fb
   81c8c:	4002d97b 	.word	0x4002d97b
   81c90:	3ff921fb 	.word	0x3ff921fb
   81c94:	413921fb 	.word	0x413921fb
   81c98:	7fefffff 	.word	0x7fefffff
   81c9c:	41700000 	.word	0x41700000
   81ca0:	000836cc 	.word	0x000836cc
   81ca4:	3fe00000 	.word	0x3fe00000
   81ca8:	0008364c 	.word	0x0008364c
   81cac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   81cb0:	4650      	mov	r0, sl
   81cb2:	4659      	mov	r1, fp
   81cb4:	f000 ffb6 	bl	82c24 <__aeabi_dsub>
   81cb8:	153f      	asrs	r7, r7, #20
   81cba:	f3c1 530a 	ubfx	r3, r1, #20, #11
   81cbe:	1afb      	subs	r3, r7, r3
   81cc0:	2b10      	cmp	r3, #16
   81cc2:	4681      	mov	r9, r0
   81cc4:	4688      	mov	r8, r1
   81cc6:	e9c4 0100 	strd	r0, r1, [r4]
   81cca:	ddab      	ble.n	81c24 <__ieee754_rem_pio2+0x1f4>
   81ccc:	a358      	add	r3, pc, #352	; (adr r3, 81e30 <__ieee754_rem_pio2+0x400>)
   81cce:	e9d3 2300 	ldrd	r2, r3, [r3]
   81cd2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   81cd6:	f001 f959 	bl	82f8c <__aeabi_dmul>
   81cda:	4680      	mov	r8, r0
   81cdc:	4689      	mov	r9, r1
   81cde:	4602      	mov	r2, r0
   81ce0:	460b      	mov	r3, r1
   81ce2:	4650      	mov	r0, sl
   81ce4:	4659      	mov	r1, fp
   81ce6:	f000 ff9d 	bl	82c24 <__aeabi_dsub>
   81cea:	e9cd 0106 	strd	r0, r1, [sp, #24]
   81cee:	4602      	mov	r2, r0
   81cf0:	460b      	mov	r3, r1
   81cf2:	4650      	mov	r0, sl
   81cf4:	4659      	mov	r1, fp
   81cf6:	f000 ff95 	bl	82c24 <__aeabi_dsub>
   81cfa:	4642      	mov	r2, r8
   81cfc:	464b      	mov	r3, r9
   81cfe:	f000 ff91 	bl	82c24 <__aeabi_dsub>
   81d02:	a34d      	add	r3, pc, #308	; (adr r3, 81e38 <__ieee754_rem_pio2+0x408>)
   81d04:	e9d3 2300 	ldrd	r2, r3, [r3]
   81d08:	4680      	mov	r8, r0
   81d0a:	4689      	mov	r9, r1
   81d0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   81d10:	f001 f93c 	bl	82f8c <__aeabi_dmul>
   81d14:	4642      	mov	r2, r8
   81d16:	464b      	mov	r3, r9
   81d18:	f000 ff84 	bl	82c24 <__aeabi_dsub>
   81d1c:	4602      	mov	r2, r0
   81d1e:	460b      	mov	r3, r1
   81d20:	e9cd 0102 	strd	r0, r1, [sp, #8]
   81d24:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   81d28:	f000 ff7c 	bl	82c24 <__aeabi_dsub>
   81d2c:	460b      	mov	r3, r1
   81d2e:	4602      	mov	r2, r0
   81d30:	4688      	mov	r8, r1
   81d32:	f3c1 510a 	ubfx	r1, r1, #20, #11
   81d36:	1a7f      	subs	r7, r7, r1
   81d38:	2f31      	cmp	r7, #49	; 0x31
   81d3a:	4681      	mov	r9, r0
   81d3c:	e9c4 2300 	strd	r2, r3, [r4]
   81d40:	dd72      	ble.n	81e28 <__ieee754_rem_pio2+0x3f8>
   81d42:	a33f      	add	r3, pc, #252	; (adr r3, 81e40 <__ieee754_rem_pio2+0x410>)
   81d44:	e9d3 2300 	ldrd	r2, r3, [r3]
   81d48:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   81d4c:	f001 f91e 	bl	82f8c <__aeabi_dmul>
   81d50:	4680      	mov	r8, r0
   81d52:	4689      	mov	r9, r1
   81d54:	4602      	mov	r2, r0
   81d56:	460b      	mov	r3, r1
   81d58:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   81d5c:	f000 ff62 	bl	82c24 <__aeabi_dsub>
   81d60:	4602      	mov	r2, r0
   81d62:	460b      	mov	r3, r1
   81d64:	4682      	mov	sl, r0
   81d66:	468b      	mov	fp, r1
   81d68:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   81d6c:	f000 ff5a 	bl	82c24 <__aeabi_dsub>
   81d70:	4642      	mov	r2, r8
   81d72:	464b      	mov	r3, r9
   81d74:	f000 ff56 	bl	82c24 <__aeabi_dsub>
   81d78:	a333      	add	r3, pc, #204	; (adr r3, 81e48 <__ieee754_rem_pio2+0x418>)
   81d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
   81d7e:	4680      	mov	r8, r0
   81d80:	4689      	mov	r9, r1
   81d82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   81d86:	f001 f901 	bl	82f8c <__aeabi_dmul>
   81d8a:	4642      	mov	r2, r8
   81d8c:	464b      	mov	r3, r9
   81d8e:	f000 ff49 	bl	82c24 <__aeabi_dsub>
   81d92:	e9cd 0102 	strd	r0, r1, [sp, #8]
   81d96:	e739      	b.n	81c0c <__ieee754_rem_pio2+0x1dc>
   81d98:	f000 ff46 	bl	82c28 <__adddf3>
   81d9c:	4b2e      	ldr	r3, [pc, #184]	; (81e58 <__ieee754_rem_pio2+0x428>)
   81d9e:	4680      	mov	r8, r0
   81da0:	429f      	cmp	r7, r3
   81da2:	4689      	mov	r9, r1
   81da4:	d022      	beq.n	81dec <__ieee754_rem_pio2+0x3bc>
   81da6:	a32a      	add	r3, pc, #168	; (adr r3, 81e50 <__ieee754_rem_pio2+0x420>)
   81da8:	e9d3 2300 	ldrd	r2, r3, [r3]
   81dac:	f000 ff3c 	bl	82c28 <__adddf3>
   81db0:	4602      	mov	r2, r0
   81db2:	460b      	mov	r3, r1
   81db4:	4640      	mov	r0, r8
   81db6:	e9c4 2300 	strd	r2, r3, [r4]
   81dba:	4649      	mov	r1, r9
   81dbc:	f000 ff32 	bl	82c24 <__aeabi_dsub>
   81dc0:	a323      	add	r3, pc, #140	; (adr r3, 81e50 <__ieee754_rem_pio2+0x420>)
   81dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
   81dc6:	f000 ff2f 	bl	82c28 <__adddf3>
   81dca:	f04f 35ff 	mov.w	r5, #4294967295
   81dce:	e9c4 0102 	strd	r0, r1, [r4, #8]
   81dd2:	e6be      	b.n	81b52 <__ieee754_rem_pio2+0x122>
   81dd4:	6862      	ldr	r2, [r4, #4]
   81dd6:	68e3      	ldr	r3, [r4, #12]
   81dd8:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
   81ddc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   81de0:	4245      	negs	r5, r0
   81de2:	6062      	str	r2, [r4, #4]
   81de4:	60e3      	str	r3, [r4, #12]
   81de6:	e6b4      	b.n	81b52 <__ieee754_rem_pio2+0x122>
   81de8:	2303      	movs	r3, #3
   81dea:	e69d      	b.n	81b28 <__ieee754_rem_pio2+0xf8>
   81dec:	a310      	add	r3, pc, #64	; (adr r3, 81e30 <__ieee754_rem_pio2+0x400>)
   81dee:	e9d3 2300 	ldrd	r2, r3, [r3]
   81df2:	f000 ff19 	bl	82c28 <__adddf3>
   81df6:	a310      	add	r3, pc, #64	; (adr r3, 81e38 <__ieee754_rem_pio2+0x408>)
   81df8:	e9d3 2300 	ldrd	r2, r3, [r3]
   81dfc:	4606      	mov	r6, r0
   81dfe:	460f      	mov	r7, r1
   81e00:	f000 ff12 	bl	82c28 <__adddf3>
   81e04:	4602      	mov	r2, r0
   81e06:	460b      	mov	r3, r1
   81e08:	4630      	mov	r0, r6
   81e0a:	e9c4 2300 	strd	r2, r3, [r4]
   81e0e:	4639      	mov	r1, r7
   81e10:	f000 ff08 	bl	82c24 <__aeabi_dsub>
   81e14:	a308      	add	r3, pc, #32	; (adr r3, 81e38 <__ieee754_rem_pio2+0x408>)
   81e16:	e9d3 2300 	ldrd	r2, r3, [r3]
   81e1a:	f000 ff05 	bl	82c28 <__adddf3>
   81e1e:	f04f 35ff 	mov.w	r5, #4294967295
   81e22:	e9c4 0102 	strd	r0, r1, [r4, #8]
   81e26:	e694      	b.n	81b52 <__ieee754_rem_pio2+0x122>
   81e28:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
   81e2c:	e6fa      	b.n	81c24 <__ieee754_rem_pio2+0x1f4>
   81e2e:	bf00      	nop
   81e30:	1a600000 	.word	0x1a600000
   81e34:	3dd0b461 	.word	0x3dd0b461
   81e38:	2e037073 	.word	0x2e037073
   81e3c:	3ba3198a 	.word	0x3ba3198a
   81e40:	2e000000 	.word	0x2e000000
   81e44:	3ba3198a 	.word	0x3ba3198a
   81e48:	252049c1 	.word	0x252049c1
   81e4c:	397b839a 	.word	0x397b839a
   81e50:	1a626331 	.word	0x1a626331
   81e54:	3dd0b461 	.word	0x3dd0b461
   81e58:	3ff921fb 	.word	0x3ff921fb
   81e5c:	00000000 	.word	0x00000000

00081e60 <__kernel_cos>:
   81e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81e64:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
   81e68:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
   81e6c:	b085      	sub	sp, #20
   81e6e:	460c      	mov	r4, r1
   81e70:	4692      	mov	sl, r2
   81e72:	469b      	mov	fp, r3
   81e74:	4605      	mov	r5, r0
   81e76:	da6b      	bge.n	81f50 <__kernel_cos+0xf0>
   81e78:	f001 fb22 	bl	834c0 <__aeabi_d2iz>
   81e7c:	2800      	cmp	r0, #0
   81e7e:	f000 80e7 	beq.w	82050 <__kernel_cos+0x1f0>
   81e82:	462a      	mov	r2, r5
   81e84:	4623      	mov	r3, r4
   81e86:	4628      	mov	r0, r5
   81e88:	4621      	mov	r1, r4
   81e8a:	f001 f87f 	bl	82f8c <__aeabi_dmul>
   81e8e:	a374      	add	r3, pc, #464	; (adr r3, 82060 <__kernel_cos+0x200>)
   81e90:	e9d3 2300 	ldrd	r2, r3, [r3]
   81e94:	4680      	mov	r8, r0
   81e96:	4689      	mov	r9, r1
   81e98:	f001 f878 	bl	82f8c <__aeabi_dmul>
   81e9c:	a372      	add	r3, pc, #456	; (adr r3, 82068 <__kernel_cos+0x208>)
   81e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
   81ea2:	f000 fec1 	bl	82c28 <__adddf3>
   81ea6:	4642      	mov	r2, r8
   81ea8:	464b      	mov	r3, r9
   81eaa:	f001 f86f 	bl	82f8c <__aeabi_dmul>
   81eae:	a370      	add	r3, pc, #448	; (adr r3, 82070 <__kernel_cos+0x210>)
   81eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
   81eb4:	f000 feb6 	bl	82c24 <__aeabi_dsub>
   81eb8:	4642      	mov	r2, r8
   81eba:	464b      	mov	r3, r9
   81ebc:	f001 f866 	bl	82f8c <__aeabi_dmul>
   81ec0:	a36d      	add	r3, pc, #436	; (adr r3, 82078 <__kernel_cos+0x218>)
   81ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
   81ec6:	f000 feaf 	bl	82c28 <__adddf3>
   81eca:	4642      	mov	r2, r8
   81ecc:	464b      	mov	r3, r9
   81ece:	f001 f85d 	bl	82f8c <__aeabi_dmul>
   81ed2:	a36b      	add	r3, pc, #428	; (adr r3, 82080 <__kernel_cos+0x220>)
   81ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
   81ed8:	f000 fea4 	bl	82c24 <__aeabi_dsub>
   81edc:	4642      	mov	r2, r8
   81ede:	464b      	mov	r3, r9
   81ee0:	f001 f854 	bl	82f8c <__aeabi_dmul>
   81ee4:	a368      	add	r3, pc, #416	; (adr r3, 82088 <__kernel_cos+0x228>)
   81ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
   81eea:	f000 fe9d 	bl	82c28 <__adddf3>
   81eee:	4642      	mov	r2, r8
   81ef0:	464b      	mov	r3, r9
   81ef2:	f001 f84b 	bl	82f8c <__aeabi_dmul>
   81ef6:	e9cd 0100 	strd	r0, r1, [sp]
   81efa:	2200      	movs	r2, #0
   81efc:	4b64      	ldr	r3, [pc, #400]	; (82090 <__kernel_cos+0x230>)
   81efe:	4640      	mov	r0, r8
   81f00:	4649      	mov	r1, r9
   81f02:	f001 f843 	bl	82f8c <__aeabi_dmul>
   81f06:	e9dd 2300 	ldrd	r2, r3, [sp]
   81f0a:	4606      	mov	r6, r0
   81f0c:	460f      	mov	r7, r1
   81f0e:	4640      	mov	r0, r8
   81f10:	4649      	mov	r1, r9
   81f12:	f001 f83b 	bl	82f8c <__aeabi_dmul>
   81f16:	4652      	mov	r2, sl
   81f18:	4680      	mov	r8, r0
   81f1a:	4689      	mov	r9, r1
   81f1c:	465b      	mov	r3, fp
   81f1e:	4628      	mov	r0, r5
   81f20:	4621      	mov	r1, r4
   81f22:	f001 f833 	bl	82f8c <__aeabi_dmul>
   81f26:	4602      	mov	r2, r0
   81f28:	460b      	mov	r3, r1
   81f2a:	4640      	mov	r0, r8
   81f2c:	4649      	mov	r1, r9
   81f2e:	f000 fe79 	bl	82c24 <__aeabi_dsub>
   81f32:	4602      	mov	r2, r0
   81f34:	460b      	mov	r3, r1
   81f36:	4630      	mov	r0, r6
   81f38:	4639      	mov	r1, r7
   81f3a:	f000 fe73 	bl	82c24 <__aeabi_dsub>
   81f3e:	4602      	mov	r2, r0
   81f40:	460b      	mov	r3, r1
   81f42:	2000      	movs	r0, #0
   81f44:	4953      	ldr	r1, [pc, #332]	; (82094 <__kernel_cos+0x234>)
   81f46:	f000 fe6d 	bl	82c24 <__aeabi_dsub>
   81f4a:	b005      	add	sp, #20
   81f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81f50:	4602      	mov	r2, r0
   81f52:	460b      	mov	r3, r1
   81f54:	f001 f81a 	bl	82f8c <__aeabi_dmul>
   81f58:	a341      	add	r3, pc, #260	; (adr r3, 82060 <__kernel_cos+0x200>)
   81f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
   81f5e:	4680      	mov	r8, r0
   81f60:	4689      	mov	r9, r1
   81f62:	f001 f813 	bl	82f8c <__aeabi_dmul>
   81f66:	a340      	add	r3, pc, #256	; (adr r3, 82068 <__kernel_cos+0x208>)
   81f68:	e9d3 2300 	ldrd	r2, r3, [r3]
   81f6c:	f000 fe5c 	bl	82c28 <__adddf3>
   81f70:	4642      	mov	r2, r8
   81f72:	464b      	mov	r3, r9
   81f74:	f001 f80a 	bl	82f8c <__aeabi_dmul>
   81f78:	a33d      	add	r3, pc, #244	; (adr r3, 82070 <__kernel_cos+0x210>)
   81f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
   81f7e:	f000 fe51 	bl	82c24 <__aeabi_dsub>
   81f82:	4642      	mov	r2, r8
   81f84:	464b      	mov	r3, r9
   81f86:	f001 f801 	bl	82f8c <__aeabi_dmul>
   81f8a:	a33b      	add	r3, pc, #236	; (adr r3, 82078 <__kernel_cos+0x218>)
   81f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
   81f90:	f000 fe4a 	bl	82c28 <__adddf3>
   81f94:	4642      	mov	r2, r8
   81f96:	464b      	mov	r3, r9
   81f98:	f000 fff8 	bl	82f8c <__aeabi_dmul>
   81f9c:	a338      	add	r3, pc, #224	; (adr r3, 82080 <__kernel_cos+0x220>)
   81f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
   81fa2:	f000 fe3f 	bl	82c24 <__aeabi_dsub>
   81fa6:	4642      	mov	r2, r8
   81fa8:	464b      	mov	r3, r9
   81faa:	f000 ffef 	bl	82f8c <__aeabi_dmul>
   81fae:	a336      	add	r3, pc, #216	; (adr r3, 82088 <__kernel_cos+0x228>)
   81fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
   81fb4:	f000 fe38 	bl	82c28 <__adddf3>
   81fb8:	464b      	mov	r3, r9
   81fba:	4642      	mov	r2, r8
   81fbc:	f000 ffe6 	bl	82f8c <__aeabi_dmul>
   81fc0:	4b35      	ldr	r3, [pc, #212]	; (82098 <__kernel_cos+0x238>)
   81fc2:	e9cd 0100 	strd	r0, r1, [sp]
   81fc6:	429e      	cmp	r6, r3
   81fc8:	dd97      	ble.n	81efa <__kernel_cos+0x9a>
   81fca:	4b34      	ldr	r3, [pc, #208]	; (8209c <__kernel_cos+0x23c>)
   81fcc:	2200      	movs	r2, #0
   81fce:	429e      	cmp	r6, r3
   81fd0:	dc38      	bgt.n	82044 <__kernel_cos+0x1e4>
   81fd2:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
   81fd6:	2000      	movs	r0, #0
   81fd8:	492e      	ldr	r1, [pc, #184]	; (82094 <__kernel_cos+0x234>)
   81fda:	4616      	mov	r6, r2
   81fdc:	461f      	mov	r7, r3
   81fde:	f000 fe21 	bl	82c24 <__aeabi_dsub>
   81fe2:	e9cd 0102 	strd	r0, r1, [sp, #8]
   81fe6:	2200      	movs	r2, #0
   81fe8:	4b29      	ldr	r3, [pc, #164]	; (82090 <__kernel_cos+0x230>)
   81fea:	4640      	mov	r0, r8
   81fec:	4649      	mov	r1, r9
   81fee:	f000 ffcd 	bl	82f8c <__aeabi_dmul>
   81ff2:	4632      	mov	r2, r6
   81ff4:	463b      	mov	r3, r7
   81ff6:	f000 fe15 	bl	82c24 <__aeabi_dsub>
   81ffa:	e9dd 2300 	ldrd	r2, r3, [sp]
   81ffe:	4606      	mov	r6, r0
   82000:	460f      	mov	r7, r1
   82002:	4640      	mov	r0, r8
   82004:	4649      	mov	r1, r9
   82006:	f000 ffc1 	bl	82f8c <__aeabi_dmul>
   8200a:	4652      	mov	r2, sl
   8200c:	4680      	mov	r8, r0
   8200e:	4689      	mov	r9, r1
   82010:	465b      	mov	r3, fp
   82012:	4628      	mov	r0, r5
   82014:	4621      	mov	r1, r4
   82016:	f000 ffb9 	bl	82f8c <__aeabi_dmul>
   8201a:	4602      	mov	r2, r0
   8201c:	460b      	mov	r3, r1
   8201e:	4640      	mov	r0, r8
   82020:	4649      	mov	r1, r9
   82022:	f000 fdff 	bl	82c24 <__aeabi_dsub>
   82026:	4602      	mov	r2, r0
   82028:	460b      	mov	r3, r1
   8202a:	4630      	mov	r0, r6
   8202c:	4639      	mov	r1, r7
   8202e:	f000 fdf9 	bl	82c24 <__aeabi_dsub>
   82032:	4602      	mov	r2, r0
   82034:	460b      	mov	r3, r1
   82036:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   8203a:	f000 fdf3 	bl	82c24 <__aeabi_dsub>
   8203e:	b005      	add	sp, #20
   82040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82044:	4b16      	ldr	r3, [pc, #88]	; (820a0 <__kernel_cos+0x240>)
   82046:	2600      	movs	r6, #0
   82048:	e9cd 2302 	strd	r2, r3, [sp, #8]
   8204c:	4f15      	ldr	r7, [pc, #84]	; (820a4 <__kernel_cos+0x244>)
   8204e:	e7ca      	b.n	81fe6 <__kernel_cos+0x186>
   82050:	4910      	ldr	r1, [pc, #64]	; (82094 <__kernel_cos+0x234>)
   82052:	2000      	movs	r0, #0
   82054:	b005      	add	sp, #20
   82056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8205a:	bf00      	nop
   8205c:	f3af 8000 	nop.w
   82060:	be8838d4 	.word	0xbe8838d4
   82064:	bda8fae9 	.word	0xbda8fae9
   82068:	bdb4b1c4 	.word	0xbdb4b1c4
   8206c:	3e21ee9e 	.word	0x3e21ee9e
   82070:	809c52ad 	.word	0x809c52ad
   82074:	3e927e4f 	.word	0x3e927e4f
   82078:	19cb1590 	.word	0x19cb1590
   8207c:	3efa01a0 	.word	0x3efa01a0
   82080:	16c15177 	.word	0x16c15177
   82084:	3f56c16c 	.word	0x3f56c16c
   82088:	5555554c 	.word	0x5555554c
   8208c:	3fa55555 	.word	0x3fa55555
   82090:	3fe00000 	.word	0x3fe00000
   82094:	3ff00000 	.word	0x3ff00000
   82098:	3fd33332 	.word	0x3fd33332
   8209c:	3fe90000 	.word	0x3fe90000
   820a0:	3fe70000 	.word	0x3fe70000
   820a4:	3fd20000 	.word	0x3fd20000

000820a8 <__kernel_rem_pio2>:
   820a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   820ac:	4c7a      	ldr	r4, [pc, #488]	; (82298 <__kernel_rem_pio2+0x1f0>)
   820ae:	f5ad 7d1d 	sub.w	sp, sp, #628	; 0x274
   820b2:	461f      	mov	r7, r3
   820b4:	930c      	str	r3, [sp, #48]	; 0x30
   820b6:	1ed3      	subs	r3, r2, #3
   820b8:	fb84 5403 	smull	r5, r4, r4, r3
   820bc:	17db      	asrs	r3, r3, #31
   820be:	ebc3 03a4 	rsb	r3, r3, r4, asr #2
   820c2:	9ea6      	ldr	r6, [sp, #664]	; 0x298
   820c4:	4c75      	ldr	r4, [pc, #468]	; (8229c <__kernel_rem_pio2+0x1f4>)
   820c6:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
   820ca:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
   820ce:	1c6b      	adds	r3, r5, #1
   820d0:	4626      	mov	r6, r4
   820d2:	9409      	str	r4, [sp, #36]	; 0x24
   820d4:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
   820d8:	1e7c      	subs	r4, r7, #1
   820da:	950d      	str	r5, [sp, #52]	; 0x34
   820dc:	9402      	str	r4, [sp, #8]
   820de:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   820e2:	1b2d      	subs	r5, r5, r4
   820e4:	1934      	adds	r4, r6, r4
   820e6:	9004      	str	r0, [sp, #16]
   820e8:	910a      	str	r1, [sp, #40]	; 0x28
   820ea:	9308      	str	r3, [sp, #32]
   820ec:	d416      	bmi.n	8211c <__kernel_rem_pio2+0x74>
   820ee:	442c      	add	r4, r5
   820f0:	3401      	adds	r4, #1
   820f2:	ae22      	add	r6, sp, #136	; 0x88
   820f4:	9fa7      	ldr	r7, [sp, #668]	; 0x29c
   820f6:	e008      	b.n	8210a <__kernel_rem_pio2+0x62>
   820f8:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
   820fc:	f000 fee0 	bl	82ec0 <__aeabi_i2d>
   82100:	3501      	adds	r5, #1
   82102:	42a5      	cmp	r5, r4
   82104:	e9e6 0102 	strd	r0, r1, [r6, #8]!
   82108:	d008      	beq.n	8211c <__kernel_rem_pio2+0x74>
   8210a:	2d00      	cmp	r5, #0
   8210c:	daf4      	bge.n	820f8 <__kernel_rem_pio2+0x50>
   8210e:	3501      	adds	r5, #1
   82110:	2000      	movs	r0, #0
   82112:	2100      	movs	r1, #0
   82114:	42a5      	cmp	r5, r4
   82116:	e9e6 0102 	strd	r0, r1, [r6, #8]!
   8211a:	d1f6      	bne.n	8210a <__kernel_rem_pio2+0x62>
   8211c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8211e:	2b00      	cmp	r3, #0
   82120:	db31      	blt.n	82186 <__kernel_rem_pio2+0xde>
   82122:	9a09      	ldr	r2, [sp, #36]	; 0x24
   82124:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   82126:	a974      	add	r1, sp, #464	; 0x1d0
   82128:	eb01 0bc2 	add.w	fp, r1, r2, lsl #3
   8212c:	ebc3 7343 	rsb	r3, r3, r3, lsl #29
   82130:	9a02      	ldr	r2, [sp, #8]
   82132:	a924      	add	r1, sp, #144	; 0x90
   82134:	00db      	lsls	r3, r3, #3
   82136:	eb01 09c2 	add.w	r9, r1, r2, lsl #3
   8213a:	9301      	str	r3, [sp, #4]
   8213c:	f50d 7ae4 	add.w	sl, sp, #456	; 0x1c8
   82140:	9b02      	ldr	r3, [sp, #8]
   82142:	2b00      	cmp	r3, #0
   82144:	f2c0 8190 	blt.w	82468 <__kernel_rem_pio2+0x3c0>
   82148:	464c      	mov	r4, r9
   8214a:	9b04      	ldr	r3, [sp, #16]
   8214c:	2600      	movs	r6, #0
   8214e:	f1a3 0508 	sub.w	r5, r3, #8
   82152:	9b01      	ldr	r3, [sp, #4]
   82154:	2700      	movs	r7, #0
   82156:	eb09 0803 	add.w	r8, r9, r3
   8215a:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
   8215e:	e874 0102 	ldrd	r0, r1, [r4], #-8
   82162:	f000 ff13 	bl	82f8c <__aeabi_dmul>
   82166:	4602      	mov	r2, r0
   82168:	460b      	mov	r3, r1
   8216a:	4630      	mov	r0, r6
   8216c:	4639      	mov	r1, r7
   8216e:	f000 fd5b 	bl	82c28 <__adddf3>
   82172:	4544      	cmp	r4, r8
   82174:	4606      	mov	r6, r0
   82176:	460f      	mov	r7, r1
   82178:	d1ef      	bne.n	8215a <__kernel_rem_pio2+0xb2>
   8217a:	e9ea 6702 	strd	r6, r7, [sl, #8]!
   8217e:	45da      	cmp	sl, fp
   82180:	f109 0908 	add.w	r9, r9, #8
   82184:	d1dc      	bne.n	82140 <__kernel_rem_pio2+0x98>
   82186:	9b09      	ldr	r3, [sp, #36]	; 0x24
   82188:	a910      	add	r1, sp, #64	; 0x40
   8218a:	461d      	mov	r5, r3
   8218c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   82190:	3b02      	subs	r3, #2
   82192:	009b      	lsls	r3, r3, #2
   82194:	1d1a      	adds	r2, r3, #4
   82196:	440a      	add	r2, r1
   82198:	440b      	add	r3, r1
   8219a:	920f      	str	r2, [sp, #60]	; 0x3c
   8219c:	930e      	str	r3, [sp, #56]	; 0x38
   8219e:	ab9c      	add	r3, sp, #624	; 0x270
   821a0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
   821a4:	2d00      	cmp	r5, #0
   821a6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
   821aa:	dd2b      	ble.n	82204 <__kernel_rem_pio2+0x15c>
   821ac:	ab9c      	add	r3, sp, #624	; 0x270
   821ae:	eb03 04c5 	add.w	r4, r3, r5, lsl #3
   821b2:	3ca8      	subs	r4, #168	; 0xa8
   821b4:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
   821b8:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
   821bc:	2200      	movs	r2, #0
   821be:	4b38      	ldr	r3, [pc, #224]	; (822a0 <__kernel_rem_pio2+0x1f8>)
   821c0:	4630      	mov	r0, r6
   821c2:	4639      	mov	r1, r7
   821c4:	f000 fee2 	bl	82f8c <__aeabi_dmul>
   821c8:	f001 f97a 	bl	834c0 <__aeabi_d2iz>
   821cc:	f000 fe78 	bl	82ec0 <__aeabi_i2d>
   821d0:	2200      	movs	r2, #0
   821d2:	4b34      	ldr	r3, [pc, #208]	; (822a4 <__kernel_rem_pio2+0x1fc>)
   821d4:	4680      	mov	r8, r0
   821d6:	4689      	mov	r9, r1
   821d8:	f000 fed8 	bl	82f8c <__aeabi_dmul>
   821dc:	4602      	mov	r2, r0
   821de:	460b      	mov	r3, r1
   821e0:	4630      	mov	r0, r6
   821e2:	4639      	mov	r1, r7
   821e4:	f000 fd1e 	bl	82c24 <__aeabi_dsub>
   821e8:	f001 f96a 	bl	834c0 <__aeabi_d2iz>
   821ec:	e874 2302 	ldrd	r2, r3, [r4], #-8
   821f0:	f84a 0f04 	str.w	r0, [sl, #4]!
   821f4:	4649      	mov	r1, r9
   821f6:	4640      	mov	r0, r8
   821f8:	f000 fd16 	bl	82c28 <__adddf3>
   821fc:	455c      	cmp	r4, fp
   821fe:	4606      	mov	r6, r0
   82200:	460f      	mov	r7, r1
   82202:	d1db      	bne.n	821bc <__kernel_rem_pio2+0x114>
   82204:	9c08      	ldr	r4, [sp, #32]
   82206:	4630      	mov	r0, r6
   82208:	4639      	mov	r1, r7
   8220a:	4622      	mov	r2, r4
   8220c:	f000 fc8c 	bl	82b28 <scalbn>
   82210:	2200      	movs	r2, #0
   82212:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   82216:	4606      	mov	r6, r0
   82218:	460f      	mov	r7, r1
   8221a:	f000 feb7 	bl	82f8c <__aeabi_dmul>
   8221e:	f000 fbfb 	bl	82a18 <floor>
   82222:	2200      	movs	r2, #0
   82224:	4b20      	ldr	r3, [pc, #128]	; (822a8 <__kernel_rem_pio2+0x200>)
   82226:	f000 feb1 	bl	82f8c <__aeabi_dmul>
   8222a:	4602      	mov	r2, r0
   8222c:	460b      	mov	r3, r1
   8222e:	4630      	mov	r0, r6
   82230:	4639      	mov	r1, r7
   82232:	f000 fcf7 	bl	82c24 <__aeabi_dsub>
   82236:	460f      	mov	r7, r1
   82238:	4606      	mov	r6, r0
   8223a:	f001 f941 	bl	834c0 <__aeabi_d2iz>
   8223e:	4681      	mov	r9, r0
   82240:	f000 fe3e 	bl	82ec0 <__aeabi_i2d>
   82244:	4602      	mov	r2, r0
   82246:	460b      	mov	r3, r1
   82248:	4630      	mov	r0, r6
   8224a:	4639      	mov	r1, r7
   8224c:	f000 fcea 	bl	82c24 <__aeabi_dsub>
   82250:	2c00      	cmp	r4, #0
   82252:	4606      	mov	r6, r0
   82254:	460f      	mov	r7, r1
   82256:	f340 80ee 	ble.w	82436 <__kernel_rem_pio2+0x38e>
   8225a:	1e68      	subs	r0, r5, #1
   8225c:	ab10      	add	r3, sp, #64	; 0x40
   8225e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   82262:	f1c4 0218 	rsb	r2, r4, #24
   82266:	fa43 f102 	asr.w	r1, r3, r2
   8226a:	fa01 f202 	lsl.w	r2, r1, r2
   8226e:	1a9b      	subs	r3, r3, r2
   82270:	f1c4 0817 	rsb	r8, r4, #23
   82274:	aa10      	add	r2, sp, #64	; 0x40
   82276:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
   8227a:	4489      	add	r9, r1
   8227c:	fa43 f808 	asr.w	r8, r3, r8
   82280:	f1b8 0f00 	cmp.w	r8, #0
   82284:	dd3d      	ble.n	82302 <__kernel_rem_pio2+0x25a>
   82286:	2d00      	cmp	r5, #0
   82288:	f109 0901 	add.w	r9, r9, #1
   8228c:	f340 82d5 	ble.w	8283a <__kernel_rem_pio2+0x792>
   82290:	2200      	movs	r2, #0
   82292:	4614      	mov	r4, r2
   82294:	a90f      	add	r1, sp, #60	; 0x3c
   82296:	e011      	b.n	822bc <__kernel_rem_pio2+0x214>
   82298:	2aaaaaab 	.word	0x2aaaaaab
   8229c:	000837d4 	.word	0x000837d4
   822a0:	3e700000 	.word	0x3e700000
   822a4:	41700000 	.word	0x41700000
   822a8:	40200000 	.word	0x40200000
   822ac:	f1c3 7080 	rsb	r0, r3, #16777216	; 0x1000000
   822b0:	b10b      	cbz	r3, 822b6 <__kernel_rem_pio2+0x20e>
   822b2:	6008      	str	r0, [r1, #0]
   822b4:	2401      	movs	r4, #1
   822b6:	3201      	adds	r2, #1
   822b8:	4295      	cmp	r5, r2
   822ba:	dd0d      	ble.n	822d8 <__kernel_rem_pio2+0x230>
   822bc:	f851 3f04 	ldr.w	r3, [r1, #4]!
   822c0:	2c00      	cmp	r4, #0
   822c2:	d0f3      	beq.n	822ac <__kernel_rem_pio2+0x204>
   822c4:	f1c3 13ff 	rsb	r3, r3, #16711935	; 0xff00ff
   822c8:	3201      	adds	r2, #1
   822ca:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   822ce:	4295      	cmp	r5, r2
   822d0:	600b      	str	r3, [r1, #0]
   822d2:	f04f 0401 	mov.w	r4, #1
   822d6:	dcf1      	bgt.n	822bc <__kernel_rem_pio2+0x214>
   822d8:	9b08      	ldr	r3, [sp, #32]
   822da:	2b00      	cmp	r3, #0
   822dc:	dd0d      	ble.n	822fa <__kernel_rem_pio2+0x252>
   822de:	2b01      	cmp	r3, #1
   822e0:	f000 80b1 	beq.w	82446 <__kernel_rem_pio2+0x39e>
   822e4:	2b02      	cmp	r3, #2
   822e6:	d108      	bne.n	822fa <__kernel_rem_pio2+0x252>
   822e8:	1e6a      	subs	r2, r5, #1
   822ea:	ab10      	add	r3, sp, #64	; 0x40
   822ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   822f0:	a910      	add	r1, sp, #64	; 0x40
   822f2:	f3c3 0315 	ubfx	r3, r3, #0, #22
   822f6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   822fa:	f1b8 0f02 	cmp.w	r8, #2
   822fe:	f000 8081 	beq.w	82404 <__kernel_rem_pio2+0x35c>
   82302:	2200      	movs	r2, #0
   82304:	2300      	movs	r3, #0
   82306:	4630      	mov	r0, r6
   82308:	4639      	mov	r1, r7
   8230a:	f001 f8a7 	bl	8345c <__aeabi_dcmpeq>
   8230e:	2800      	cmp	r0, #0
   82310:	f000 825d 	beq.w	827ce <__kernel_rem_pio2+0x726>
   82314:	9b09      	ldr	r3, [sp, #36]	; 0x24
   82316:	f105 3bff 	add.w	fp, r5, #4294967295
   8231a:	455b      	cmp	r3, fp
   8231c:	dc10      	bgt.n	82340 <__kernel_rem_pio2+0x298>
   8231e:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
   82322:	aa10      	add	r2, sp, #64	; 0x40
   82324:	3b01      	subs	r3, #1
   82326:	980f      	ldr	r0, [sp, #60]	; 0x3c
   82328:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   8232c:	2200      	movs	r2, #0
   8232e:	f853 1904 	ldr.w	r1, [r3], #-4
   82332:	4283      	cmp	r3, r0
   82334:	ea42 0201 	orr.w	r2, r2, r1
   82338:	d1f9      	bne.n	8232e <__kernel_rem_pio2+0x286>
   8233a:	2a00      	cmp	r2, #0
   8233c:	f040 80b1 	bne.w	824a2 <__kernel_rem_pio2+0x3fa>
   82340:	9b09      	ldr	r3, [sp, #36]	; 0x24
   82342:	aa10      	add	r2, sp, #64	; 0x40
   82344:	3b01      	subs	r3, #1
   82346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   8234a:	2b00      	cmp	r3, #0
   8234c:	f040 8273 	bne.w	82836 <__kernel_rem_pio2+0x78e>
   82350:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   82352:	2301      	movs	r3, #1
   82354:	f852 1904 	ldr.w	r1, [r2], #-4
   82358:	3301      	adds	r3, #1
   8235a:	2900      	cmp	r1, #0
   8235c:	d0fa      	beq.n	82354 <__kernel_rem_pio2+0x2ac>
   8235e:	18e9      	adds	r1, r5, r3
   82360:	1c6a      	adds	r2, r5, #1
   82362:	428a      	cmp	r2, r1
   82364:	910b      	str	r1, [sp, #44]	; 0x2c
   82366:	dc4b      	bgt.n	82400 <__kernel_rem_pio2+0x358>
   82368:	990d      	ldr	r1, [sp, #52]	; 0x34
   8236a:	980c      	ldr	r0, [sp, #48]	; 0x30
   8236c:	1851      	adds	r1, r2, r1
   8236e:	00db      	lsls	r3, r3, #3
   82370:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   82374:	9305      	str	r3, [sp, #20]
   82376:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
   82378:	4405      	add	r5, r0
   8237a:	3901      	subs	r1, #1
   8237c:	00e8      	lsls	r0, r5, #3
   8237e:	eb03 0a81 	add.w	sl, r3, r1, lsl #2
   82382:	ab24      	add	r3, sp, #144	; 0x90
   82384:	00d2      	lsls	r2, r2, #3
   82386:	eb03 0b00 	add.w	fp, r3, r0
   8238a:	ab74      	add	r3, sp, #464	; 0x1d0
   8238c:	4413      	add	r3, r2
   8238e:	9301      	str	r3, [sp, #4]
   82390:	f1a2 0308 	sub.w	r3, r2, #8
   82394:	9006      	str	r0, [sp, #24]
   82396:	9307      	str	r3, [sp, #28]
   82398:	f04f 0900 	mov.w	r9, #0
   8239c:	f85a 0f04 	ldr.w	r0, [sl, #4]!
   823a0:	f000 fd8e 	bl	82ec0 <__aeabi_i2d>
   823a4:	9b02      	ldr	r3, [sp, #8]
   823a6:	e8eb 0102 	strd	r0, r1, [fp], #8
   823aa:	2b00      	cmp	r3, #0
   823ac:	f04f 0600 	mov.w	r6, #0
   823b0:	f04f 0700 	mov.w	r7, #0
   823b4:	db1b      	blt.n	823ee <__kernel_rem_pio2+0x346>
   823b6:	9b06      	ldr	r3, [sp, #24]
   823b8:	eb03 0409 	add.w	r4, r3, r9
   823bc:	9b07      	ldr	r3, [sp, #28]
   823be:	eb09 0803 	add.w	r8, r9, r3
   823c2:	ab24      	add	r3, sp, #144	; 0x90
   823c4:	441c      	add	r4, r3
   823c6:	4498      	add	r8, r3
   823c8:	9b04      	ldr	r3, [sp, #16]
   823ca:	f1a3 0508 	sub.w	r5, r3, #8
   823ce:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
   823d2:	e874 0102 	ldrd	r0, r1, [r4], #-8
   823d6:	f000 fdd9 	bl	82f8c <__aeabi_dmul>
   823da:	4602      	mov	r2, r0
   823dc:	460b      	mov	r3, r1
   823de:	4630      	mov	r0, r6
   823e0:	4639      	mov	r1, r7
   823e2:	f000 fc21 	bl	82c28 <__adddf3>
   823e6:	4544      	cmp	r4, r8
   823e8:	4606      	mov	r6, r0
   823ea:	460f      	mov	r7, r1
   823ec:	d1ef      	bne.n	823ce <__kernel_rem_pio2+0x326>
   823ee:	9b01      	ldr	r3, [sp, #4]
   823f0:	f109 0908 	add.w	r9, r9, #8
   823f4:	e8e3 6702 	strd	r6, r7, [r3], #8
   823f8:	9301      	str	r3, [sp, #4]
   823fa:	9b05      	ldr	r3, [sp, #20]
   823fc:	4599      	cmp	r9, r3
   823fe:	d1cd      	bne.n	8239c <__kernel_rem_pio2+0x2f4>
   82400:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   82402:	e6cc      	b.n	8219e <__kernel_rem_pio2+0xf6>
   82404:	4632      	mov	r2, r6
   82406:	463b      	mov	r3, r7
   82408:	2000      	movs	r0, #0
   8240a:	49b1      	ldr	r1, [pc, #708]	; (826d0 <__kernel_rem_pio2+0x628>)
   8240c:	f000 fc0a 	bl	82c24 <__aeabi_dsub>
   82410:	4606      	mov	r6, r0
   82412:	460f      	mov	r7, r1
   82414:	2c00      	cmp	r4, #0
   82416:	f43f af74 	beq.w	82302 <__kernel_rem_pio2+0x25a>
   8241a:	9a08      	ldr	r2, [sp, #32]
   8241c:	2000      	movs	r0, #0
   8241e:	49ac      	ldr	r1, [pc, #688]	; (826d0 <__kernel_rem_pio2+0x628>)
   82420:	f000 fb82 	bl	82b28 <scalbn>
   82424:	4602      	mov	r2, r0
   82426:	460b      	mov	r3, r1
   82428:	4630      	mov	r0, r6
   8242a:	4639      	mov	r1, r7
   8242c:	f000 fbfa 	bl	82c24 <__aeabi_dsub>
   82430:	4606      	mov	r6, r0
   82432:	460f      	mov	r7, r1
   82434:	e765      	b.n	82302 <__kernel_rem_pio2+0x25a>
   82436:	d110      	bne.n	8245a <__kernel_rem_pio2+0x3b2>
   82438:	1e6b      	subs	r3, r5, #1
   8243a:	aa10      	add	r2, sp, #64	; 0x40
   8243c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   82440:	ea4f 58e3 	mov.w	r8, r3, asr #23
   82444:	e71c      	b.n	82280 <__kernel_rem_pio2+0x1d8>
   82446:	1e6a      	subs	r2, r5, #1
   82448:	ab10      	add	r3, sp, #64	; 0x40
   8244a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   8244e:	a910      	add	r1, sp, #64	; 0x40
   82450:	f3c3 0316 	ubfx	r3, r3, #0, #23
   82454:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   82458:	e74f      	b.n	822fa <__kernel_rem_pio2+0x252>
   8245a:	2200      	movs	r2, #0
   8245c:	4b9d      	ldr	r3, [pc, #628]	; (826d4 <__kernel_rem_pio2+0x62c>)
   8245e:	f001 f81b 	bl	83498 <__aeabi_dcmpge>
   82462:	b958      	cbnz	r0, 8247c <__kernel_rem_pio2+0x3d4>
   82464:	4680      	mov	r8, r0
   82466:	e74c      	b.n	82302 <__kernel_rem_pio2+0x25a>
   82468:	2600      	movs	r6, #0
   8246a:	2700      	movs	r7, #0
   8246c:	e9ea 6702 	strd	r6, r7, [sl, #8]!
   82470:	45da      	cmp	sl, fp
   82472:	f109 0908 	add.w	r9, r9, #8
   82476:	f47f ae63 	bne.w	82140 <__kernel_rem_pio2+0x98>
   8247a:	e684      	b.n	82186 <__kernel_rem_pio2+0xde>
   8247c:	2d00      	cmp	r5, #0
   8247e:	f109 0901 	add.w	r9, r9, #1
   82482:	bfc8      	it	gt
   82484:	f04f 0802 	movgt.w	r8, #2
   82488:	f73f af02 	bgt.w	82290 <__kernel_rem_pio2+0x1e8>
   8248c:	4632      	mov	r2, r6
   8248e:	463b      	mov	r3, r7
   82490:	2000      	movs	r0, #0
   82492:	498f      	ldr	r1, [pc, #572]	; (826d0 <__kernel_rem_pio2+0x628>)
   82494:	f000 fbc6 	bl	82c24 <__aeabi_dsub>
   82498:	f04f 0802 	mov.w	r8, #2
   8249c:	4606      	mov	r6, r0
   8249e:	460f      	mov	r7, r1
   824a0:	e72f      	b.n	82302 <__kernel_rem_pio2+0x25a>
   824a2:	9a08      	ldr	r2, [sp, #32]
   824a4:	ab10      	add	r3, sp, #64	; 0x40
   824a6:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
   824aa:	3a18      	subs	r2, #24
   824ac:	f8cd 9014 	str.w	r9, [sp, #20]
   824b0:	f8cd 8004 	str.w	r8, [sp, #4]
   824b4:	9208      	str	r2, [sp, #32]
   824b6:	b96b      	cbnz	r3, 824d4 <__kernel_rem_pio2+0x42c>
   824b8:	f10b 4380 	add.w	r3, fp, #1073741824	; 0x40000000
   824bc:	3b01      	subs	r3, #1
   824be:	a910      	add	r1, sp, #64	; 0x40
   824c0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   824c4:	f853 1904 	ldr.w	r1, [r3], #-4
   824c8:	f10b 3bff 	add.w	fp, fp, #4294967295
   824cc:	3a18      	subs	r2, #24
   824ce:	2900      	cmp	r1, #0
   824d0:	d0f8      	beq.n	824c4 <__kernel_rem_pio2+0x41c>
   824d2:	9208      	str	r2, [sp, #32]
   824d4:	9a08      	ldr	r2, [sp, #32]
   824d6:	2000      	movs	r0, #0
   824d8:	497d      	ldr	r1, [pc, #500]	; (826d0 <__kernel_rem_pio2+0x628>)
   824da:	f000 fb25 	bl	82b28 <scalbn>
   824de:	f1bb 0f00 	cmp.w	fp, #0
   824e2:	4604      	mov	r4, r0
   824e4:	460d      	mov	r5, r1
   824e6:	f2c0 81b8 	blt.w	8285a <__kernel_rem_pio2+0x7b2>
   824ea:	ea4f 03cb 	mov.w	r3, fp, lsl #3
   824ee:	f50d 78e8 	add.w	r8, sp, #464	; 0x1d0
   824f2:	aa10      	add	r2, sp, #64	; 0x40
   824f4:	eb02 068b 	add.w	r6, r2, fp, lsl #2
   824f8:	eb08 0903 	add.w	r9, r8, r3
   824fc:	9304      	str	r3, [sp, #16]
   824fe:	3604      	adds	r6, #4
   82500:	f109 0708 	add.w	r7, r9, #8
   82504:	f856 0d04 	ldr.w	r0, [r6, #-4]!
   82508:	f000 fcda 	bl	82ec0 <__aeabi_i2d>
   8250c:	4622      	mov	r2, r4
   8250e:	462b      	mov	r3, r5
   82510:	f000 fd3c 	bl	82f8c <__aeabi_dmul>
   82514:	2200      	movs	r2, #0
   82516:	e967 0102 	strd	r0, r1, [r7, #-8]!
   8251a:	4b6f      	ldr	r3, [pc, #444]	; (826d8 <__kernel_rem_pio2+0x630>)
   8251c:	4620      	mov	r0, r4
   8251e:	4629      	mov	r1, r5
   82520:	f000 fd34 	bl	82f8c <__aeabi_dmul>
   82524:	45b8      	cmp	r8, r7
   82526:	4604      	mov	r4, r0
   82528:	460d      	mov	r5, r1
   8252a:	d1eb      	bne.n	82504 <__kernel_rem_pio2+0x45c>
   8252c:	464b      	mov	r3, r9
   8252e:	f8cd b018 	str.w	fp, [sp, #24]
   82532:	469b      	mov	fp, r3
   82534:	f50d 7a98 	add.w	sl, sp, #304	; 0x130
   82538:	f8cd a008 	str.w	sl, [sp, #8]
   8253c:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
   82540:	f04f 0900 	mov.w	r9, #0
   82544:	f1ba 0f00 	cmp.w	sl, #0
   82548:	f2c0 8128 	blt.w	8279c <__kernel_rem_pio2+0x6f4>
   8254c:	a35e      	add	r3, pc, #376	; (adr r3, 826c8 <__kernel_rem_pio2+0x620>)
   8254e:	e9d3 2300 	ldrd	r2, r3, [r3]
   82552:	f8df 8188 	ldr.w	r8, [pc, #392]	; 826dc <__kernel_rem_pio2+0x634>
   82556:	465d      	mov	r5, fp
   82558:	2600      	movs	r6, #0
   8255a:	2700      	movs	r7, #0
   8255c:	2400      	movs	r4, #0
   8255e:	e003      	b.n	82568 <__kernel_rem_pio2+0x4c0>
   82560:	45a1      	cmp	r9, r4
   82562:	db10      	blt.n	82586 <__kernel_rem_pio2+0x4de>
   82564:	e9f8 2302 	ldrd	r2, r3, [r8, #8]!
   82568:	e8f5 0102 	ldrd	r0, r1, [r5], #8
   8256c:	f000 fd0e 	bl	82f8c <__aeabi_dmul>
   82570:	4602      	mov	r2, r0
   82572:	460b      	mov	r3, r1
   82574:	4630      	mov	r0, r6
   82576:	4639      	mov	r1, r7
   82578:	f000 fb56 	bl	82c28 <__adddf3>
   8257c:	3401      	adds	r4, #1
   8257e:	45a2      	cmp	sl, r4
   82580:	4606      	mov	r6, r0
   82582:	460f      	mov	r7, r1
   82584:	daec      	bge.n	82560 <__kernel_rem_pio2+0x4b8>
   82586:	9b02      	ldr	r3, [sp, #8]
   82588:	f1ab 0b08 	sub.w	fp, fp, #8
   8258c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   82590:	e9c3 6700 	strd	r6, r7, [r3]
   82594:	ab72      	add	r3, sp, #456	; 0x1c8
   82596:	455b      	cmp	r3, fp
   82598:	f109 0901 	add.w	r9, r9, #1
   8259c:	d1d2      	bne.n	82544 <__kernel_rem_pio2+0x49c>
   8259e:	9ba6      	ldr	r3, [sp, #664]	; 0x298
   825a0:	f8dd b018 	ldr.w	fp, [sp, #24]
   825a4:	f8dd a008 	ldr.w	sl, [sp, #8]
   825a8:	2b03      	cmp	r3, #3
   825aa:	f200 8083 	bhi.w	826b4 <__kernel_rem_pio2+0x60c>
   825ae:	e8df f013 	tbh	[pc, r3, lsl #1]
   825b2:	00d3      	.short	0x00d3
   825b4:	00970097 	.word	0x00970097
   825b8:	0004      	.short	0x0004
   825ba:	f1bb 0f00 	cmp.w	fp, #0
   825be:	f340 8156 	ble.w	8286e <__kernel_rem_pio2+0x7c6>
   825c2:	9b04      	ldr	r3, [sp, #16]
   825c4:	f8cd b008 	str.w	fp, [sp, #8]
   825c8:	4453      	add	r3, sl
   825ca:	4698      	mov	r8, r3
   825cc:	e9d3 6700 	ldrd	r6, r7, [r3]
   825d0:	46d3      	mov	fp, sl
   825d2:	e958 9a02 	ldrd	r9, sl, [r8, #-8]
   825d6:	4632      	mov	r2, r6
   825d8:	463b      	mov	r3, r7
   825da:	4648      	mov	r0, r9
   825dc:	4651      	mov	r1, sl
   825de:	f000 fb23 	bl	82c28 <__adddf3>
   825e2:	4604      	mov	r4, r0
   825e4:	460d      	mov	r5, r1
   825e6:	4602      	mov	r2, r0
   825e8:	460b      	mov	r3, r1
   825ea:	4648      	mov	r0, r9
   825ec:	4651      	mov	r1, sl
   825ee:	f000 fb19 	bl	82c24 <__aeabi_dsub>
   825f2:	4632      	mov	r2, r6
   825f4:	463b      	mov	r3, r7
   825f6:	f000 fb17 	bl	82c28 <__adddf3>
   825fa:	e9c8 0100 	strd	r0, r1, [r8]
   825fe:	e968 4502 	strd	r4, r5, [r8, #-8]!
   82602:	45c3      	cmp	fp, r8
   82604:	4626      	mov	r6, r4
   82606:	462f      	mov	r7, r5
   82608:	d1e3      	bne.n	825d2 <__kernel_rem_pio2+0x52a>
   8260a:	46da      	mov	sl, fp
   8260c:	f8dd b008 	ldr.w	fp, [sp, #8]
   82610:	f1bb 0f01 	cmp.w	fp, #1
   82614:	f340 812b 	ble.w	8286e <__kernel_rem_pio2+0x7c6>
   82618:	9b04      	ldr	r3, [sp, #16]
   8261a:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
   8261e:	4453      	add	r3, sl
   82620:	4698      	mov	r8, r3
   82622:	e9d3 6700 	ldrd	r6, r7, [r3]
   82626:	4699      	mov	r9, r3
   82628:	e959 3402 	ldrd	r3, r4, [r9, #-8]
   8262c:	4630      	mov	r0, r6
   8262e:	e9cd 3402 	strd	r3, r4, [sp, #8]
   82632:	461a      	mov	r2, r3
   82634:	4639      	mov	r1, r7
   82636:	4623      	mov	r3, r4
   82638:	f000 faf6 	bl	82c28 <__adddf3>
   8263c:	4604      	mov	r4, r0
   8263e:	460d      	mov	r5, r1
   82640:	4602      	mov	r2, r0
   82642:	460b      	mov	r3, r1
   82644:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   82648:	f000 faec 	bl	82c24 <__aeabi_dsub>
   8264c:	4632      	mov	r2, r6
   8264e:	463b      	mov	r3, r7
   82650:	f000 faea 	bl	82c28 <__adddf3>
   82654:	e9c9 0100 	strd	r0, r1, [r9]
   82658:	e969 4502 	strd	r4, r5, [r9, #-8]!
   8265c:	45cb      	cmp	fp, r9
   8265e:	4626      	mov	r6, r4
   82660:	462f      	mov	r7, r5
   82662:	d1e1      	bne.n	82628 <__kernel_rem_pio2+0x580>
   82664:	2300      	movs	r3, #0
   82666:	461d      	mov	r5, r3
   82668:	f108 0808 	add.w	r8, r8, #8
   8266c:	ac50      	add	r4, sp, #320	; 0x140
   8266e:	4618      	mov	r0, r3
   82670:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
   82674:	4629      	mov	r1, r5
   82676:	f000 fad7 	bl	82c28 <__adddf3>
   8267a:	4544      	cmp	r4, r8
   8267c:	4603      	mov	r3, r0
   8267e:	460d      	mov	r5, r1
   82680:	d1f5      	bne.n	8266e <__kernel_rem_pio2+0x5c6>
   82682:	9a01      	ldr	r2, [sp, #4]
   82684:	2a00      	cmp	r2, #0
   82686:	f000 80da 	beq.w	8283e <__kernel_rem_pio2+0x796>
   8268a:	f8da 4004 	ldr.w	r4, [sl, #4]
   8268e:	f8da 200c 	ldr.w	r2, [sl, #12]
   82692:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   82694:	f8da 1000 	ldr.w	r1, [sl]
   82698:	f8da 0008 	ldr.w	r0, [sl, #8]
   8269c:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
   826a0:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
   826a4:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
   826a8:	617d      	str	r5, [r7, #20]
   826aa:	613b      	str	r3, [r7, #16]
   826ac:	607c      	str	r4, [r7, #4]
   826ae:	60fa      	str	r2, [r7, #12]
   826b0:	6039      	str	r1, [r7, #0]
   826b2:	60b8      	str	r0, [r7, #8]
   826b4:	9b05      	ldr	r3, [sp, #20]
   826b6:	f003 0007 	and.w	r0, r3, #7
   826ba:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
   826be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   826c2:	bf00      	nop
   826c4:	f3af 8000 	nop.w
   826c8:	40000000 	.word	0x40000000
   826cc:	3ff921fb 	.word	0x3ff921fb
   826d0:	3ff00000 	.word	0x3ff00000
   826d4:	3fe00000 	.word	0x3fe00000
   826d8:	3e700000 	.word	0x3e700000
   826dc:	000837e8 	.word	0x000837e8
   826e0:	2400      	movs	r4, #0
   826e2:	4621      	mov	r1, r4
   826e4:	9d04      	ldr	r5, [sp, #16]
   826e6:	3508      	adds	r5, #8
   826e8:	4455      	add	r5, sl
   826ea:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
   826ee:	4620      	mov	r0, r4
   826f0:	f000 fa9a 	bl	82c28 <__adddf3>
   826f4:	4555      	cmp	r5, sl
   826f6:	4604      	mov	r4, r0
   826f8:	d1f7      	bne.n	826ea <__kernel_rem_pio2+0x642>
   826fa:	9b01      	ldr	r3, [sp, #4]
   826fc:	2b00      	cmp	r3, #0
   826fe:	d050      	beq.n	827a2 <__kernel_rem_pio2+0x6fa>
   82700:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   82702:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
   82706:	460b      	mov	r3, r1
   82708:	e9da 0100 	ldrd	r0, r1, [sl]
   8270c:	e887 0030 	stmia.w	r7, {r4, r5}
   82710:	4622      	mov	r2, r4
   82712:	f000 fa87 	bl	82c24 <__aeabi_dsub>
   82716:	f1bb 0f00 	cmp.w	fp, #0
   8271a:	4603      	mov	r3, r0
   8271c:	460d      	mov	r5, r1
   8271e:	dd0d      	ble.n	8273c <__kernel_rem_pio2+0x694>
   82720:	2401      	movs	r4, #1
   82722:	4618      	mov	r0, r3
   82724:	e9fa 2302 	ldrd	r2, r3, [sl, #8]!
   82728:	4629      	mov	r1, r5
   8272a:	f000 fa7d 	bl	82c28 <__adddf3>
   8272e:	3401      	adds	r4, #1
   82730:	45a3      	cmp	fp, r4
   82732:	4603      	mov	r3, r0
   82734:	460d      	mov	r5, r1
   82736:	daf4      	bge.n	82722 <__kernel_rem_pio2+0x67a>
   82738:	9a01      	ldr	r2, [sp, #4]
   8273a:	b10a      	cbz	r2, 82740 <__kernel_rem_pio2+0x698>
   8273c:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
   82740:	4618      	mov	r0, r3
   82742:	4629      	mov	r1, r5
   82744:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   82746:	e9c3 0102 	strd	r0, r1, [r3, #8]
   8274a:	9b05      	ldr	r3, [sp, #20]
   8274c:	f003 0007 	and.w	r0, r3, #7
   82750:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
   82754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82758:	2300      	movs	r3, #0
   8275a:	461c      	mov	r4, r3
   8275c:	9a04      	ldr	r2, [sp, #16]
   8275e:	3208      	adds	r2, #8
   82760:	4492      	add	sl, r2
   82762:	4618      	mov	r0, r3
   82764:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
   82768:	4621      	mov	r1, r4
   8276a:	f000 fa5d 	bl	82c28 <__adddf3>
   8276e:	f10b 3bff 	add.w	fp, fp, #4294967295
   82772:	f1bb 3fff 	cmp.w	fp, #4294967295
   82776:	4603      	mov	r3, r0
   82778:	460c      	mov	r4, r1
   8277a:	d1f2      	bne.n	82762 <__kernel_rem_pio2+0x6ba>
   8277c:	9a01      	ldr	r2, [sp, #4]
   8277e:	b10a      	cbz	r2, 82784 <__kernel_rem_pio2+0x6dc>
   82780:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
   82784:	4618      	mov	r0, r3
   82786:	4621      	mov	r1, r4
   82788:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8278a:	e9c3 0100 	strd	r0, r1, [r3]
   8278e:	9b05      	ldr	r3, [sp, #20]
   82790:	f003 0007 	and.w	r0, r3, #7
   82794:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
   82798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8279c:	2600      	movs	r6, #0
   8279e:	2700      	movs	r7, #0
   827a0:	e6f1      	b.n	82586 <__kernel_rem_pio2+0x4de>
   827a2:	4626      	mov	r6, r4
   827a4:	460f      	mov	r7, r1
   827a6:	4622      	mov	r2, r4
   827a8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   827aa:	460b      	mov	r3, r1
   827ac:	e9da 0100 	ldrd	r0, r1, [sl]
   827b0:	e9c4 6700 	strd	r6, r7, [r4]
   827b4:	f000 fa36 	bl	82c24 <__aeabi_dsub>
   827b8:	f1bb 0f00 	cmp.w	fp, #0
   827bc:	4603      	mov	r3, r0
   827be:	460d      	mov	r5, r1
   827c0:	dcae      	bgt.n	82720 <__kernel_rem_pio2+0x678>
   827c2:	4618      	mov	r0, r3
   827c4:	4629      	mov	r1, r5
   827c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   827c8:	e9c3 0102 	strd	r0, r1, [r3, #8]
   827cc:	e7bd      	b.n	8274a <__kernel_rem_pio2+0x6a2>
   827ce:	9b08      	ldr	r3, [sp, #32]
   827d0:	4630      	mov	r0, r6
   827d2:	425a      	negs	r2, r3
   827d4:	4639      	mov	r1, r7
   827d6:	f8cd 9014 	str.w	r9, [sp, #20]
   827da:	f8cd 8004 	str.w	r8, [sp, #4]
   827de:	f000 f9a3 	bl	82b28 <scalbn>
   827e2:	2200      	movs	r2, #0
   827e4:	4b2c      	ldr	r3, [pc, #176]	; (82898 <__kernel_rem_pio2+0x7f0>)
   827e6:	4606      	mov	r6, r0
   827e8:	460f      	mov	r7, r1
   827ea:	f000 fe55 	bl	83498 <__aeabi_dcmpge>
   827ee:	2800      	cmp	r0, #0
   827f0:	d040      	beq.n	82874 <__kernel_rem_pio2+0x7cc>
   827f2:	2200      	movs	r2, #0
   827f4:	4b29      	ldr	r3, [pc, #164]	; (8289c <__kernel_rem_pio2+0x7f4>)
   827f6:	4630      	mov	r0, r6
   827f8:	4639      	mov	r1, r7
   827fa:	f000 fbc7 	bl	82f8c <__aeabi_dmul>
   827fe:	f000 fe5f 	bl	834c0 <__aeabi_d2iz>
   82802:	4604      	mov	r4, r0
   82804:	f000 fb5c 	bl	82ec0 <__aeabi_i2d>
   82808:	2200      	movs	r2, #0
   8280a:	4b23      	ldr	r3, [pc, #140]	; (82898 <__kernel_rem_pio2+0x7f0>)
   8280c:	f000 fbbe 	bl	82f8c <__aeabi_dmul>
   82810:	460b      	mov	r3, r1
   82812:	4602      	mov	r2, r0
   82814:	4639      	mov	r1, r7
   82816:	4630      	mov	r0, r6
   82818:	f000 fa04 	bl	82c24 <__aeabi_dsub>
   8281c:	f000 fe50 	bl	834c0 <__aeabi_d2iz>
   82820:	9b08      	ldr	r3, [sp, #32]
   82822:	f105 0b01 	add.w	fp, r5, #1
   82826:	3318      	adds	r3, #24
   82828:	9308      	str	r3, [sp, #32]
   8282a:	ab10      	add	r3, sp, #64	; 0x40
   8282c:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
   82830:	f843 402b 	str.w	r4, [r3, fp, lsl #2]
   82834:	e64e      	b.n	824d4 <__kernel_rem_pio2+0x42c>
   82836:	2301      	movs	r3, #1
   82838:	e591      	b.n	8235e <__kernel_rem_pio2+0x2b6>
   8283a:	2400      	movs	r4, #0
   8283c:	e54c      	b.n	822d8 <__kernel_rem_pio2+0x230>
   8283e:	4618      	mov	r0, r3
   82840:	e9da 6700 	ldrd	r6, r7, [sl]
   82844:	e9da 2302 	ldrd	r2, r3, [sl, #8]
   82848:	4629      	mov	r1, r5
   8284a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   8284c:	e9c5 6700 	strd	r6, r7, [r5]
   82850:	e9c5 0104 	strd	r0, r1, [r5, #16]
   82854:	e9c5 2302 	strd	r2, r3, [r5, #8]
   82858:	e72c      	b.n	826b4 <__kernel_rem_pio2+0x60c>
   8285a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
   8285c:	2b03      	cmp	r3, #3
   8285e:	f63f af29 	bhi.w	826b4 <__kernel_rem_pio2+0x60c>
   82862:	e8df f003 	tbb	[pc, r3]
   82866:	1015      	.short	0x1015
   82868:	0210      	.short	0x0210
   8286a:	f50d 7a98 	add.w	sl, sp, #304	; 0x130
   8286e:	2300      	movs	r3, #0
   82870:	461d      	mov	r5, r3
   82872:	e706      	b.n	82682 <__kernel_rem_pio2+0x5da>
   82874:	4630      	mov	r0, r6
   82876:	4639      	mov	r1, r7
   82878:	f000 fe22 	bl	834c0 <__aeabi_d2iz>
   8287c:	ab10      	add	r3, sp, #64	; 0x40
   8287e:	46ab      	mov	fp, r5
   82880:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
   82884:	e626      	b.n	824d4 <__kernel_rem_pio2+0x42c>
   82886:	2400      	movs	r4, #0
   82888:	4621      	mov	r1, r4
   8288a:	f50d 7a98 	add.w	sl, sp, #304	; 0x130
   8288e:	e734      	b.n	826fa <__kernel_rem_pio2+0x652>
   82890:	2300      	movs	r3, #0
   82892:	461c      	mov	r4, r3
   82894:	e772      	b.n	8277c <__kernel_rem_pio2+0x6d4>
   82896:	bf00      	nop
   82898:	41700000 	.word	0x41700000
   8289c:	3e700000 	.word	0x3e700000

000828a0 <__kernel_sin>:
   828a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   828a4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
   828a8:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
   828ac:	b085      	sub	sp, #20
   828ae:	460c      	mov	r4, r1
   828b0:	4690      	mov	r8, r2
   828b2:	4699      	mov	r9, r3
   828b4:	4605      	mov	r5, r0
   828b6:	da04      	bge.n	828c2 <__kernel_sin+0x22>
   828b8:	f000 fe02 	bl	834c0 <__aeabi_d2iz>
   828bc:	2800      	cmp	r0, #0
   828be:	f000 8085 	beq.w	829cc <__kernel_sin+0x12c>
   828c2:	462a      	mov	r2, r5
   828c4:	4623      	mov	r3, r4
   828c6:	4628      	mov	r0, r5
   828c8:	4621      	mov	r1, r4
   828ca:	f000 fb5f 	bl	82f8c <__aeabi_dmul>
   828ce:	4606      	mov	r6, r0
   828d0:	460f      	mov	r7, r1
   828d2:	4602      	mov	r2, r0
   828d4:	460b      	mov	r3, r1
   828d6:	4628      	mov	r0, r5
   828d8:	4621      	mov	r1, r4
   828da:	f000 fb57 	bl	82f8c <__aeabi_dmul>
   828de:	a33e      	add	r3, pc, #248	; (adr r3, 829d8 <__kernel_sin+0x138>)
   828e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   828e4:	4682      	mov	sl, r0
   828e6:	468b      	mov	fp, r1
   828e8:	4630      	mov	r0, r6
   828ea:	4639      	mov	r1, r7
   828ec:	f000 fb4e 	bl	82f8c <__aeabi_dmul>
   828f0:	a33b      	add	r3, pc, #236	; (adr r3, 829e0 <__kernel_sin+0x140>)
   828f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   828f6:	f000 f995 	bl	82c24 <__aeabi_dsub>
   828fa:	4632      	mov	r2, r6
   828fc:	463b      	mov	r3, r7
   828fe:	f000 fb45 	bl	82f8c <__aeabi_dmul>
   82902:	a339      	add	r3, pc, #228	; (adr r3, 829e8 <__kernel_sin+0x148>)
   82904:	e9d3 2300 	ldrd	r2, r3, [r3]
   82908:	f000 f98e 	bl	82c28 <__adddf3>
   8290c:	4632      	mov	r2, r6
   8290e:	463b      	mov	r3, r7
   82910:	f000 fb3c 	bl	82f8c <__aeabi_dmul>
   82914:	a336      	add	r3, pc, #216	; (adr r3, 829f0 <__kernel_sin+0x150>)
   82916:	e9d3 2300 	ldrd	r2, r3, [r3]
   8291a:	f000 f983 	bl	82c24 <__aeabi_dsub>
   8291e:	4632      	mov	r2, r6
   82920:	463b      	mov	r3, r7
   82922:	f000 fb33 	bl	82f8c <__aeabi_dmul>
   82926:	a334      	add	r3, pc, #208	; (adr r3, 829f8 <__kernel_sin+0x158>)
   82928:	e9d3 2300 	ldrd	r2, r3, [r3]
   8292c:	f000 f97c 	bl	82c28 <__adddf3>
   82930:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   82932:	e9cd 0100 	strd	r0, r1, [sp]
   82936:	b39b      	cbz	r3, 829a0 <__kernel_sin+0x100>
   82938:	2200      	movs	r2, #0
   8293a:	4b33      	ldr	r3, [pc, #204]	; (82a08 <__kernel_sin+0x168>)
   8293c:	4640      	mov	r0, r8
   8293e:	4649      	mov	r1, r9
   82940:	f000 fb24 	bl	82f8c <__aeabi_dmul>
   82944:	e9dd 2300 	ldrd	r2, r3, [sp]
   82948:	e9cd 0102 	strd	r0, r1, [sp, #8]
   8294c:	4650      	mov	r0, sl
   8294e:	4659      	mov	r1, fp
   82950:	f000 fb1c 	bl	82f8c <__aeabi_dmul>
   82954:	4602      	mov	r2, r0
   82956:	460b      	mov	r3, r1
   82958:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   8295c:	f000 f962 	bl	82c24 <__aeabi_dsub>
   82960:	4632      	mov	r2, r6
   82962:	463b      	mov	r3, r7
   82964:	f000 fb12 	bl	82f8c <__aeabi_dmul>
   82968:	4642      	mov	r2, r8
   8296a:	464b      	mov	r3, r9
   8296c:	f000 f95a 	bl	82c24 <__aeabi_dsub>
   82970:	a323      	add	r3, pc, #140	; (adr r3, 82a00 <__kernel_sin+0x160>)
   82972:	e9d3 2300 	ldrd	r2, r3, [r3]
   82976:	4606      	mov	r6, r0
   82978:	460f      	mov	r7, r1
   8297a:	4650      	mov	r0, sl
   8297c:	4659      	mov	r1, fp
   8297e:	f000 fb05 	bl	82f8c <__aeabi_dmul>
   82982:	4602      	mov	r2, r0
   82984:	460b      	mov	r3, r1
   82986:	4630      	mov	r0, r6
   82988:	4639      	mov	r1, r7
   8298a:	f000 f94d 	bl	82c28 <__adddf3>
   8298e:	4602      	mov	r2, r0
   82990:	460b      	mov	r3, r1
   82992:	4628      	mov	r0, r5
   82994:	4621      	mov	r1, r4
   82996:	f000 f945 	bl	82c24 <__aeabi_dsub>
   8299a:	b005      	add	sp, #20
   8299c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   829a0:	4602      	mov	r2, r0
   829a2:	460b      	mov	r3, r1
   829a4:	4630      	mov	r0, r6
   829a6:	4639      	mov	r1, r7
   829a8:	f000 faf0 	bl	82f8c <__aeabi_dmul>
   829ac:	a314      	add	r3, pc, #80	; (adr r3, 82a00 <__kernel_sin+0x160>)
   829ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   829b2:	f000 f937 	bl	82c24 <__aeabi_dsub>
   829b6:	4652      	mov	r2, sl
   829b8:	465b      	mov	r3, fp
   829ba:	f000 fae7 	bl	82f8c <__aeabi_dmul>
   829be:	462a      	mov	r2, r5
   829c0:	4623      	mov	r3, r4
   829c2:	f000 f931 	bl	82c28 <__adddf3>
   829c6:	b005      	add	sp, #20
   829c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   829cc:	4628      	mov	r0, r5
   829ce:	4621      	mov	r1, r4
   829d0:	b005      	add	sp, #20
   829d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   829d6:	bf00      	nop
   829d8:	5acfd57c 	.word	0x5acfd57c
   829dc:	3de5d93a 	.word	0x3de5d93a
   829e0:	8a2b9ceb 	.word	0x8a2b9ceb
   829e4:	3e5ae5e6 	.word	0x3e5ae5e6
   829e8:	57b1fe7d 	.word	0x57b1fe7d
   829ec:	3ec71de3 	.word	0x3ec71de3
   829f0:	19c161d5 	.word	0x19c161d5
   829f4:	3f2a01a0 	.word	0x3f2a01a0
   829f8:	1110f8a6 	.word	0x1110f8a6
   829fc:	3f811111 	.word	0x3f811111
   82a00:	55555549 	.word	0x55555549
   82a04:	3fc55555 	.word	0x3fc55555
   82a08:	3fe00000 	.word	0x3fe00000

00082a0c <fabs>:
   82a0c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   82a10:	4770      	bx	lr
   82a12:	bf00      	nop
   82a14:	0000      	movs	r0, r0
	...

00082a18 <floor>:
   82a18:	f3c1 520a 	ubfx	r2, r1, #20, #11
   82a1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   82a20:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
   82a24:	2e13      	cmp	r6, #19
   82a26:	460b      	mov	r3, r1
   82a28:	4604      	mov	r4, r0
   82a2a:	460d      	mov	r5, r1
   82a2c:	4688      	mov	r8, r1
   82a2e:	4607      	mov	r7, r0
   82a30:	dc1c      	bgt.n	82a6c <floor+0x54>
   82a32:	2e00      	cmp	r6, #0
   82a34:	db3f      	blt.n	82ab6 <floor+0x9e>
   82a36:	4a3a      	ldr	r2, [pc, #232]	; (82b20 <floor+0x108>)
   82a38:	4686      	mov	lr, r0
   82a3a:	fa42 f906 	asr.w	r9, r2, r6
   82a3e:	ea01 0209 	and.w	r2, r1, r9
   82a42:	4302      	orrs	r2, r0
   82a44:	d017      	beq.n	82a76 <floor+0x5e>
   82a46:	a334      	add	r3, pc, #208	; (adr r3, 82b18 <floor+0x100>)
   82a48:	e9d3 2300 	ldrd	r2, r3, [r3]
   82a4c:	f000 f8ec 	bl	82c28 <__adddf3>
   82a50:	2200      	movs	r2, #0
   82a52:	2300      	movs	r3, #0
   82a54:	f000 fd2a 	bl	834ac <__aeabi_dcmpgt>
   82a58:	b120      	cbz	r0, 82a64 <floor+0x4c>
   82a5a:	2d00      	cmp	r5, #0
   82a5c:	db40      	blt.n	82ae0 <floor+0xc8>
   82a5e:	ea28 0509 	bic.w	r5, r8, r9
   82a62:	2700      	movs	r7, #0
   82a64:	4638      	mov	r0, r7
   82a66:	4629      	mov	r1, r5
   82a68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   82a6c:	2e33      	cmp	r6, #51	; 0x33
   82a6e:	dd06      	ble.n	82a7e <floor+0x66>
   82a70:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   82a74:	d02f      	beq.n	82ad6 <floor+0xbe>
   82a76:	4620      	mov	r0, r4
   82a78:	4619      	mov	r1, r3
   82a7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   82a7e:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
   82a82:	f04f 39ff 	mov.w	r9, #4294967295
   82a86:	fa29 f902 	lsr.w	r9, r9, r2
   82a8a:	ea10 0f09 	tst.w	r0, r9
   82a8e:	d0f2      	beq.n	82a76 <floor+0x5e>
   82a90:	a321      	add	r3, pc, #132	; (adr r3, 82b18 <floor+0x100>)
   82a92:	e9d3 2300 	ldrd	r2, r3, [r3]
   82a96:	f000 f8c7 	bl	82c28 <__adddf3>
   82a9a:	2200      	movs	r2, #0
   82a9c:	2300      	movs	r3, #0
   82a9e:	f000 fd05 	bl	834ac <__aeabi_dcmpgt>
   82aa2:	2800      	cmp	r0, #0
   82aa4:	d0de      	beq.n	82a64 <floor+0x4c>
   82aa6:	2d00      	cmp	r5, #0
   82aa8:	db20      	blt.n	82aec <floor+0xd4>
   82aaa:	4645      	mov	r5, r8
   82aac:	ea27 0709 	bic.w	r7, r7, r9
   82ab0:	4638      	mov	r0, r7
   82ab2:	4629      	mov	r1, r5
   82ab4:	e7d8      	b.n	82a68 <floor+0x50>
   82ab6:	a318      	add	r3, pc, #96	; (adr r3, 82b18 <floor+0x100>)
   82ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
   82abc:	f000 f8b4 	bl	82c28 <__adddf3>
   82ac0:	2200      	movs	r2, #0
   82ac2:	2300      	movs	r3, #0
   82ac4:	f000 fcf2 	bl	834ac <__aeabi_dcmpgt>
   82ac8:	2800      	cmp	r0, #0
   82aca:	d0cb      	beq.n	82a64 <floor+0x4c>
   82acc:	2d00      	cmp	r5, #0
   82ace:	db18      	blt.n	82b02 <floor+0xea>
   82ad0:	2700      	movs	r7, #0
   82ad2:	463d      	mov	r5, r7
   82ad4:	e7c6      	b.n	82a64 <floor+0x4c>
   82ad6:	4602      	mov	r2, r0
   82ad8:	460b      	mov	r3, r1
   82ada:	f000 f8a5 	bl	82c28 <__adddf3>
   82ade:	e7cc      	b.n	82a7a <floor+0x62>
   82ae0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   82ae4:	fa43 f606 	asr.w	r6, r3, r6
   82ae8:	44b0      	add	r8, r6
   82aea:	e7b8      	b.n	82a5e <floor+0x46>
   82aec:	2e14      	cmp	r6, #20
   82aee:	d010      	beq.n	82b12 <floor+0xfa>
   82af0:	2301      	movs	r3, #1
   82af2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
   82af6:	fa03 f606 	lsl.w	r6, r3, r6
   82afa:	1937      	adds	r7, r6, r4
   82afc:	bf28      	it	cs
   82afe:	4498      	addcs	r8, r3
   82b00:	e7d3      	b.n	82aaa <floor+0x92>
   82b02:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   82b06:	4b07      	ldr	r3, [pc, #28]	; (82b24 <floor+0x10c>)
   82b08:	4322      	orrs	r2, r4
   82b0a:	bf18      	it	ne
   82b0c:	461d      	movne	r5, r3
   82b0e:	2700      	movs	r7, #0
   82b10:	e7a8      	b.n	82a64 <floor+0x4c>
   82b12:	f105 0801 	add.w	r8, r5, #1
   82b16:	e7c8      	b.n	82aaa <floor+0x92>
   82b18:	8800759c 	.word	0x8800759c
   82b1c:	7e37e43c 	.word	0x7e37e43c
   82b20:	000fffff 	.word	0x000fffff
   82b24:	bff00000 	.word	0xbff00000

00082b28 <scalbn>:
   82b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82b2a:	f3c1 560a 	ubfx	r6, r1, #20, #11
   82b2e:	4604      	mov	r4, r0
   82b30:	460d      	mov	r5, r1
   82b32:	460b      	mov	r3, r1
   82b34:	4617      	mov	r7, r2
   82b36:	bb06      	cbnz	r6, 82b7a <scalbn+0x52>
   82b38:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   82b3c:	4303      	orrs	r3, r0
   82b3e:	d025      	beq.n	82b8c <scalbn+0x64>
   82b40:	2200      	movs	r2, #0
   82b42:	4b2f      	ldr	r3, [pc, #188]	; (82c00 <scalbn+0xd8>)
   82b44:	f000 fa22 	bl	82f8c <__aeabi_dmul>
   82b48:	4a2e      	ldr	r2, [pc, #184]	; (82c04 <scalbn+0xdc>)
   82b4a:	4604      	mov	r4, r0
   82b4c:	4297      	cmp	r7, r2
   82b4e:	460d      	mov	r5, r1
   82b50:	460b      	mov	r3, r1
   82b52:	db2a      	blt.n	82baa <scalbn+0x82>
   82b54:	f3c1 560a 	ubfx	r6, r1, #20, #11
   82b58:	3e36      	subs	r6, #54	; 0x36
   82b5a:	f240 72fe 	movw	r2, #2046	; 0x7fe
   82b5e:	443e      	add	r6, r7
   82b60:	4296      	cmp	r6, r2
   82b62:	dc28      	bgt.n	82bb6 <scalbn+0x8e>
   82b64:	2e00      	cmp	r6, #0
   82b66:	dd12      	ble.n	82b8e <scalbn+0x66>
   82b68:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   82b6c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
   82b70:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
   82b74:	4620      	mov	r0, r4
   82b76:	4629      	mov	r1, r5
   82b78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82b7a:	f240 72ff 	movw	r2, #2047	; 0x7ff
   82b7e:	4296      	cmp	r6, r2
   82b80:	d1eb      	bne.n	82b5a <scalbn+0x32>
   82b82:	4602      	mov	r2, r0
   82b84:	460b      	mov	r3, r1
   82b86:	f000 f84f 	bl	82c28 <__adddf3>
   82b8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82b8e:	f116 0f35 	cmn.w	r6, #53	; 0x35
   82b92:	da1d      	bge.n	82bd0 <scalbn+0xa8>
   82b94:	f24c 3350 	movw	r3, #50000	; 0xc350
   82b98:	429f      	cmp	r7, r3
   82b9a:	dc0c      	bgt.n	82bb6 <scalbn+0x8e>
   82b9c:	a114      	add	r1, pc, #80	; (adr r1, 82bf0 <scalbn+0xc8>)
   82b9e:	e9d1 0100 	ldrd	r0, r1, [r1]
   82ba2:	4622      	mov	r2, r4
   82ba4:	462b      	mov	r3, r5
   82ba6:	f000 f831 	bl	82c0c <copysign>
   82baa:	a311      	add	r3, pc, #68	; (adr r3, 82bf0 <scalbn+0xc8>)
   82bac:	e9d3 2300 	ldrd	r2, r3, [r3]
   82bb0:	f000 f9ec 	bl	82f8c <__aeabi_dmul>
   82bb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82bb6:	4622      	mov	r2, r4
   82bb8:	a10f      	add	r1, pc, #60	; (adr r1, 82bf8 <scalbn+0xd0>)
   82bba:	e9d1 0100 	ldrd	r0, r1, [r1]
   82bbe:	462b      	mov	r3, r5
   82bc0:	f000 f824 	bl	82c0c <copysign>
   82bc4:	a30c      	add	r3, pc, #48	; (adr r3, 82bf8 <scalbn+0xd0>)
   82bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
   82bca:	f000 f9df 	bl	82f8c <__aeabi_dmul>
   82bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82bd0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   82bd4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
   82bd8:	3636      	adds	r6, #54	; 0x36
   82bda:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
   82bde:	4620      	mov	r0, r4
   82be0:	4629      	mov	r1, r5
   82be2:	2200      	movs	r2, #0
   82be4:	4b08      	ldr	r3, [pc, #32]	; (82c08 <scalbn+0xe0>)
   82be6:	f000 f9d1 	bl	82f8c <__aeabi_dmul>
   82bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82bec:	f3af 8000 	nop.w
   82bf0:	c2f8f359 	.word	0xc2f8f359
   82bf4:	01a56e1f 	.word	0x01a56e1f
   82bf8:	8800759c 	.word	0x8800759c
   82bfc:	7e37e43c 	.word	0x7e37e43c
   82c00:	43500000 	.word	0x43500000
   82c04:	ffff3cb0 	.word	0xffff3cb0
   82c08:	3c900000 	.word	0x3c900000

00082c0c <copysign>:
   82c0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
   82c10:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
   82c14:	ea42 0103 	orr.w	r1, r2, r3
   82c18:	4770      	bx	lr
   82c1a:	bf00      	nop

00082c1c <__aeabi_drsub>:
   82c1c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   82c20:	e002      	b.n	82c28 <__adddf3>
   82c22:	bf00      	nop

00082c24 <__aeabi_dsub>:
   82c24:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00082c28 <__adddf3>:
   82c28:	b530      	push	{r4, r5, lr}
   82c2a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   82c2e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   82c32:	ea94 0f05 	teq	r4, r5
   82c36:	bf08      	it	eq
   82c38:	ea90 0f02 	teqeq	r0, r2
   82c3c:	bf1f      	itttt	ne
   82c3e:	ea54 0c00 	orrsne.w	ip, r4, r0
   82c42:	ea55 0c02 	orrsne.w	ip, r5, r2
   82c46:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   82c4a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   82c4e:	f000 80e2 	beq.w	82e16 <__adddf3+0x1ee>
   82c52:	ea4f 5454 	mov.w	r4, r4, lsr #21
   82c56:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   82c5a:	bfb8      	it	lt
   82c5c:	426d      	neglt	r5, r5
   82c5e:	dd0c      	ble.n	82c7a <__adddf3+0x52>
   82c60:	442c      	add	r4, r5
   82c62:	ea80 0202 	eor.w	r2, r0, r2
   82c66:	ea81 0303 	eor.w	r3, r1, r3
   82c6a:	ea82 0000 	eor.w	r0, r2, r0
   82c6e:	ea83 0101 	eor.w	r1, r3, r1
   82c72:	ea80 0202 	eor.w	r2, r0, r2
   82c76:	ea81 0303 	eor.w	r3, r1, r3
   82c7a:	2d36      	cmp	r5, #54	; 0x36
   82c7c:	bf88      	it	hi
   82c7e:	bd30      	pophi	{r4, r5, pc}
   82c80:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   82c84:	ea4f 3101 	mov.w	r1, r1, lsl #12
   82c88:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   82c8c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   82c90:	d002      	beq.n	82c98 <__adddf3+0x70>
   82c92:	4240      	negs	r0, r0
   82c94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   82c98:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   82c9c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   82ca0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   82ca4:	d002      	beq.n	82cac <__adddf3+0x84>
   82ca6:	4252      	negs	r2, r2
   82ca8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   82cac:	ea94 0f05 	teq	r4, r5
   82cb0:	f000 80a7 	beq.w	82e02 <__adddf3+0x1da>
   82cb4:	f1a4 0401 	sub.w	r4, r4, #1
   82cb8:	f1d5 0e20 	rsbs	lr, r5, #32
   82cbc:	db0d      	blt.n	82cda <__adddf3+0xb2>
   82cbe:	fa02 fc0e 	lsl.w	ip, r2, lr
   82cc2:	fa22 f205 	lsr.w	r2, r2, r5
   82cc6:	1880      	adds	r0, r0, r2
   82cc8:	f141 0100 	adc.w	r1, r1, #0
   82ccc:	fa03 f20e 	lsl.w	r2, r3, lr
   82cd0:	1880      	adds	r0, r0, r2
   82cd2:	fa43 f305 	asr.w	r3, r3, r5
   82cd6:	4159      	adcs	r1, r3
   82cd8:	e00e      	b.n	82cf8 <__adddf3+0xd0>
   82cda:	f1a5 0520 	sub.w	r5, r5, #32
   82cde:	f10e 0e20 	add.w	lr, lr, #32
   82ce2:	2a01      	cmp	r2, #1
   82ce4:	fa03 fc0e 	lsl.w	ip, r3, lr
   82ce8:	bf28      	it	cs
   82cea:	f04c 0c02 	orrcs.w	ip, ip, #2
   82cee:	fa43 f305 	asr.w	r3, r3, r5
   82cf2:	18c0      	adds	r0, r0, r3
   82cf4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   82cf8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   82cfc:	d507      	bpl.n	82d0e <__adddf3+0xe6>
   82cfe:	f04f 0e00 	mov.w	lr, #0
   82d02:	f1dc 0c00 	rsbs	ip, ip, #0
   82d06:	eb7e 0000 	sbcs.w	r0, lr, r0
   82d0a:	eb6e 0101 	sbc.w	r1, lr, r1
   82d0e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   82d12:	d31b      	bcc.n	82d4c <__adddf3+0x124>
   82d14:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   82d18:	d30c      	bcc.n	82d34 <__adddf3+0x10c>
   82d1a:	0849      	lsrs	r1, r1, #1
   82d1c:	ea5f 0030 	movs.w	r0, r0, rrx
   82d20:	ea4f 0c3c 	mov.w	ip, ip, rrx
   82d24:	f104 0401 	add.w	r4, r4, #1
   82d28:	ea4f 5244 	mov.w	r2, r4, lsl #21
   82d2c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   82d30:	f080 809a 	bcs.w	82e68 <__adddf3+0x240>
   82d34:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   82d38:	bf08      	it	eq
   82d3a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   82d3e:	f150 0000 	adcs.w	r0, r0, #0
   82d42:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   82d46:	ea41 0105 	orr.w	r1, r1, r5
   82d4a:	bd30      	pop	{r4, r5, pc}
   82d4c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   82d50:	4140      	adcs	r0, r0
   82d52:	eb41 0101 	adc.w	r1, r1, r1
   82d56:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   82d5a:	f1a4 0401 	sub.w	r4, r4, #1
   82d5e:	d1e9      	bne.n	82d34 <__adddf3+0x10c>
   82d60:	f091 0f00 	teq	r1, #0
   82d64:	bf04      	itt	eq
   82d66:	4601      	moveq	r1, r0
   82d68:	2000      	moveq	r0, #0
   82d6a:	fab1 f381 	clz	r3, r1
   82d6e:	bf08      	it	eq
   82d70:	3320      	addeq	r3, #32
   82d72:	f1a3 030b 	sub.w	r3, r3, #11
   82d76:	f1b3 0220 	subs.w	r2, r3, #32
   82d7a:	da0c      	bge.n	82d96 <__adddf3+0x16e>
   82d7c:	320c      	adds	r2, #12
   82d7e:	dd08      	ble.n	82d92 <__adddf3+0x16a>
   82d80:	f102 0c14 	add.w	ip, r2, #20
   82d84:	f1c2 020c 	rsb	r2, r2, #12
   82d88:	fa01 f00c 	lsl.w	r0, r1, ip
   82d8c:	fa21 f102 	lsr.w	r1, r1, r2
   82d90:	e00c      	b.n	82dac <__adddf3+0x184>
   82d92:	f102 0214 	add.w	r2, r2, #20
   82d96:	bfd8      	it	le
   82d98:	f1c2 0c20 	rsble	ip, r2, #32
   82d9c:	fa01 f102 	lsl.w	r1, r1, r2
   82da0:	fa20 fc0c 	lsr.w	ip, r0, ip
   82da4:	bfdc      	itt	le
   82da6:	ea41 010c 	orrle.w	r1, r1, ip
   82daa:	4090      	lslle	r0, r2
   82dac:	1ae4      	subs	r4, r4, r3
   82dae:	bfa2      	ittt	ge
   82db0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   82db4:	4329      	orrge	r1, r5
   82db6:	bd30      	popge	{r4, r5, pc}
   82db8:	ea6f 0404 	mvn.w	r4, r4
   82dbc:	3c1f      	subs	r4, #31
   82dbe:	da1c      	bge.n	82dfa <__adddf3+0x1d2>
   82dc0:	340c      	adds	r4, #12
   82dc2:	dc0e      	bgt.n	82de2 <__adddf3+0x1ba>
   82dc4:	f104 0414 	add.w	r4, r4, #20
   82dc8:	f1c4 0220 	rsb	r2, r4, #32
   82dcc:	fa20 f004 	lsr.w	r0, r0, r4
   82dd0:	fa01 f302 	lsl.w	r3, r1, r2
   82dd4:	ea40 0003 	orr.w	r0, r0, r3
   82dd8:	fa21 f304 	lsr.w	r3, r1, r4
   82ddc:	ea45 0103 	orr.w	r1, r5, r3
   82de0:	bd30      	pop	{r4, r5, pc}
   82de2:	f1c4 040c 	rsb	r4, r4, #12
   82de6:	f1c4 0220 	rsb	r2, r4, #32
   82dea:	fa20 f002 	lsr.w	r0, r0, r2
   82dee:	fa01 f304 	lsl.w	r3, r1, r4
   82df2:	ea40 0003 	orr.w	r0, r0, r3
   82df6:	4629      	mov	r1, r5
   82df8:	bd30      	pop	{r4, r5, pc}
   82dfa:	fa21 f004 	lsr.w	r0, r1, r4
   82dfe:	4629      	mov	r1, r5
   82e00:	bd30      	pop	{r4, r5, pc}
   82e02:	f094 0f00 	teq	r4, #0
   82e06:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   82e0a:	bf06      	itte	eq
   82e0c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   82e10:	3401      	addeq	r4, #1
   82e12:	3d01      	subne	r5, #1
   82e14:	e74e      	b.n	82cb4 <__adddf3+0x8c>
   82e16:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   82e1a:	bf18      	it	ne
   82e1c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   82e20:	d029      	beq.n	82e76 <__adddf3+0x24e>
   82e22:	ea94 0f05 	teq	r4, r5
   82e26:	bf08      	it	eq
   82e28:	ea90 0f02 	teqeq	r0, r2
   82e2c:	d005      	beq.n	82e3a <__adddf3+0x212>
   82e2e:	ea54 0c00 	orrs.w	ip, r4, r0
   82e32:	bf04      	itt	eq
   82e34:	4619      	moveq	r1, r3
   82e36:	4610      	moveq	r0, r2
   82e38:	bd30      	pop	{r4, r5, pc}
   82e3a:	ea91 0f03 	teq	r1, r3
   82e3e:	bf1e      	ittt	ne
   82e40:	2100      	movne	r1, #0
   82e42:	2000      	movne	r0, #0
   82e44:	bd30      	popne	{r4, r5, pc}
   82e46:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   82e4a:	d105      	bne.n	82e58 <__adddf3+0x230>
   82e4c:	0040      	lsls	r0, r0, #1
   82e4e:	4149      	adcs	r1, r1
   82e50:	bf28      	it	cs
   82e52:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   82e56:	bd30      	pop	{r4, r5, pc}
   82e58:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   82e5c:	bf3c      	itt	cc
   82e5e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   82e62:	bd30      	popcc	{r4, r5, pc}
   82e64:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   82e68:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   82e6c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   82e70:	f04f 0000 	mov.w	r0, #0
   82e74:	bd30      	pop	{r4, r5, pc}
   82e76:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   82e7a:	bf1a      	itte	ne
   82e7c:	4619      	movne	r1, r3
   82e7e:	4610      	movne	r0, r2
   82e80:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   82e84:	bf1c      	itt	ne
   82e86:	460b      	movne	r3, r1
   82e88:	4602      	movne	r2, r0
   82e8a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   82e8e:	bf06      	itte	eq
   82e90:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   82e94:	ea91 0f03 	teqeq	r1, r3
   82e98:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   82e9c:	bd30      	pop	{r4, r5, pc}
   82e9e:	bf00      	nop

00082ea0 <__aeabi_ui2d>:
   82ea0:	f090 0f00 	teq	r0, #0
   82ea4:	bf04      	itt	eq
   82ea6:	2100      	moveq	r1, #0
   82ea8:	4770      	bxeq	lr
   82eaa:	b530      	push	{r4, r5, lr}
   82eac:	f44f 6480 	mov.w	r4, #1024	; 0x400
   82eb0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   82eb4:	f04f 0500 	mov.w	r5, #0
   82eb8:	f04f 0100 	mov.w	r1, #0
   82ebc:	e750      	b.n	82d60 <__adddf3+0x138>
   82ebe:	bf00      	nop

00082ec0 <__aeabi_i2d>:
   82ec0:	f090 0f00 	teq	r0, #0
   82ec4:	bf04      	itt	eq
   82ec6:	2100      	moveq	r1, #0
   82ec8:	4770      	bxeq	lr
   82eca:	b530      	push	{r4, r5, lr}
   82ecc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   82ed0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   82ed4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   82ed8:	bf48      	it	mi
   82eda:	4240      	negmi	r0, r0
   82edc:	f04f 0100 	mov.w	r1, #0
   82ee0:	e73e      	b.n	82d60 <__adddf3+0x138>
   82ee2:	bf00      	nop

00082ee4 <__aeabi_f2d>:
   82ee4:	0042      	lsls	r2, r0, #1
   82ee6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   82eea:	ea4f 0131 	mov.w	r1, r1, rrx
   82eee:	ea4f 7002 	mov.w	r0, r2, lsl #28
   82ef2:	bf1f      	itttt	ne
   82ef4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   82ef8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   82efc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   82f00:	4770      	bxne	lr
   82f02:	f092 0f00 	teq	r2, #0
   82f06:	bf14      	ite	ne
   82f08:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   82f0c:	4770      	bxeq	lr
   82f0e:	b530      	push	{r4, r5, lr}
   82f10:	f44f 7460 	mov.w	r4, #896	; 0x380
   82f14:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   82f18:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   82f1c:	e720      	b.n	82d60 <__adddf3+0x138>
   82f1e:	bf00      	nop

00082f20 <__aeabi_ul2d>:
   82f20:	ea50 0201 	orrs.w	r2, r0, r1
   82f24:	bf08      	it	eq
   82f26:	4770      	bxeq	lr
   82f28:	b530      	push	{r4, r5, lr}
   82f2a:	f04f 0500 	mov.w	r5, #0
   82f2e:	e00a      	b.n	82f46 <__aeabi_l2d+0x16>

00082f30 <__aeabi_l2d>:
   82f30:	ea50 0201 	orrs.w	r2, r0, r1
   82f34:	bf08      	it	eq
   82f36:	4770      	bxeq	lr
   82f38:	b530      	push	{r4, r5, lr}
   82f3a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   82f3e:	d502      	bpl.n	82f46 <__aeabi_l2d+0x16>
   82f40:	4240      	negs	r0, r0
   82f42:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   82f46:	f44f 6480 	mov.w	r4, #1024	; 0x400
   82f4a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   82f4e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   82f52:	f43f aedc 	beq.w	82d0e <__adddf3+0xe6>
   82f56:	f04f 0203 	mov.w	r2, #3
   82f5a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   82f5e:	bf18      	it	ne
   82f60:	3203      	addne	r2, #3
   82f62:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   82f66:	bf18      	it	ne
   82f68:	3203      	addne	r2, #3
   82f6a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   82f6e:	f1c2 0320 	rsb	r3, r2, #32
   82f72:	fa00 fc03 	lsl.w	ip, r0, r3
   82f76:	fa20 f002 	lsr.w	r0, r0, r2
   82f7a:	fa01 fe03 	lsl.w	lr, r1, r3
   82f7e:	ea40 000e 	orr.w	r0, r0, lr
   82f82:	fa21 f102 	lsr.w	r1, r1, r2
   82f86:	4414      	add	r4, r2
   82f88:	e6c1      	b.n	82d0e <__adddf3+0xe6>
   82f8a:	bf00      	nop

00082f8c <__aeabi_dmul>:
   82f8c:	b570      	push	{r4, r5, r6, lr}
   82f8e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   82f92:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   82f96:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   82f9a:	bf1d      	ittte	ne
   82f9c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   82fa0:	ea94 0f0c 	teqne	r4, ip
   82fa4:	ea95 0f0c 	teqne	r5, ip
   82fa8:	f000 f8de 	bleq	83168 <__aeabi_dmul+0x1dc>
   82fac:	442c      	add	r4, r5
   82fae:	ea81 0603 	eor.w	r6, r1, r3
   82fb2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   82fb6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   82fba:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   82fbe:	bf18      	it	ne
   82fc0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   82fc4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   82fc8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   82fcc:	d038      	beq.n	83040 <__aeabi_dmul+0xb4>
   82fce:	fba0 ce02 	umull	ip, lr, r0, r2
   82fd2:	f04f 0500 	mov.w	r5, #0
   82fd6:	fbe1 e502 	umlal	lr, r5, r1, r2
   82fda:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   82fde:	fbe0 e503 	umlal	lr, r5, r0, r3
   82fe2:	f04f 0600 	mov.w	r6, #0
   82fe6:	fbe1 5603 	umlal	r5, r6, r1, r3
   82fea:	f09c 0f00 	teq	ip, #0
   82fee:	bf18      	it	ne
   82ff0:	f04e 0e01 	orrne.w	lr, lr, #1
   82ff4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   82ff8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   82ffc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   83000:	d204      	bcs.n	8300c <__aeabi_dmul+0x80>
   83002:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   83006:	416d      	adcs	r5, r5
   83008:	eb46 0606 	adc.w	r6, r6, r6
   8300c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   83010:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   83014:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   83018:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   8301c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   83020:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   83024:	bf88      	it	hi
   83026:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8302a:	d81e      	bhi.n	8306a <__aeabi_dmul+0xde>
   8302c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   83030:	bf08      	it	eq
   83032:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   83036:	f150 0000 	adcs.w	r0, r0, #0
   8303a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8303e:	bd70      	pop	{r4, r5, r6, pc}
   83040:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   83044:	ea46 0101 	orr.w	r1, r6, r1
   83048:	ea40 0002 	orr.w	r0, r0, r2
   8304c:	ea81 0103 	eor.w	r1, r1, r3
   83050:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   83054:	bfc2      	ittt	gt
   83056:	ebd4 050c 	rsbsgt	r5, r4, ip
   8305a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8305e:	bd70      	popgt	{r4, r5, r6, pc}
   83060:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   83064:	f04f 0e00 	mov.w	lr, #0
   83068:	3c01      	subs	r4, #1
   8306a:	f300 80ab 	bgt.w	831c4 <__aeabi_dmul+0x238>
   8306e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   83072:	bfde      	ittt	le
   83074:	2000      	movle	r0, #0
   83076:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   8307a:	bd70      	pople	{r4, r5, r6, pc}
   8307c:	f1c4 0400 	rsb	r4, r4, #0
   83080:	3c20      	subs	r4, #32
   83082:	da35      	bge.n	830f0 <__aeabi_dmul+0x164>
   83084:	340c      	adds	r4, #12
   83086:	dc1b      	bgt.n	830c0 <__aeabi_dmul+0x134>
   83088:	f104 0414 	add.w	r4, r4, #20
   8308c:	f1c4 0520 	rsb	r5, r4, #32
   83090:	fa00 f305 	lsl.w	r3, r0, r5
   83094:	fa20 f004 	lsr.w	r0, r0, r4
   83098:	fa01 f205 	lsl.w	r2, r1, r5
   8309c:	ea40 0002 	orr.w	r0, r0, r2
   830a0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   830a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   830a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   830ac:	fa21 f604 	lsr.w	r6, r1, r4
   830b0:	eb42 0106 	adc.w	r1, r2, r6
   830b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   830b8:	bf08      	it	eq
   830ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   830be:	bd70      	pop	{r4, r5, r6, pc}
   830c0:	f1c4 040c 	rsb	r4, r4, #12
   830c4:	f1c4 0520 	rsb	r5, r4, #32
   830c8:	fa00 f304 	lsl.w	r3, r0, r4
   830cc:	fa20 f005 	lsr.w	r0, r0, r5
   830d0:	fa01 f204 	lsl.w	r2, r1, r4
   830d4:	ea40 0002 	orr.w	r0, r0, r2
   830d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   830dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   830e0:	f141 0100 	adc.w	r1, r1, #0
   830e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   830e8:	bf08      	it	eq
   830ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   830ee:	bd70      	pop	{r4, r5, r6, pc}
   830f0:	f1c4 0520 	rsb	r5, r4, #32
   830f4:	fa00 f205 	lsl.w	r2, r0, r5
   830f8:	ea4e 0e02 	orr.w	lr, lr, r2
   830fc:	fa20 f304 	lsr.w	r3, r0, r4
   83100:	fa01 f205 	lsl.w	r2, r1, r5
   83104:	ea43 0302 	orr.w	r3, r3, r2
   83108:	fa21 f004 	lsr.w	r0, r1, r4
   8310c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   83110:	fa21 f204 	lsr.w	r2, r1, r4
   83114:	ea20 0002 	bic.w	r0, r0, r2
   83118:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   8311c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   83120:	bf08      	it	eq
   83122:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   83126:	bd70      	pop	{r4, r5, r6, pc}
   83128:	f094 0f00 	teq	r4, #0
   8312c:	d10f      	bne.n	8314e <__aeabi_dmul+0x1c2>
   8312e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   83132:	0040      	lsls	r0, r0, #1
   83134:	eb41 0101 	adc.w	r1, r1, r1
   83138:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8313c:	bf08      	it	eq
   8313e:	3c01      	subeq	r4, #1
   83140:	d0f7      	beq.n	83132 <__aeabi_dmul+0x1a6>
   83142:	ea41 0106 	orr.w	r1, r1, r6
   83146:	f095 0f00 	teq	r5, #0
   8314a:	bf18      	it	ne
   8314c:	4770      	bxne	lr
   8314e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   83152:	0052      	lsls	r2, r2, #1
   83154:	eb43 0303 	adc.w	r3, r3, r3
   83158:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   8315c:	bf08      	it	eq
   8315e:	3d01      	subeq	r5, #1
   83160:	d0f7      	beq.n	83152 <__aeabi_dmul+0x1c6>
   83162:	ea43 0306 	orr.w	r3, r3, r6
   83166:	4770      	bx	lr
   83168:	ea94 0f0c 	teq	r4, ip
   8316c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   83170:	bf18      	it	ne
   83172:	ea95 0f0c 	teqne	r5, ip
   83176:	d00c      	beq.n	83192 <__aeabi_dmul+0x206>
   83178:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8317c:	bf18      	it	ne
   8317e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   83182:	d1d1      	bne.n	83128 <__aeabi_dmul+0x19c>
   83184:	ea81 0103 	eor.w	r1, r1, r3
   83188:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8318c:	f04f 0000 	mov.w	r0, #0
   83190:	bd70      	pop	{r4, r5, r6, pc}
   83192:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   83196:	bf06      	itte	eq
   83198:	4610      	moveq	r0, r2
   8319a:	4619      	moveq	r1, r3
   8319c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   831a0:	d019      	beq.n	831d6 <__aeabi_dmul+0x24a>
   831a2:	ea94 0f0c 	teq	r4, ip
   831a6:	d102      	bne.n	831ae <__aeabi_dmul+0x222>
   831a8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   831ac:	d113      	bne.n	831d6 <__aeabi_dmul+0x24a>
   831ae:	ea95 0f0c 	teq	r5, ip
   831b2:	d105      	bne.n	831c0 <__aeabi_dmul+0x234>
   831b4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   831b8:	bf1c      	itt	ne
   831ba:	4610      	movne	r0, r2
   831bc:	4619      	movne	r1, r3
   831be:	d10a      	bne.n	831d6 <__aeabi_dmul+0x24a>
   831c0:	ea81 0103 	eor.w	r1, r1, r3
   831c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   831c8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   831cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   831d0:	f04f 0000 	mov.w	r0, #0
   831d4:	bd70      	pop	{r4, r5, r6, pc}
   831d6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   831da:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   831de:	bd70      	pop	{r4, r5, r6, pc}

000831e0 <__aeabi_ddiv>:
   831e0:	b570      	push	{r4, r5, r6, lr}
   831e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   831e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   831ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   831ee:	bf1d      	ittte	ne
   831f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   831f4:	ea94 0f0c 	teqne	r4, ip
   831f8:	ea95 0f0c 	teqne	r5, ip
   831fc:	f000 f8a7 	bleq	8334e <__aeabi_ddiv+0x16e>
   83200:	eba4 0405 	sub.w	r4, r4, r5
   83204:	ea81 0e03 	eor.w	lr, r1, r3
   83208:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8320c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   83210:	f000 8088 	beq.w	83324 <__aeabi_ddiv+0x144>
   83214:	ea4f 3303 	mov.w	r3, r3, lsl #12
   83218:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   8321c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   83220:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   83224:	ea4f 2202 	mov.w	r2, r2, lsl #8
   83228:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   8322c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   83230:	ea4f 2600 	mov.w	r6, r0, lsl #8
   83234:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   83238:	429d      	cmp	r5, r3
   8323a:	bf08      	it	eq
   8323c:	4296      	cmpeq	r6, r2
   8323e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   83242:	f504 7440 	add.w	r4, r4, #768	; 0x300
   83246:	d202      	bcs.n	8324e <__aeabi_ddiv+0x6e>
   83248:	085b      	lsrs	r3, r3, #1
   8324a:	ea4f 0232 	mov.w	r2, r2, rrx
   8324e:	1ab6      	subs	r6, r6, r2
   83250:	eb65 0503 	sbc.w	r5, r5, r3
   83254:	085b      	lsrs	r3, r3, #1
   83256:	ea4f 0232 	mov.w	r2, r2, rrx
   8325a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   8325e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   83262:	ebb6 0e02 	subs.w	lr, r6, r2
   83266:	eb75 0e03 	sbcs.w	lr, r5, r3
   8326a:	bf22      	ittt	cs
   8326c:	1ab6      	subcs	r6, r6, r2
   8326e:	4675      	movcs	r5, lr
   83270:	ea40 000c 	orrcs.w	r0, r0, ip
   83274:	085b      	lsrs	r3, r3, #1
   83276:	ea4f 0232 	mov.w	r2, r2, rrx
   8327a:	ebb6 0e02 	subs.w	lr, r6, r2
   8327e:	eb75 0e03 	sbcs.w	lr, r5, r3
   83282:	bf22      	ittt	cs
   83284:	1ab6      	subcs	r6, r6, r2
   83286:	4675      	movcs	r5, lr
   83288:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   8328c:	085b      	lsrs	r3, r3, #1
   8328e:	ea4f 0232 	mov.w	r2, r2, rrx
   83292:	ebb6 0e02 	subs.w	lr, r6, r2
   83296:	eb75 0e03 	sbcs.w	lr, r5, r3
   8329a:	bf22      	ittt	cs
   8329c:	1ab6      	subcs	r6, r6, r2
   8329e:	4675      	movcs	r5, lr
   832a0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   832a4:	085b      	lsrs	r3, r3, #1
   832a6:	ea4f 0232 	mov.w	r2, r2, rrx
   832aa:	ebb6 0e02 	subs.w	lr, r6, r2
   832ae:	eb75 0e03 	sbcs.w	lr, r5, r3
   832b2:	bf22      	ittt	cs
   832b4:	1ab6      	subcs	r6, r6, r2
   832b6:	4675      	movcs	r5, lr
   832b8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   832bc:	ea55 0e06 	orrs.w	lr, r5, r6
   832c0:	d018      	beq.n	832f4 <__aeabi_ddiv+0x114>
   832c2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   832c6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   832ca:	ea4f 1606 	mov.w	r6, r6, lsl #4
   832ce:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   832d2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   832d6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   832da:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   832de:	d1c0      	bne.n	83262 <__aeabi_ddiv+0x82>
   832e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   832e4:	d10b      	bne.n	832fe <__aeabi_ddiv+0x11e>
   832e6:	ea41 0100 	orr.w	r1, r1, r0
   832ea:	f04f 0000 	mov.w	r0, #0
   832ee:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   832f2:	e7b6      	b.n	83262 <__aeabi_ddiv+0x82>
   832f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   832f8:	bf04      	itt	eq
   832fa:	4301      	orreq	r1, r0
   832fc:	2000      	moveq	r0, #0
   832fe:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   83302:	bf88      	it	hi
   83304:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   83308:	f63f aeaf 	bhi.w	8306a <__aeabi_dmul+0xde>
   8330c:	ebb5 0c03 	subs.w	ip, r5, r3
   83310:	bf04      	itt	eq
   83312:	ebb6 0c02 	subseq.w	ip, r6, r2
   83316:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8331a:	f150 0000 	adcs.w	r0, r0, #0
   8331e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   83322:	bd70      	pop	{r4, r5, r6, pc}
   83324:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   83328:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   8332c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   83330:	bfc2      	ittt	gt
   83332:	ebd4 050c 	rsbsgt	r5, r4, ip
   83336:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8333a:	bd70      	popgt	{r4, r5, r6, pc}
   8333c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   83340:	f04f 0e00 	mov.w	lr, #0
   83344:	3c01      	subs	r4, #1
   83346:	e690      	b.n	8306a <__aeabi_dmul+0xde>
   83348:	ea45 0e06 	orr.w	lr, r5, r6
   8334c:	e68d      	b.n	8306a <__aeabi_dmul+0xde>
   8334e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   83352:	ea94 0f0c 	teq	r4, ip
   83356:	bf08      	it	eq
   83358:	ea95 0f0c 	teqeq	r5, ip
   8335c:	f43f af3b 	beq.w	831d6 <__aeabi_dmul+0x24a>
   83360:	ea94 0f0c 	teq	r4, ip
   83364:	d10a      	bne.n	8337c <__aeabi_ddiv+0x19c>
   83366:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8336a:	f47f af34 	bne.w	831d6 <__aeabi_dmul+0x24a>
   8336e:	ea95 0f0c 	teq	r5, ip
   83372:	f47f af25 	bne.w	831c0 <__aeabi_dmul+0x234>
   83376:	4610      	mov	r0, r2
   83378:	4619      	mov	r1, r3
   8337a:	e72c      	b.n	831d6 <__aeabi_dmul+0x24a>
   8337c:	ea95 0f0c 	teq	r5, ip
   83380:	d106      	bne.n	83390 <__aeabi_ddiv+0x1b0>
   83382:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   83386:	f43f aefd 	beq.w	83184 <__aeabi_dmul+0x1f8>
   8338a:	4610      	mov	r0, r2
   8338c:	4619      	mov	r1, r3
   8338e:	e722      	b.n	831d6 <__aeabi_dmul+0x24a>
   83390:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   83394:	bf18      	it	ne
   83396:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8339a:	f47f aec5 	bne.w	83128 <__aeabi_dmul+0x19c>
   8339e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   833a2:	f47f af0d 	bne.w	831c0 <__aeabi_dmul+0x234>
   833a6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   833aa:	f47f aeeb 	bne.w	83184 <__aeabi_dmul+0x1f8>
   833ae:	e712      	b.n	831d6 <__aeabi_dmul+0x24a>

000833b0 <__gedf2>:
   833b0:	f04f 3cff 	mov.w	ip, #4294967295
   833b4:	e006      	b.n	833c4 <__cmpdf2+0x4>
   833b6:	bf00      	nop

000833b8 <__ledf2>:
   833b8:	f04f 0c01 	mov.w	ip, #1
   833bc:	e002      	b.n	833c4 <__cmpdf2+0x4>
   833be:	bf00      	nop

000833c0 <__cmpdf2>:
   833c0:	f04f 0c01 	mov.w	ip, #1
   833c4:	f84d cd04 	str.w	ip, [sp, #-4]!
   833c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   833cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   833d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   833d4:	bf18      	it	ne
   833d6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   833da:	d01b      	beq.n	83414 <__cmpdf2+0x54>
   833dc:	b001      	add	sp, #4
   833de:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   833e2:	bf0c      	ite	eq
   833e4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   833e8:	ea91 0f03 	teqne	r1, r3
   833ec:	bf02      	ittt	eq
   833ee:	ea90 0f02 	teqeq	r0, r2
   833f2:	2000      	moveq	r0, #0
   833f4:	4770      	bxeq	lr
   833f6:	f110 0f00 	cmn.w	r0, #0
   833fa:	ea91 0f03 	teq	r1, r3
   833fe:	bf58      	it	pl
   83400:	4299      	cmppl	r1, r3
   83402:	bf08      	it	eq
   83404:	4290      	cmpeq	r0, r2
   83406:	bf2c      	ite	cs
   83408:	17d8      	asrcs	r0, r3, #31
   8340a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   8340e:	f040 0001 	orr.w	r0, r0, #1
   83412:	4770      	bx	lr
   83414:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   83418:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8341c:	d102      	bne.n	83424 <__cmpdf2+0x64>
   8341e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   83422:	d107      	bne.n	83434 <__cmpdf2+0x74>
   83424:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   83428:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8342c:	d1d6      	bne.n	833dc <__cmpdf2+0x1c>
   8342e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   83432:	d0d3      	beq.n	833dc <__cmpdf2+0x1c>
   83434:	f85d 0b04 	ldr.w	r0, [sp], #4
   83438:	4770      	bx	lr
   8343a:	bf00      	nop

0008343c <__aeabi_cdrcmple>:
   8343c:	4684      	mov	ip, r0
   8343e:	4610      	mov	r0, r2
   83440:	4662      	mov	r2, ip
   83442:	468c      	mov	ip, r1
   83444:	4619      	mov	r1, r3
   83446:	4663      	mov	r3, ip
   83448:	e000      	b.n	8344c <__aeabi_cdcmpeq>
   8344a:	bf00      	nop

0008344c <__aeabi_cdcmpeq>:
   8344c:	b501      	push	{r0, lr}
   8344e:	f7ff ffb7 	bl	833c0 <__cmpdf2>
   83452:	2800      	cmp	r0, #0
   83454:	bf48      	it	mi
   83456:	f110 0f00 	cmnmi.w	r0, #0
   8345a:	bd01      	pop	{r0, pc}

0008345c <__aeabi_dcmpeq>:
   8345c:	f84d ed08 	str.w	lr, [sp, #-8]!
   83460:	f7ff fff4 	bl	8344c <__aeabi_cdcmpeq>
   83464:	bf0c      	ite	eq
   83466:	2001      	moveq	r0, #1
   83468:	2000      	movne	r0, #0
   8346a:	f85d fb08 	ldr.w	pc, [sp], #8
   8346e:	bf00      	nop

00083470 <__aeabi_dcmplt>:
   83470:	f84d ed08 	str.w	lr, [sp, #-8]!
   83474:	f7ff ffea 	bl	8344c <__aeabi_cdcmpeq>
   83478:	bf34      	ite	cc
   8347a:	2001      	movcc	r0, #1
   8347c:	2000      	movcs	r0, #0
   8347e:	f85d fb08 	ldr.w	pc, [sp], #8
   83482:	bf00      	nop

00083484 <__aeabi_dcmple>:
   83484:	f84d ed08 	str.w	lr, [sp, #-8]!
   83488:	f7ff ffe0 	bl	8344c <__aeabi_cdcmpeq>
   8348c:	bf94      	ite	ls
   8348e:	2001      	movls	r0, #1
   83490:	2000      	movhi	r0, #0
   83492:	f85d fb08 	ldr.w	pc, [sp], #8
   83496:	bf00      	nop

00083498 <__aeabi_dcmpge>:
   83498:	f84d ed08 	str.w	lr, [sp, #-8]!
   8349c:	f7ff ffce 	bl	8343c <__aeabi_cdrcmple>
   834a0:	bf94      	ite	ls
   834a2:	2001      	movls	r0, #1
   834a4:	2000      	movhi	r0, #0
   834a6:	f85d fb08 	ldr.w	pc, [sp], #8
   834aa:	bf00      	nop

000834ac <__aeabi_dcmpgt>:
   834ac:	f84d ed08 	str.w	lr, [sp, #-8]!
   834b0:	f7ff ffc4 	bl	8343c <__aeabi_cdrcmple>
   834b4:	bf34      	ite	cc
   834b6:	2001      	movcc	r0, #1
   834b8:	2000      	movcs	r0, #0
   834ba:	f85d fb08 	ldr.w	pc, [sp], #8
   834be:	bf00      	nop

000834c0 <__aeabi_d2iz>:
   834c0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   834c4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   834c8:	d215      	bcs.n	834f6 <__aeabi_d2iz+0x36>
   834ca:	d511      	bpl.n	834f0 <__aeabi_d2iz+0x30>
   834cc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   834d0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   834d4:	d912      	bls.n	834fc <__aeabi_d2iz+0x3c>
   834d6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   834da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   834de:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   834e2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   834e6:	fa23 f002 	lsr.w	r0, r3, r2
   834ea:	bf18      	it	ne
   834ec:	4240      	negne	r0, r0
   834ee:	4770      	bx	lr
   834f0:	f04f 0000 	mov.w	r0, #0
   834f4:	4770      	bx	lr
   834f6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   834fa:	d105      	bne.n	83508 <__aeabi_d2iz+0x48>
   834fc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   83500:	bf08      	it	eq
   83502:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   83506:	4770      	bx	lr
   83508:	f04f 0000 	mov.w	r0, #0
   8350c:	4770      	bx	lr
   8350e:	bf00      	nop

00083510 <__libc_init_array>:
   83510:	b570      	push	{r4, r5, r6, lr}
   83512:	4e0f      	ldr	r6, [pc, #60]	; (83550 <__libc_init_array+0x40>)
   83514:	4d0f      	ldr	r5, [pc, #60]	; (83554 <__libc_init_array+0x44>)
   83516:	1b76      	subs	r6, r6, r5
   83518:	10b6      	asrs	r6, r6, #2
   8351a:	bf18      	it	ne
   8351c:	2400      	movne	r4, #0
   8351e:	d005      	beq.n	8352c <__libc_init_array+0x1c>
   83520:	3401      	adds	r4, #1
   83522:	f855 3b04 	ldr.w	r3, [r5], #4
   83526:	4798      	blx	r3
   83528:	42a6      	cmp	r6, r4
   8352a:	d1f9      	bne.n	83520 <__libc_init_array+0x10>
   8352c:	4e0a      	ldr	r6, [pc, #40]	; (83558 <__libc_init_array+0x48>)
   8352e:	4d0b      	ldr	r5, [pc, #44]	; (8355c <__libc_init_array+0x4c>)
   83530:	f000 f97e 	bl	83830 <_init>
   83534:	1b76      	subs	r6, r6, r5
   83536:	10b6      	asrs	r6, r6, #2
   83538:	bf18      	it	ne
   8353a:	2400      	movne	r4, #0
   8353c:	d006      	beq.n	8354c <__libc_init_array+0x3c>
   8353e:	3401      	adds	r4, #1
   83540:	f855 3b04 	ldr.w	r3, [r5], #4
   83544:	4798      	blx	r3
   83546:	42a6      	cmp	r6, r4
   83548:	d1f9      	bne.n	8353e <__libc_init_array+0x2e>
   8354a:	bd70      	pop	{r4, r5, r6, pc}
   8354c:	bd70      	pop	{r4, r5, r6, pc}
   8354e:	bf00      	nop
   83550:	0008383c 	.word	0x0008383c
   83554:	0008383c 	.word	0x0008383c
   83558:	00083844 	.word	0x00083844
   8355c:	0008383c 	.word	0x0008383c

00083560 <register_fini>:
   83560:	4b02      	ldr	r3, [pc, #8]	; (8356c <register_fini+0xc>)
   83562:	b113      	cbz	r3, 8356a <register_fini+0xa>
   83564:	4802      	ldr	r0, [pc, #8]	; (83570 <register_fini+0x10>)
   83566:	f000 b805 	b.w	83574 <atexit>
   8356a:	4770      	bx	lr
   8356c:	00000000 	.word	0x00000000
   83570:	00083581 	.word	0x00083581

00083574 <atexit>:
   83574:	2300      	movs	r3, #0
   83576:	4601      	mov	r1, r0
   83578:	461a      	mov	r2, r3
   8357a:	4618      	mov	r0, r3
   8357c:	f000 b814 	b.w	835a8 <__register_exitproc>

00083580 <__libc_fini_array>:
   83580:	b538      	push	{r3, r4, r5, lr}
   83582:	4d07      	ldr	r5, [pc, #28]	; (835a0 <__libc_fini_array+0x20>)
   83584:	4c07      	ldr	r4, [pc, #28]	; (835a4 <__libc_fini_array+0x24>)
   83586:	1b2c      	subs	r4, r5, r4
   83588:	10a4      	asrs	r4, r4, #2
   8358a:	d005      	beq.n	83598 <__libc_fini_array+0x18>
   8358c:	3c01      	subs	r4, #1
   8358e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   83592:	4798      	blx	r3
   83594:	2c00      	cmp	r4, #0
   83596:	d1f9      	bne.n	8358c <__libc_fini_array+0xc>
   83598:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8359c:	f000 b952 	b.w	83844 <_fini>
   835a0:	00083854 	.word	0x00083854
   835a4:	00083850 	.word	0x00083850

000835a8 <__register_exitproc>:
   835a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   835ac:	4c25      	ldr	r4, [pc, #148]	; (83644 <__register_exitproc+0x9c>)
   835ae:	4606      	mov	r6, r0
   835b0:	6825      	ldr	r5, [r4, #0]
   835b2:	4688      	mov	r8, r1
   835b4:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
   835b8:	4692      	mov	sl, r2
   835ba:	4699      	mov	r9, r3
   835bc:	b3c4      	cbz	r4, 83630 <__register_exitproc+0x88>
   835be:	6860      	ldr	r0, [r4, #4]
   835c0:	281f      	cmp	r0, #31
   835c2:	dc17      	bgt.n	835f4 <__register_exitproc+0x4c>
   835c4:	1c41      	adds	r1, r0, #1
   835c6:	b176      	cbz	r6, 835e6 <__register_exitproc+0x3e>
   835c8:	eb04 0380 	add.w	r3, r4, r0, lsl #2
   835cc:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
   835d0:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
   835d4:	2201      	movs	r2, #1
   835d6:	4082      	lsls	r2, r0
   835d8:	4315      	orrs	r5, r2
   835da:	2e02      	cmp	r6, #2
   835dc:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
   835e0:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
   835e4:	d01e      	beq.n	83624 <__register_exitproc+0x7c>
   835e6:	1c83      	adds	r3, r0, #2
   835e8:	6061      	str	r1, [r4, #4]
   835ea:	2000      	movs	r0, #0
   835ec:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
   835f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   835f4:	4b14      	ldr	r3, [pc, #80]	; (83648 <__register_exitproc+0xa0>)
   835f6:	b303      	cbz	r3, 8363a <__register_exitproc+0x92>
   835f8:	f44f 70c8 	mov.w	r0, #400	; 0x190
   835fc:	f3af 8000 	nop.w
   83600:	4604      	mov	r4, r0
   83602:	b1d0      	cbz	r0, 8363a <__register_exitproc+0x92>
   83604:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
   83608:	2700      	movs	r7, #0
   8360a:	e884 0088 	stmia.w	r4, {r3, r7}
   8360e:	4638      	mov	r0, r7
   83610:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   83614:	2101      	movs	r1, #1
   83616:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
   8361a:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
   8361e:	2e00      	cmp	r6, #0
   83620:	d0e1      	beq.n	835e6 <__register_exitproc+0x3e>
   83622:	e7d1      	b.n	835c8 <__register_exitproc+0x20>
   83624:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   83628:	431a      	orrs	r2, r3
   8362a:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   8362e:	e7da      	b.n	835e6 <__register_exitproc+0x3e>
   83630:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
   83634:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   83638:	e7c1      	b.n	835be <__register_exitproc+0x16>
   8363a:	f04f 30ff 	mov.w	r0, #4294967295
   8363e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83642:	bf00      	nop
   83644:	0008382c 	.word	0x0008382c
   83648:	00000000 	.word	0x00000000

0008364c <npio2_hw>:
   8364c:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
   8365c:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
   8366c:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
   8367c:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
   8368c:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
   8369c:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
   836ac:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
   836bc:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

000836cc <two_over_pi>:
   836cc:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
   836dc:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
   836ec:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
   836fc:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
   8370c:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
   8371c:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
   8372c:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
   8373c:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
   8374c:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
   8375c:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
   8376c:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
   8377c:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
   8378c:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
   8379c:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
   837ac:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
   837bc:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
   837cc:	0060e27b 00c08c6b                       {.`.k...

000837d4 <init_jk>:
   837d4:	00000002 00000003 00000004 00000006     ................
   837e4:	00000000                                ....

000837e8 <PIo2>:
   837e8:	40000000 3ff921fb 00000000 3e74442d     ...@.!.?....-Dt>
   837f8:	80000000 3cf84698 60000000 3b78cc51     .....F.<...`Q.x;
   83808:	80000000 39f01b83 40000000 387a2520     .......9...@ %z8
   83818:	80000000 36e38222 00000000 3569f31d     ...."..6......i5
   83828:	00000043                                C...

0008382c <_global_impure_ptr>:
   8382c:	20000120                                 .. 

00083830 <_init>:
   83830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83832:	bf00      	nop
   83834:	bcf8      	pop	{r3, r4, r5, r6, r7}
   83836:	bc08      	pop	{r3}
   83838:	469e      	mov	lr, r3
   8383a:	4770      	bx	lr

0008383c <__init_array_start>:
   8383c:	00083561 	.word	0x00083561

00083840 <__frame_dummy_init_array_entry>:
   83840:	000800e1                                ....

00083844 <_fini>:
   83844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83846:	bf00      	nop
   83848:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8384a:	bc08      	pop	{r3}
   8384c:	469e      	mov	lr, r3
   8384e:	4770      	bx	lr

00083850 <__fini_array_start>:
   83850:	000800bd 	.word	0x000800bd

Disassembly of section .relocate:

20000000 <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20000000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20000004:	4a21      	ldr	r2, [pc, #132]	; (2000008c <SystemInit+0x8c>)
20000006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20000008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2000000c:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2000000e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
20000012:	f503 2360 	add.w	r3, r3, #917504	; 0xe0000
20000016:	6a1b      	ldr	r3, [r3, #32]
20000018:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
2000001c:	d107      	bne.n	2000002e <SystemInit+0x2e>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
2000001e:	4a1c      	ldr	r2, [pc, #112]	; (20000090 <SystemInit+0x90>)
20000020:	4b1c      	ldr	r3, [pc, #112]	; (20000094 <SystemInit+0x94>)
20000022:	621a      	str	r2, [r3, #32]
			                    CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
20000024:	461a      	mov	r2, r3
20000026:	6e93      	ldr	r3, [r2, #104]	; 0x68
20000028:	f013 0f01 	tst.w	r3, #1
2000002c:	d0fb      	beq.n	20000026 <SystemInit+0x26>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
2000002e:	4a1a      	ldr	r2, [pc, #104]	; (20000098 <SystemInit+0x98>)
20000030:	4b18      	ldr	r3, [pc, #96]	; (20000094 <SystemInit+0x94>)
20000032:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
20000034:	461a      	mov	r2, r3
20000036:	6e93      	ldr	r3, [r2, #104]	; 0x68
20000038:	f413 3f80 	tst.w	r3, #65536	; 0x10000
2000003c:	d0fb      	beq.n	20000036 <SystemInit+0x36>
	}
	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
2000003e:	4a15      	ldr	r2, [pc, #84]	; (20000094 <SystemInit+0x94>)
20000040:	6b13      	ldr	r3, [r2, #48]	; 0x30
20000042:	f023 0303 	bic.w	r3, r3, #3
20000046:	f043 0301 	orr.w	r3, r3, #1
2000004a:	6313      	str	r3, [r2, #48]	; 0x30
		                      PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
2000004c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2000004e:	f013 0f08 	tst.w	r3, #8
20000052:	d0fb      	beq.n	2000004c <SystemInit+0x4c>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20000054:	4a11      	ldr	r2, [pc, #68]	; (2000009c <SystemInit+0x9c>)
20000056:	4b0f      	ldr	r3, [pc, #60]	; (20000094 <SystemInit+0x94>)
20000058:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
2000005a:	461a      	mov	r2, r3
2000005c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2000005e:	f013 0f02 	tst.w	r3, #2
20000062:	d0fb      	beq.n	2000005c <SystemInit+0x5c>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
20000064:	2211      	movs	r2, #17
20000066:	4b0b      	ldr	r3, [pc, #44]	; (20000094 <SystemInit+0x94>)
20000068:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
2000006a:	461a      	mov	r2, r3
2000006c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2000006e:	f013 0f08 	tst.w	r3, #8
20000072:	d0fb      	beq.n	2000006c <SystemInit+0x6c>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
20000074:	2212      	movs	r2, #18
20000076:	4b07      	ldr	r3, [pc, #28]	; (20000094 <SystemInit+0x94>)
20000078:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
2000007a:	461a      	mov	r2, r3
2000007c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2000007e:	f013 0f08 	tst.w	r3, #8
20000082:	d0fb      	beq.n	2000007c <SystemInit+0x7c>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
20000084:	4a06      	ldr	r2, [pc, #24]	; (200000a0 <SystemInit+0xa0>)
20000086:	4b07      	ldr	r3, [pc, #28]	; (200000a4 <SystemInit+0xa4>)
20000088:	601a      	str	r2, [r3, #0]
2000008a:	4770      	bx	lr
2000008c:	400e0800 	.word	0x400e0800
20000090:	00370809 	.word	0x00370809
20000094:	400e0400 	.word	0x400e0400
20000098:	01370809 	.word	0x01370809
2000009c:	200f3f01 	.word	0x200f3f01
200000a0:	05b8d800 	.word	0x05b8d800
200000a4:	20000118 	.word	0x20000118

200000a8 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200000a8:	4b16      	ldr	r3, [pc, #88]	; (20000104 <system_init_flash+0x5c>)
200000aa:	4298      	cmp	r0, r3
200000ac:	d806      	bhi.n	200000bc <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200000ae:	2300      	movs	r3, #0
200000b0:	4a15      	ldr	r2, [pc, #84]	; (20000108 <system_init_flash+0x60>)
200000b2:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200000b4:	f502 7200 	add.w	r2, r2, #512	; 0x200
200000b8:	6013      	str	r3, [r2, #0]
200000ba:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200000bc:	4b13      	ldr	r3, [pc, #76]	; (2000010c <system_init_flash+0x64>)
200000be:	4298      	cmp	r0, r3
200000c0:	d807      	bhi.n	200000d2 <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200000c2:	f44f 7380 	mov.w	r3, #256	; 0x100
200000c6:	4a10      	ldr	r2, [pc, #64]	; (20000108 <system_init_flash+0x60>)
200000c8:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200000ca:	f502 7200 	add.w	r2, r2, #512	; 0x200
200000ce:	6013      	str	r3, [r2, #0]
200000d0:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200000d2:	4b0f      	ldr	r3, [pc, #60]	; (20000110 <system_init_flash+0x68>)
200000d4:	4298      	cmp	r0, r3
200000d6:	d807      	bhi.n	200000e8 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200000d8:	f44f 7300 	mov.w	r3, #512	; 0x200
200000dc:	4a0a      	ldr	r2, [pc, #40]	; (20000108 <system_init_flash+0x60>)
200000de:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200000e0:	f502 7200 	add.w	r2, r2, #512	; 0x200
200000e4:	6013      	str	r3, [r2, #0]
200000e6:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200000e8:	4b0a      	ldr	r3, [pc, #40]	; (20000114 <system_init_flash+0x6c>)
200000ea:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200000ec:	bf94      	ite	ls
200000ee:	f44f 7340 	movls.w	r3, #768	; 0x300
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200000f2:	f44f 6380 	movhi.w	r3, #1024	; 0x400
200000f6:	4a04      	ldr	r2, [pc, #16]	; (20000108 <system_init_flash+0x60>)
200000f8:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
200000fa:	f502 7200 	add.w	r2, r2, #512	; 0x200
200000fe:	6013      	str	r3, [r2, #0]
20000100:	4770      	bx	lr
20000102:	bf00      	nop
20000104:	016e35ff 	.word	0x016e35ff
20000108:	400e0800 	.word	0x400e0800
2000010c:	026259ff 	.word	0x026259ff
20000110:	044aa1ff 	.word	0x044aa1ff
20000114:	0501bcff 	.word	0x0501bcff

20000118 <SystemCoreClock>:
20000118:	003d0900 00000000                       ..=.....

20000120 <impure_data>:
20000120:	00000000 2000040c 20000474 200004dc     ....... t.. ... 
	...
20000154:	00083828 00000000 00000000 00000000     (8..............
	...
200001c8:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200001d8:	0005deec 0000000b 00000000 00000000     ................
	...
